// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/serialization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Submap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Submap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImuData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImuData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OdometryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OdometryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedFramePoseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedFramePoseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandmarkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalSlamResultData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalSlamResultData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializationHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializationHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedData_reflection_ = NULL;
struct SerializedDataOneofInstance {
  const ::cartographer::mapping::proto::PoseGraph* pose_graph_;
  const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options_;
  const ::cartographer::mapping::proto::Submap* submap_;
  const ::cartographer::mapping::proto::Node* node_;
  const ::cartographer::mapping::proto::TrajectoryData* trajectory_data_;
  const ::cartographer::mapping::proto::ImuData* imu_data_;
  const ::cartographer::mapping::proto::OdometryData* odometry_data_;
  const ::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data_;
  const ::cartographer::mapping::proto::LandmarkData* landmark_data_;
}* SerializedData_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/serialization.proto");
  GOOGLE_CHECK(file != NULL);
  Submap_descriptor_ = file->message_type(0);
  static const int Submap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_3d_),
  };
  Submap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Submap_descriptor_,
      Submap::default_instance_,
      Submap_offsets_,
      -1,
      -1,
      -1,
      sizeof(Submap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, _is_default_instance_));
  Node_descriptor_ = file->message_type(1);
  static const int Node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_data_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  ImuData_descriptor_ = file->message_type(2);
  static const int ImuData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, imu_data_),
  };
  ImuData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImuData_descriptor_,
      ImuData::default_instance_,
      ImuData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImuData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _is_default_instance_));
  OdometryData_descriptor_ = file->message_type(3);
  static const int OdometryData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, odometry_data_),
  };
  OdometryData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OdometryData_descriptor_,
      OdometryData::default_instance_,
      OdometryData_offsets_,
      -1,
      -1,
      -1,
      sizeof(OdometryData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _is_default_instance_));
  FixedFramePoseData_descriptor_ = file->message_type(4);
  static const int FixedFramePoseData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, fixed_frame_pose_data_),
  };
  FixedFramePoseData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FixedFramePoseData_descriptor_,
      FixedFramePoseData::default_instance_,
      FixedFramePoseData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FixedFramePoseData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _is_default_instance_));
  LandmarkData_descriptor_ = file->message_type(5);
  static const int LandmarkData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, landmark_data_),
  };
  LandmarkData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LandmarkData_descriptor_,
      LandmarkData::default_instance_,
      LandmarkData_offsets_,
      -1,
      -1,
      -1,
      sizeof(LandmarkData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, _is_default_instance_));
  TrajectoryData_descriptor_ = file->message_type(6);
  static const int TrajectoryData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, gravity_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, imu_calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, fixed_frame_origin_in_map_),
  };
  TrajectoryData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryData_descriptor_,
      TrajectoryData::default_instance_,
      TrajectoryData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrajectoryData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, _is_default_instance_));
  LocalSlamResultData_descriptor_ = file->message_type(7);
  static const int LocalSlamResultData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSlamResultData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSlamResultData, node_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSlamResultData, submaps_),
  };
  LocalSlamResultData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalSlamResultData_descriptor_,
      LocalSlamResultData::default_instance_,
      LocalSlamResultData_offsets_,
      -1,
      -1,
      -1,
      sizeof(LocalSlamResultData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSlamResultData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSlamResultData, _is_default_instance_));
  SerializationHeader_descriptor_ = file->message_type(8);
  static const int SerializationHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializationHeader, format_version_),
  };
  SerializationHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializationHeader_descriptor_,
      SerializationHeader::default_instance_,
      SerializationHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(SerializationHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializationHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializationHeader, _is_default_instance_));
  SerializedData_descriptor_ = file->message_type(9);
  static const int SerializedData_offsets_[10] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, pose_graph_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, all_trajectory_builder_options_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, submap_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, node_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, trajectory_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, imu_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, odometry_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, fixed_frame_pose_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SerializedData_default_oneof_instance_, landmark_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, data_),
  };
  SerializedData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedData_descriptor_,
      SerializedData::default_instance_,
      SerializedData_offsets_,
      -1,
      -1,
      -1,
      SerializedData_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _oneof_case_[0]),
      sizeof(SerializedData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Submap_descriptor_, &Submap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImuData_descriptor_, &ImuData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OdometryData_descriptor_, &OdometryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FixedFramePoseData_descriptor_, &FixedFramePoseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LandmarkData_descriptor_, &LandmarkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryData_descriptor_, &TrajectoryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalSlamResultData_descriptor_, &LocalSlamResultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializationHeader_descriptor_, &SerializationHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedData_descriptor_, &SerializedData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  delete Submap::default_instance_;
  delete Submap_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete ImuData::default_instance_;
  delete ImuData_reflection_;
  delete OdometryData::default_instance_;
  delete OdometryData_reflection_;
  delete FixedFramePoseData::default_instance_;
  delete FixedFramePoseData_reflection_;
  delete LandmarkData::default_instance_;
  delete LandmarkData_reflection_;
  delete TrajectoryData::default_instance_;
  delete TrajectoryData_reflection_;
  delete LocalSlamResultData::default_instance_;
  delete LocalSlamResultData_reflection_;
  delete SerializationHeader::default_instance_;
  delete SerializationHeader_reflection_;
  delete SerializedData::default_instance_;
  delete SerializedData_default_oneof_instance_;
  delete SerializedData_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto();
  ::cartographer::sensor::proto::protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.cartographer/mapping/proto/serializati"
    "on.proto\022\032cartographer.mapping.proto\032+ca"
    "rtographer/mapping/proto/pose_graph.prot"
    "o\032\'cartographer/mapping/proto/submap.pro"
    "to\0325cartographer/mapping/proto/trajector"
    "y_node_data.proto\032&cartographer/sensor/p"
    "roto/sensor.proto\032;cartographer/mapping/"
    "proto/trajectory_builder_options.proto\032,"
    "cartographer/transform/proto/transform.p"
    "roto\"\263\001\n\006Submap\0227\n\tsubmap_id\030\001 \001(\0132$.car"
    "tographer.mapping.proto.SubmapId\0227\n\tsubm"
    "ap_2d\030\002 \001(\0132$.cartographer.mapping.proto"
    ".Submap2D\0227\n\tsubmap_3d\030\003 \001(\0132$.cartograp"
    "her.mapping.proto.Submap3D\"~\n\004Node\0223\n\007no"
    "de_id\030\001 \001(\0132\".cartographer.mapping.proto"
    ".NodeId\022A\n\tnode_data\030\005 \001(\0132..cartographe"
    "r.mapping.proto.TrajectoryNodeData\"V\n\007Im"
    "uData\022\025\n\rtrajectory_id\030\001 \001(\005\0224\n\010imu_data"
    "\030\002 \001(\0132\".cartographer.sensor.proto.ImuDa"
    "ta\"e\n\014OdometryData\022\025\n\rtrajectory_id\030\001 \001("
    "\005\022>\n\rodometry_data\030\002 \001(\0132\'.cartographer."
    "sensor.proto.OdometryData\"y\n\022FixedFrameP"
    "oseData\022\025\n\rtrajectory_id\030\001 \001(\005\022L\n\025fixed_"
    "frame_pose_data\030\002 \001(\0132-.cartographer.sen"
    "sor.proto.FixedFramePoseData\"e\n\014Landmark"
    "Data\022\025\n\rtrajectory_id\030\001 \001(\005\022>\n\rlandmark_"
    "data\030\002 \001(\0132\'.cartographer.sensor.proto.L"
    "andmarkData\"\317\001\n\016TrajectoryData\022\025\n\rtrajec"
    "tory_id\030\001 \001(\005\022\030\n\020gravity_constant\030\002 \001(\001\022"
    "B\n\017imu_calibration\030\003 \001(\0132).cartographer."
    "transform.proto.Quaterniond\022H\n\031fixed_fra"
    "me_origin_in_map\030\004 \001(\0132%.cartographer.tr"
    "ansform.proto.Rigid3d\"\240\001\n\023LocalSlamResul"
    "tData\022\021\n\ttimestamp\030\001 \001(\003\022A\n\tnode_data\030\002 "
    "\001(\0132..cartographer.mapping.proto.Traject"
    "oryNodeData\0223\n\007submaps\030\003 \003(\0132\".cartograp"
    "her.mapping.proto.Submap\"-\n\023Serializatio"
    "nHeader\022\026\n\016format_version\030\001 \001(\r\"\367\004\n\016Seri"
    "alizedData\022;\n\npose_graph\030\001 \001(\0132%.cartogr"
    "apher.mapping.proto.PoseGraphH\000\022a\n\036all_t"
    "rajectory_builder_options\030\002 \001(\01327.cartog"
    "rapher.mapping.proto.AllTrajectoryBuilde"
    "rOptionsH\000\0224\n\006submap\030\003 \001(\0132\".cartographe"
    "r.mapping.proto.SubmapH\000\0220\n\004node\030\004 \001(\0132 "
    ".cartographer.mapping.proto.NodeH\000\022E\n\017tr"
    "ajectory_data\030\005 \001(\0132*.cartographer.mappi"
    "ng.proto.TrajectoryDataH\000\0227\n\010imu_data\030\006 "
    "\001(\0132#.cartographer.mapping.proto.ImuData"
    "H\000\022A\n\rodometry_data\030\007 \001(\0132(.cartographer"
    ".mapping.proto.OdometryDataH\000\022O\n\025fixed_f"
    "rame_pose_data\030\010 \001(\0132..cartographer.mapp"
    "ing.proto.FixedFramePoseDataH\000\022A\n\rlandma"
    "rk_data\030\t \001(\0132(.cartographer.mapping.pro"
    "to.LandmarkDataH\000B\006\n\004datab\006proto3", 2153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/serialization.proto", &protobuf_RegisterTypes);
  Submap::default_instance_ = new Submap();
  Node::default_instance_ = new Node();
  ImuData::default_instance_ = new ImuData();
  OdometryData::default_instance_ = new OdometryData();
  FixedFramePoseData::default_instance_ = new FixedFramePoseData();
  LandmarkData::default_instance_ = new LandmarkData();
  TrajectoryData::default_instance_ = new TrajectoryData();
  LocalSlamResultData::default_instance_ = new LocalSlamResultData();
  SerializationHeader::default_instance_ = new SerializationHeader();
  SerializedData::default_instance_ = new SerializedData();
  SerializedData_default_oneof_instance_ = new SerializedDataOneofInstance();
  Submap::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  ImuData::default_instance_->InitAsDefaultInstance();
  OdometryData::default_instance_->InitAsDefaultInstance();
  FixedFramePoseData::default_instance_->InitAsDefaultInstance();
  LandmarkData::default_instance_->InitAsDefaultInstance();
  TrajectoryData::default_instance_->InitAsDefaultInstance();
  LocalSlamResultData::default_instance_->InitAsDefaultInstance();
  SerializationHeader::default_instance_->InitAsDefaultInstance();
  SerializedData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fserialization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fserialization_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fserialization_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fserialization_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Submap::kSubmapIdFieldNumber;
const int Submap::kSubmap2DFieldNumber;
const int Submap::kSubmap3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Submap::Submap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Submap)
}

void Submap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(&::cartographer::mapping::proto::SubmapId::default_instance());
  submap_2d_ = const_cast< ::cartographer::mapping::proto::Submap2D*>(&::cartographer::mapping::proto::Submap2D::default_instance());
  submap_3d_ = const_cast< ::cartographer::mapping::proto::Submap3D*>(&::cartographer::mapping::proto::Submap3D::default_instance());
}

Submap::Submap(const Submap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap)
}

void Submap::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  submap_id_ = NULL;
  submap_2d_ = NULL;
  submap_3d_ = NULL;
}

Submap::~Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap)
  SharedDtor();
}

void Submap::SharedDtor() {
  if (this != default_instance_) {
    delete submap_id_;
    delete submap_2d_;
    delete submap_3d_;
  }
}

void Submap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Submap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Submap_descriptor_;
}

const Submap& Submap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

Submap* Submap::default_instance_ = NULL;

Submap* Submap::New(::google::protobuf::Arena* arena) const {
  Submap* n = new Submap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap)
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) delete submap_2d_;
  submap_2d_ = NULL;
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) delete submap_3d_;
  submap_3d_ = NULL;
}

bool Submap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Submap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_submap_2d;
        break;
      }

      // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
      case 2: {
        if (tag == 18) {
         parse_submap_2d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_submap_3d;
        break;
      }

      // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
      case 3: {
        if (tag == 26) {
         parse_submap_3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Submap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Submap)
  return false;
#undef DO_
}

void Submap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Submap)
  // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_id_, output);
  }

  // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->submap_2d_, output);
  }

  // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->submap_3d_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Submap)
}

::google::protobuf::uint8* Submap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap)
  // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_id_, false, target);
  }

  // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->submap_2d_, false, target);
  }

  // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->submap_3d_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap)
  return target;
}

int Submap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap)
  int total_size = 0;

  // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_id_);
  }

  // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_2d_);
  }

  // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_3d_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Submap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Submap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Submap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Submap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Submap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Submap)
    MergeFrom(*source);
  }
}

void Submap::MergeFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_submap_id()) {
    mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
  if (from.has_submap_2d()) {
    mutable_submap_2d()->::cartographer::mapping::proto::Submap2D::MergeFrom(from.submap_2d());
  }
  if (from.has_submap_3d()) {
    mutable_submap_3d()->::cartographer::mapping::proto::Submap3D::MergeFrom(from.submap_3d());
  }
}

void Submap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap::CopyFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap::IsInitialized() const {

  return true;
}

void Submap::Swap(Submap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Submap::InternalSwap(Submap* other) {
  std::swap(submap_id_, other->submap_id_);
  std::swap(submap_2d_, other->submap_2d_);
  std::swap(submap_3d_, other->submap_3d_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Submap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Submap_descriptor_;
  metadata.reflection = Submap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Submap

// optional .cartographer.mapping.proto.SubmapId submap_id = 1;
bool Submap::has_submap_id() const {
  return !_is_default_instance_ && submap_id_ != NULL;
}
void Submap::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
const ::cartographer::mapping::proto::SubmapId& Submap::submap_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_ != NULL ? *submap_id_ : *default_instance_->submap_id_;
}
::cartographer::mapping::proto::SubmapId* Submap::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_;
}
::cartographer::mapping::proto::SubmapId* Submap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}

// optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
bool Submap::has_submap_2d() const {
  return !_is_default_instance_ && submap_2d_ != NULL;
}
void Submap::clear_submap_2d() {
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) delete submap_2d_;
  submap_2d_ = NULL;
}
const ::cartographer::mapping::proto::Submap2D& Submap::submap_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_ != NULL ? *submap_2d_ : *default_instance_->submap_2d_;
}
::cartographer::mapping::proto::Submap2D* Submap::mutable_submap_2d() {
  
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_;
}
::cartographer::mapping::proto::Submap2D* Submap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_2d)
  
  ::cartographer::mapping::proto::Submap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}

// optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
bool Submap::has_submap_3d() const {
  return !_is_default_instance_ && submap_3d_ != NULL;
}
void Submap::clear_submap_3d() {
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) delete submap_3d_;
  submap_3d_ = NULL;
}
const ::cartographer::mapping::proto::Submap3D& Submap::submap_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_ != NULL ? *submap_3d_ : *default_instance_->submap_3d_;
}
::cartographer::mapping::proto::Submap3D* Submap::mutable_submap_3d() {
  
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_;
}
::cartographer::mapping::proto::Submap3D* Submap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_3d)
  
  ::cartographer::mapping::proto::Submap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNodeIdFieldNumber;
const int Node::kNodeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(&::cartographer::mapping::proto::NodeId::default_instance());
  node_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryNodeData*>(&::cartographer::mapping::proto::TrajectoryNodeData::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = NULL;
  node_data_ = NULL;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != default_instance_) {
    delete node_id_;
    delete node_data_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Node)
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) delete node_id_;
  node_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.NodeId node_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_node_data;
        break;
      }

      // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
      case 5: {
        if (tag == 42) {
         parse_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Node)
  // optional .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_id_, output);
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->node_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Node)
  // optional .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_id_, false, target);
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->node_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Node)
  int total_size = 0;

  // optional .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_id_);
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_node_id()) {
    mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from.node_id());
  }
  if (from.has_node_data()) {
    mutable_node_data()->::cartographer::mapping::proto::TrajectoryNodeData::MergeFrom(from.node_data());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(node_data_, other->node_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional .cartographer.mapping.proto.NodeId node_id = 1;
bool Node::has_node_id() const {
  return !_is_default_instance_ && node_id_ != NULL;
}
void Node::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) delete node_id_;
  node_id_ = NULL;
}
const ::cartographer::mapping::proto::NodeId& Node::node_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_id)
  return node_id_ != NULL ? *node_id_ : *default_instance_->node_id_;
}
::cartographer::mapping::proto::NodeId* Node::mutable_node_id() {
  
  if (node_id_ == NULL) {
    node_id_ = new ::cartographer::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_id)
  return node_id_;
}
::cartographer::mapping::proto::NodeId* Node::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_id)
  
  ::cartographer::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
void Node::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_id)
}

// optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
bool Node::has_node_data() const {
  return !_is_default_instance_ && node_data_ != NULL;
}
void Node::clear_node_data() {
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
}
const ::cartographer::mapping::proto::TrajectoryNodeData& Node::node_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_data)
  return node_data_ != NULL ? *node_data_ : *default_instance_->node_data_;
}
::cartographer::mapping::proto::TrajectoryNodeData* Node::mutable_node_data() {
  
  if (node_data_ == NULL) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_data)
  return node_data_;
}
::cartographer::mapping::proto::TrajectoryNodeData* Node::release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_data)
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = node_data_;
  node_data_ = NULL;
  return temp;
}
void Node::set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  delete node_data_;
  node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kTrajectoryIdFieldNumber;
const int ImuData::kImuDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ImuData)
}

void ImuData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  imu_data_ = const_cast< ::cartographer::sensor::proto::ImuData*>(&::cartographer::sensor::proto::ImuData::default_instance());
}

ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ImuData)
}

void ImuData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_id_ = 0;
  imu_data_ = NULL;
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != default_instance_) {
    delete imu_data_;
  }
}

void ImuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuData_descriptor_;
}

const ImuData& ImuData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

ImuData* ImuData::default_instance_ = NULL;

ImuData* ImuData::New(::google::protobuf::Arena* arena) const {
  ImuData* n = new ImuData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ImuData)
  trajectory_id_ = 0;
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.ImuData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trajectory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imu_data;
        break;
      }

      // optional .cartographer.sensor.proto.ImuData imu_data = 2;
      case 2: {
        if (tag == 18) {
         parse_imu_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.ImuData)
  return false;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.ImuData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // optional .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imu_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ImuData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // optional .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imu_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ImuData)
  return target;
}

int ImuData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ImuData)
  int total_size = 0;

  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // optional .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imu_data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ImuData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImuData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ImuData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from.imu_data());
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {

  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  std::swap(trajectory_id_, other->trajectory_id_);
  std::swap(imu_data_, other->imu_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImuData_descriptor_;
  metadata.reflection = ImuData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImuData

// optional int32 trajectory_id = 1;
void ImuData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
 ::google::protobuf::int32 ImuData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.trajectory_id)
  return trajectory_id_;
}
 void ImuData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuData.trajectory_id)
}

// optional .cartographer.sensor.proto.ImuData imu_data = 2;
bool ImuData::has_imu_data() const {
  return !_is_default_instance_ && imu_data_ != NULL;
}
void ImuData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
const ::cartographer::sensor::proto::ImuData& ImuData::imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.imu_data)
  return imu_data_ != NULL ? *imu_data_ : *default_instance_->imu_data_;
}
::cartographer::sensor::proto::ImuData* ImuData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::cartographer::sensor::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuData.imu_data)
  return imu_data_;
}
::cartographer::sensor::proto::ImuData* ImuData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuData.imu_data)
  
  ::cartographer::sensor::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
void ImuData::set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuData.imu_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kTrajectoryIdFieldNumber;
const int OdometryData::kOdometryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.OdometryData)
}

void OdometryData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  odometry_data_ = const_cast< ::cartographer::sensor::proto::OdometryData*>(&::cartographer::sensor::proto::OdometryData::default_instance());
}

OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.OdometryData)
}

void OdometryData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_id_ = 0;
  odometry_data_ = NULL;
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != default_instance_) {
    delete odometry_data_;
  }
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OdometryData_descriptor_;
}

const OdometryData& OdometryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

OdometryData* OdometryData::default_instance_ = NULL;

OdometryData* OdometryData::New(::google::protobuf::Arena* arena) const {
  OdometryData* n = new OdometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.OdometryData)
  trajectory_id_ = 0;
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.OdometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trajectory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_odometry_data;
        break;
      }

      // optional .cartographer.sensor.proto.OdometryData odometry_data = 2;
      case 2: {
        if (tag == 18) {
         parse_odometry_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.OdometryData)
  return false;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.OdometryData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // optional .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->odometry_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.OdometryData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // optional .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->odometry_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.OdometryData)
  return target;
}

int OdometryData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.OdometryData)
  int total_size = 0;

  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // optional .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->odometry_data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.OdometryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OdometryData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.OdometryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from.odometry_data());
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {

  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  std::swap(trajectory_id_, other->trajectory_id_);
  std::swap(odometry_data_, other->odometry_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OdometryData_descriptor_;
  metadata.reflection = OdometryData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryData

// optional int32 trajectory_id = 1;
void OdometryData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
 ::google::protobuf::int32 OdometryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.trajectory_id)
  return trajectory_id_;
}
 void OdometryData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.OdometryData.trajectory_id)
}

// optional .cartographer.sensor.proto.OdometryData odometry_data = 2;
bool OdometryData::has_odometry_data() const {
  return !_is_default_instance_ && odometry_data_ != NULL;
}
void OdometryData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
const ::cartographer::sensor::proto::OdometryData& OdometryData::odometry_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.odometry_data)
  return odometry_data_ != NULL ? *odometry_data_ : *default_instance_->odometry_data_;
}
::cartographer::sensor::proto::OdometryData* OdometryData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::cartographer::sensor::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.OdometryData.odometry_data)
  return odometry_data_;
}
::cartographer::sensor::proto::OdometryData* OdometryData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.OdometryData.odometry_data)
  
  ::cartographer::sensor::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
void OdometryData::set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.OdometryData.odometry_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedFramePoseData::kTrajectoryIdFieldNumber;
const int FixedFramePoseData::kFixedFramePoseDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedFramePoseData::FixedFramePoseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.FixedFramePoseData)
}

void FixedFramePoseData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fixed_frame_pose_data_ = const_cast< ::cartographer::sensor::proto::FixedFramePoseData*>(&::cartographer::sensor::proto::FixedFramePoseData::default_instance());
}

FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_id_ = 0;
  fixed_frame_pose_data_ = NULL;
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != default_instance_) {
    delete fixed_frame_pose_data_;
  }
}

void FixedFramePoseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedFramePoseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedFramePoseData_descriptor_;
}

const FixedFramePoseData& FixedFramePoseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

FixedFramePoseData* FixedFramePoseData::default_instance_ = NULL;

FixedFramePoseData* FixedFramePoseData::New(::google::protobuf::Arena* arena) const {
  FixedFramePoseData* n = new FixedFramePoseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.FixedFramePoseData)
  trajectory_id_ = 0;
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}

bool FixedFramePoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.FixedFramePoseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trajectory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fixed_frame_pose_data;
        break;
      }

      // optional .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
      case 2: {
        if (tag == 18) {
         parse_fixed_frame_pose_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.FixedFramePoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.FixedFramePoseData)
  return false;
#undef DO_
}

void FixedFramePoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.FixedFramePoseData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // optional .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fixed_frame_pose_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.FixedFramePoseData)
}

::google::protobuf::uint8* FixedFramePoseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.FixedFramePoseData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // optional .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fixed_frame_pose_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.FixedFramePoseData)
  return target;
}

int FixedFramePoseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.FixedFramePoseData)
  int total_size = 0;

  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // optional .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fixed_frame_pose_data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FixedFramePoseData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedFramePoseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.FixedFramePoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
}

void FixedFramePoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {

  return true;
}

void FixedFramePoseData::Swap(FixedFramePoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  std::swap(trajectory_id_, other->trajectory_id_);
  std::swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedFramePoseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedFramePoseData_descriptor_;
  metadata.reflection = FixedFramePoseData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedFramePoseData

// optional int32 trajectory_id = 1;
void FixedFramePoseData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
 ::google::protobuf::int32 FixedFramePoseData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
  return trajectory_id_;
}
 void FixedFramePoseData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
}

// optional .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
bool FixedFramePoseData::has_fixed_frame_pose_data() const {
  return !_is_default_instance_ && fixed_frame_pose_data_ != NULL;
}
void FixedFramePoseData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
const ::cartographer::sensor::proto::FixedFramePoseData& FixedFramePoseData::fixed_frame_pose_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return fixed_frame_pose_data_ != NULL ? *fixed_frame_pose_data_ : *default_instance_->fixed_frame_pose_data_;
}
::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::cartographer::sensor::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  
  ::cartographer::sensor::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
void FixedFramePoseData::set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData::kTrajectoryIdFieldNumber;
const int LandmarkData::kLandmarkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData::LandmarkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LandmarkData)
}

void LandmarkData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  landmark_data_ = const_cast< ::cartographer::sensor::proto::LandmarkData*>(&::cartographer::sensor::proto::LandmarkData::default_instance());
}

LandmarkData::LandmarkData(const LandmarkData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LandmarkData)
}

void LandmarkData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_id_ = 0;
  landmark_data_ = NULL;
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LandmarkData)
  SharedDtor();
}

void LandmarkData::SharedDtor() {
  if (this != default_instance_) {
    delete landmark_data_;
  }
}

void LandmarkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkData_descriptor_;
}

const LandmarkData& LandmarkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

LandmarkData* LandmarkData::default_instance_ = NULL;

LandmarkData* LandmarkData::New(::google::protobuf::Arena* arena) const {
  LandmarkData* n = new LandmarkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LandmarkData)
  trajectory_id_ = 0;
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) delete landmark_data_;
  landmark_data_ = NULL;
}

bool LandmarkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LandmarkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trajectory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_landmark_data;
        break;
      }

      // optional .cartographer.sensor.proto.LandmarkData landmark_data = 2;
      case 2: {
        if (tag == 18) {
         parse_landmark_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LandmarkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LandmarkData)
  return false;
#undef DO_
}

void LandmarkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LandmarkData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // optional .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->landmark_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LandmarkData)
}

::google::protobuf::uint8* LandmarkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LandmarkData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // optional .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->landmark_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LandmarkData)
  return target;
}

int LandmarkData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LandmarkData)
  int total_size = 0;

  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // optional .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->landmark_data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LandmarkData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LandmarkData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LandmarkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LandmarkData)
    MergeFrom(*source);
  }
}

void LandmarkData::MergeFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LandmarkData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.has_landmark_data()) {
    mutable_landmark_data()->::cartographer::sensor::proto::LandmarkData::MergeFrom(from.landmark_data());
  }
}

void LandmarkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {

  return true;
}

void LandmarkData::Swap(LandmarkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData::InternalSwap(LandmarkData* other) {
  std::swap(trajectory_id_, other->trajectory_id_);
  std::swap(landmark_data_, other->landmark_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkData_descriptor_;
  metadata.reflection = LandmarkData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkData

// optional int32 trajectory_id = 1;
void LandmarkData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
 ::google::protobuf::int32 LandmarkData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LandmarkData.trajectory_id)
  return trajectory_id_;
}
 void LandmarkData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LandmarkData.trajectory_id)
}

// optional .cartographer.sensor.proto.LandmarkData landmark_data = 2;
bool LandmarkData::has_landmark_data() const {
  return !_is_default_instance_ && landmark_data_ != NULL;
}
void LandmarkData::clear_landmark_data() {
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) delete landmark_data_;
  landmark_data_ = NULL;
}
const ::cartographer::sensor::proto::LandmarkData& LandmarkData::landmark_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LandmarkData.landmark_data)
  return landmark_data_ != NULL ? *landmark_data_ : *default_instance_->landmark_data_;
}
::cartographer::sensor::proto::LandmarkData* LandmarkData::mutable_landmark_data() {
  
  if (landmark_data_ == NULL) {
    landmark_data_ = new ::cartographer::sensor::proto::LandmarkData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LandmarkData.landmark_data)
  return landmark_data_;
}
::cartographer::sensor::proto::LandmarkData* LandmarkData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LandmarkData.landmark_data)
  
  ::cartographer::sensor::proto::LandmarkData* temp = landmark_data_;
  landmark_data_ = NULL;
  return temp;
}
void LandmarkData::set_allocated_landmark_data(::cartographer::sensor::proto::LandmarkData* landmark_data) {
  delete landmark_data_;
  landmark_data_ = landmark_data;
  if (landmark_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LandmarkData.landmark_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryData::kTrajectoryIdFieldNumber;
const int TrajectoryData::kGravityConstantFieldNumber;
const int TrajectoryData::kImuCalibrationFieldNumber;
const int TrajectoryData::kFixedFrameOriginInMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryData::TrajectoryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryData)
}

void TrajectoryData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  imu_calibration_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(&::cartographer::transform::proto::Quaterniond::default_instance());
  fixed_frame_origin_in_map_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

TrajectoryData::TrajectoryData(const TrajectoryData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryData)
}

void TrajectoryData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_id_ = 0;
  gravity_constant_ = 0;
  imu_calibration_ = NULL;
  fixed_frame_origin_in_map_ = NULL;
}

TrajectoryData::~TrajectoryData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryData)
  SharedDtor();
}

void TrajectoryData::SharedDtor() {
  if (this != default_instance_) {
    delete imu_calibration_;
    delete fixed_frame_origin_in_map_;
  }
}

void TrajectoryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryData_descriptor_;
}

const TrajectoryData& TrajectoryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

TrajectoryData* TrajectoryData::default_instance_ = NULL;

TrajectoryData* TrajectoryData::New(::google::protobuf::Arena* arena) const {
  TrajectoryData* n = new TrajectoryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryData)
  trajectory_id_ = 0;
  gravity_constant_ = 0;
  if (GetArenaNoVirtual() == NULL && imu_calibration_ != NULL) delete imu_calibration_;
  imu_calibration_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed_frame_origin_in_map_ != NULL) delete fixed_frame_origin_in_map_;
  fixed_frame_origin_in_map_ = NULL;
}

bool TrajectoryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trajectory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gravity_constant;
        break;
      }

      // optional double gravity_constant = 2;
      case 2: {
        if (tag == 17) {
         parse_gravity_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gravity_constant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imu_calibration;
        break;
      }

      // optional .cartographer.transform.proto.Quaterniond imu_calibration = 3;
      case 3: {
        if (tag == 26) {
         parse_imu_calibration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_calibration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fixed_frame_origin_in_map;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
      case 4: {
        if (tag == 34) {
         parse_fixed_frame_origin_in_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_frame_origin_in_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryData)
  return false;
#undef DO_
}

void TrajectoryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // optional double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gravity_constant(), output);
  }

  // optional .cartographer.transform.proto.Quaterniond imu_calibration = 3;
  if (this->has_imu_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imu_calibration_, output);
  }

  // optional .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
  if (this->has_fixed_frame_origin_in_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fixed_frame_origin_in_map_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryData)
}

::google::protobuf::uint8* TrajectoryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryData)
  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // optional double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gravity_constant(), target);
  }

  // optional .cartographer.transform.proto.Quaterniond imu_calibration = 3;
  if (this->has_imu_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imu_calibration_, false, target);
  }

  // optional .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
  if (this->has_fixed_frame_origin_in_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->fixed_frame_origin_in_map_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryData)
  return target;
}

int TrajectoryData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryData)
  int total_size = 0;

  // optional int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // optional double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    total_size += 1 + 8;
  }

  // optional .cartographer.transform.proto.Quaterniond imu_calibration = 3;
  if (this->has_imu_calibration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imu_calibration_);
  }

  // optional .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
  if (this->has_fixed_frame_origin_in_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fixed_frame_origin_in_map_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryData)
    MergeFrom(*source);
  }
}

void TrajectoryData::MergeFrom(const TrajectoryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.gravity_constant() != 0) {
    set_gravity_constant(from.gravity_constant());
  }
  if (from.has_imu_calibration()) {
    mutable_imu_calibration()->::cartographer::transform::proto::Quaterniond::MergeFrom(from.imu_calibration());
  }
  if (from.has_fixed_frame_origin_in_map()) {
    mutable_fixed_frame_origin_in_map()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.fixed_frame_origin_in_map());
  }
}

void TrajectoryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryData::CopyFrom(const TrajectoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryData::IsInitialized() const {

  return true;
}

void TrajectoryData::Swap(TrajectoryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryData::InternalSwap(TrajectoryData* other) {
  std::swap(trajectory_id_, other->trajectory_id_);
  std::swap(gravity_constant_, other->gravity_constant_);
  std::swap(imu_calibration_, other->imu_calibration_);
  std::swap(fixed_frame_origin_in_map_, other->fixed_frame_origin_in_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryData_descriptor_;
  metadata.reflection = TrajectoryData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryData

// optional int32 trajectory_id = 1;
void TrajectoryData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
 ::google::protobuf::int32 TrajectoryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.trajectory_id)
  return trajectory_id_;
}
 void TrajectoryData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryData.trajectory_id)
}

// optional double gravity_constant = 2;
void TrajectoryData::clear_gravity_constant() {
  gravity_constant_ = 0;
}
 double TrajectoryData::gravity_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.gravity_constant)
  return gravity_constant_;
}
 void TrajectoryData::set_gravity_constant(double value) {
  
  gravity_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryData.gravity_constant)
}

// optional .cartographer.transform.proto.Quaterniond imu_calibration = 3;
bool TrajectoryData::has_imu_calibration() const {
  return !_is_default_instance_ && imu_calibration_ != NULL;
}
void TrajectoryData::clear_imu_calibration() {
  if (GetArenaNoVirtual() == NULL && imu_calibration_ != NULL) delete imu_calibration_;
  imu_calibration_ = NULL;
}
const ::cartographer::transform::proto::Quaterniond& TrajectoryData::imu_calibration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  return imu_calibration_ != NULL ? *imu_calibration_ : *default_instance_->imu_calibration_;
}
::cartographer::transform::proto::Quaterniond* TrajectoryData::mutable_imu_calibration() {
  
  if (imu_calibration_ == NULL) {
    imu_calibration_ = new ::cartographer::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  return imu_calibration_;
}
::cartographer::transform::proto::Quaterniond* TrajectoryData::release_imu_calibration() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  
  ::cartographer::transform::proto::Quaterniond* temp = imu_calibration_;
  imu_calibration_ = NULL;
  return temp;
}
void TrajectoryData::set_allocated_imu_calibration(::cartographer::transform::proto::Quaterniond* imu_calibration) {
  delete imu_calibration_;
  imu_calibration_ = imu_calibration;
  if (imu_calibration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryData.imu_calibration)
}

// optional .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
bool TrajectoryData::has_fixed_frame_origin_in_map() const {
  return !_is_default_instance_ && fixed_frame_origin_in_map_ != NULL;
}
void TrajectoryData::clear_fixed_frame_origin_in_map() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_origin_in_map_ != NULL) delete fixed_frame_origin_in_map_;
  fixed_frame_origin_in_map_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& TrajectoryData::fixed_frame_origin_in_map() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  return fixed_frame_origin_in_map_ != NULL ? *fixed_frame_origin_in_map_ : *default_instance_->fixed_frame_origin_in_map_;
}
::cartographer::transform::proto::Rigid3d* TrajectoryData::mutable_fixed_frame_origin_in_map() {
  
  if (fixed_frame_origin_in_map_ == NULL) {
    fixed_frame_origin_in_map_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  return fixed_frame_origin_in_map_;
}
::cartographer::transform::proto::Rigid3d* TrajectoryData::release_fixed_frame_origin_in_map() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  
  ::cartographer::transform::proto::Rigid3d* temp = fixed_frame_origin_in_map_;
  fixed_frame_origin_in_map_ = NULL;
  return temp;
}
void TrajectoryData::set_allocated_fixed_frame_origin_in_map(::cartographer::transform::proto::Rigid3d* fixed_frame_origin_in_map) {
  delete fixed_frame_origin_in_map_;
  fixed_frame_origin_in_map_ = fixed_frame_origin_in_map;
  if (fixed_frame_origin_in_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalSlamResultData::kTimestampFieldNumber;
const int LocalSlamResultData::kNodeDataFieldNumber;
const int LocalSlamResultData::kSubmapsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalSlamResultData::LocalSlamResultData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LocalSlamResultData)
}

void LocalSlamResultData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryNodeData*>(&::cartographer::mapping::proto::TrajectoryNodeData::default_instance());
}

LocalSlamResultData::LocalSlamResultData(const LocalSlamResultData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalSlamResultData)
}

void LocalSlamResultData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  node_data_ = NULL;
}

LocalSlamResultData::~LocalSlamResultData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalSlamResultData)
  SharedDtor();
}

void LocalSlamResultData::SharedDtor() {
  if (this != default_instance_) {
    delete node_data_;
  }
}

void LocalSlamResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalSlamResultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalSlamResultData_descriptor_;
}

const LocalSlamResultData& LocalSlamResultData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

LocalSlamResultData* LocalSlamResultData::default_instance_ = NULL;

LocalSlamResultData* LocalSlamResultData::New(::google::protobuf::Arena* arena) const {
  LocalSlamResultData* n = new LocalSlamResultData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalSlamResultData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalSlamResultData)
  timestamp_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
  submaps_.Clear();
}

bool LocalSlamResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LocalSlamResultData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_data;
        break;
      }

      // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
      case 2: {
        if (tag == 18) {
         parse_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_submaps;
        break;
      }

      // repeated .cartographer.mapping.proto.Submap submaps = 3;
      case 3: {
        if (tag == 26) {
         parse_submaps:
          DO_(input->IncrementRecursionDepth());
         parse_loop_submaps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_submaps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_submaps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LocalSlamResultData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LocalSlamResultData)
  return false;
#undef DO_
}

void LocalSlamResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LocalSlamResultData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
  if (this->has_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_data_, output);
  }

  // repeated .cartographer.mapping.proto.Submap submaps = 3;
  for (unsigned int i = 0, n = this->submaps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->submaps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LocalSlamResultData)
}

::google::protobuf::uint8* LocalSlamResultData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalSlamResultData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
  if (this->has_node_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_data_, false, target);
  }

  // repeated .cartographer.mapping.proto.Submap submaps = 3;
  for (unsigned int i = 0, n = this->submaps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->submaps(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalSlamResultData)
  return target;
}

int LocalSlamResultData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalSlamResultData)
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
  if (this->has_node_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_data_);
  }

  // repeated .cartographer.mapping.proto.Submap submaps = 3;
  total_size += 1 * this->submaps_size();
  for (int i = 0; i < this->submaps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->submaps(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalSlamResultData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LocalSlamResultData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalSlamResultData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalSlamResultData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LocalSlamResultData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LocalSlamResultData)
    MergeFrom(*source);
  }
}

void LocalSlamResultData::MergeFrom(const LocalSlamResultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalSlamResultData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  submaps_.MergeFrom(from.submaps_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_node_data()) {
    mutable_node_data()->::cartographer::mapping::proto::TrajectoryNodeData::MergeFrom(from.node_data());
  }
}

void LocalSlamResultData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LocalSlamResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSlamResultData::CopyFrom(const LocalSlamResultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalSlamResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSlamResultData::IsInitialized() const {

  return true;
}

void LocalSlamResultData::Swap(LocalSlamResultData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalSlamResultData::InternalSwap(LocalSlamResultData* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(node_data_, other->node_data_);
  submaps_.UnsafeArenaSwap(&other->submaps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalSlamResultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalSlamResultData_descriptor_;
  metadata.reflection = LocalSlamResultData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalSlamResultData

// optional int64 timestamp = 1;
void LocalSlamResultData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LocalSlamResultData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.timestamp)
  return timestamp_;
}
 void LocalSlamResultData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalSlamResultData.timestamp)
}

// optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
bool LocalSlamResultData::has_node_data() const {
  return !_is_default_instance_ && node_data_ != NULL;
}
void LocalSlamResultData::clear_node_data() {
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
}
const ::cartographer::mapping::proto::TrajectoryNodeData& LocalSlamResultData::node_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.node_data)
  return node_data_ != NULL ? *node_data_ : *default_instance_->node_data_;
}
::cartographer::mapping::proto::TrajectoryNodeData* LocalSlamResultData::mutable_node_data() {
  
  if (node_data_ == NULL) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalSlamResultData.node_data)
  return node_data_;
}
::cartographer::mapping::proto::TrajectoryNodeData* LocalSlamResultData::release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalSlamResultData.node_data)
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = node_data_;
  node_data_ = NULL;
  return temp;
}
void LocalSlamResultData::set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  delete node_data_;
  node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalSlamResultData.node_data)
}

// repeated .cartographer.mapping.proto.Submap submaps = 3;
int LocalSlamResultData::submaps_size() const {
  return submaps_.size();
}
void LocalSlamResultData::clear_submaps() {
  submaps_.Clear();
}
const ::cartographer::mapping::proto::Submap& LocalSlamResultData::submaps(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_.Get(index);
}
::cartographer::mapping::proto::Submap* LocalSlamResultData::mutable_submaps(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_.Mutable(index);
}
::cartographer::mapping::proto::Submap* LocalSlamResultData::add_submaps() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Submap >*
LocalSlamResultData::mutable_submaps() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return &submaps_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Submap >&
LocalSlamResultData::submaps() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializationHeader::kFormatVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializationHeader::SerializationHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SerializationHeader)
}

void SerializationHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SerializationHeader::SerializationHeader(const SerializationHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SerializationHeader)
}

void SerializationHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  format_version_ = 0u;
}

SerializationHeader::~SerializationHeader() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SerializationHeader)
  SharedDtor();
}

void SerializationHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializationHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializationHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializationHeader_descriptor_;
}

const SerializationHeader& SerializationHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

SerializationHeader* SerializationHeader::default_instance_ = NULL;

SerializationHeader* SerializationHeader::New(::google::protobuf::Arena* arena) const {
  SerializationHeader* n = new SerializationHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializationHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SerializationHeader)
  format_version_ = 0u;
}

bool SerializationHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SerializationHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 format_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SerializationHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SerializationHeader)
  return false;
#undef DO_
}

void SerializationHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SerializationHeader)
  // optional uint32 format_version = 1;
  if (this->format_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->format_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SerializationHeader)
}

::google::protobuf::uint8* SerializationHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SerializationHeader)
  // optional uint32 format_version = 1;
  if (this->format_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->format_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SerializationHeader)
  return target;
}

int SerializationHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SerializationHeader)
  int total_size = 0;

  // optional uint32 format_version = 1;
  if (this->format_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->format_version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializationHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SerializationHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializationHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializationHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SerializationHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SerializationHeader)
    MergeFrom(*source);
  }
}

void SerializationHeader::MergeFrom(const SerializationHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SerializationHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.format_version() != 0) {
    set_format_version(from.format_version());
  }
}

void SerializationHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SerializationHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializationHeader::CopyFrom(const SerializationHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SerializationHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializationHeader::IsInitialized() const {

  return true;
}

void SerializationHeader::Swap(SerializationHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializationHeader::InternalSwap(SerializationHeader* other) {
  std::swap(format_version_, other->format_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializationHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializationHeader_descriptor_;
  metadata.reflection = SerializationHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializationHeader

// optional uint32 format_version = 1;
void SerializationHeader::clear_format_version() {
  format_version_ = 0u;
}
 ::google::protobuf::uint32 SerializationHeader::format_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializationHeader.format_version)
  return format_version_;
}
 void SerializationHeader::set_format_version(::google::protobuf::uint32 value) {
  
  format_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SerializationHeader.format_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedData::kPoseGraphFieldNumber;
const int SerializedData::kAllTrajectoryBuilderOptionsFieldNumber;
const int SerializedData::kSubmapFieldNumber;
const int SerializedData::kNodeFieldNumber;
const int SerializedData::kTrajectoryDataFieldNumber;
const int SerializedData::kImuDataFieldNumber;
const int SerializedData::kOdometryDataFieldNumber;
const int SerializedData::kFixedFramePoseDataFieldNumber;
const int SerializedData::kLandmarkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedData::SerializedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SerializedData)
}

void SerializedData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  SerializedData_default_oneof_instance_->pose_graph_ = const_cast< ::cartographer::mapping::proto::PoseGraph*>(&::cartographer::mapping::proto::PoseGraph::default_instance());
  SerializedData_default_oneof_instance_->all_trajectory_builder_options_ = const_cast< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions*>(&::cartographer::mapping::proto::AllTrajectoryBuilderOptions::default_instance());
  SerializedData_default_oneof_instance_->submap_ = const_cast< ::cartographer::mapping::proto::Submap*>(&::cartographer::mapping::proto::Submap::default_instance());
  SerializedData_default_oneof_instance_->node_ = const_cast< ::cartographer::mapping::proto::Node*>(&::cartographer::mapping::proto::Node::default_instance());
  SerializedData_default_oneof_instance_->trajectory_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryData*>(&::cartographer::mapping::proto::TrajectoryData::default_instance());
  SerializedData_default_oneof_instance_->imu_data_ = const_cast< ::cartographer::mapping::proto::ImuData*>(&::cartographer::mapping::proto::ImuData::default_instance());
  SerializedData_default_oneof_instance_->odometry_data_ = const_cast< ::cartographer::mapping::proto::OdometryData*>(&::cartographer::mapping::proto::OdometryData::default_instance());
  SerializedData_default_oneof_instance_->fixed_frame_pose_data_ = const_cast< ::cartographer::mapping::proto::FixedFramePoseData*>(&::cartographer::mapping::proto::FixedFramePoseData::default_instance());
  SerializedData_default_oneof_instance_->landmark_data_ = const_cast< ::cartographer::mapping::proto::LandmarkData*>(&::cartographer::mapping::proto::LandmarkData::default_instance());
}

SerializedData::SerializedData(const SerializedData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SerializedData)
}

void SerializedData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_data();
}

SerializedData::~SerializedData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SerializedData)
  SharedDtor();
}

void SerializedData::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
  if (this != default_instance_) {
  }
}

void SerializedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedData_descriptor_;
}

const SerializedData& SerializedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  return *default_instance_;
}

SerializedData* SerializedData::default_instance_ = NULL;

SerializedData* SerializedData::New(::google::protobuf::Arena* arena) const {
  SerializedData* n = new SerializedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.mapping.proto.SerializedData)
  switch(data_case()) {
    case kPoseGraph: {
      delete data_.pose_graph_;
      break;
    }
    case kAllTrajectoryBuilderOptions: {
      delete data_.all_trajectory_builder_options_;
      break;
    }
    case kSubmap: {
      delete data_.submap_;
      break;
    }
    case kNode: {
      delete data_.node_;
      break;
    }
    case kTrajectoryData: {
      delete data_.trajectory_data_;
      break;
    }
    case kImuData: {
      delete data_.imu_data_;
      break;
    }
    case kOdometryData: {
      delete data_.odometry_data_;
      break;
    }
    case kFixedFramePoseData: {
      delete data_.fixed_frame_pose_data_;
      break;
    }
    case kLandmarkData: {
      delete data_.landmark_data_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SerializedData)
  clear_data();
}

bool SerializedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SerializedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.PoseGraph pose_graph = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_all_trajectory_builder_options;
        break;
      }

      // optional .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
      case 2: {
        if (tag == 18) {
         parse_all_trajectory_builder_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_trajectory_builder_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_submap;
        break;
      }

      // optional .cartographer.mapping.proto.Submap submap = 3;
      case 3: {
        if (tag == 26) {
         parse_submap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_node;
        break;
      }

      // optional .cartographer.mapping.proto.Node node = 4;
      case 4: {
        if (tag == 34) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trajectory_data;
        break;
      }

      // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
      case 5: {
        if (tag == 42) {
         parse_trajectory_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imu_data;
        break;
      }

      // optional .cartographer.mapping.proto.ImuData imu_data = 6;
      case 6: {
        if (tag == 50) {
         parse_imu_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_odometry_data;
        break;
      }

      // optional .cartographer.mapping.proto.OdometryData odometry_data = 7;
      case 7: {
        if (tag == 58) {
         parse_odometry_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fixed_frame_pose_data;
        break;
      }

      // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
      case 8: {
        if (tag == 66) {
         parse_fixed_frame_pose_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_landmark_data;
        break;
      }

      // optional .cartographer.mapping.proto.LandmarkData landmark_data = 9;
      case 9: {
        if (tag == 74) {
         parse_landmark_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SerializedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SerializedData)
  return false;
#undef DO_
}

void SerializedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SerializedData)
  // optional .cartographer.mapping.proto.PoseGraph pose_graph = 1;
  if (has_pose_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *data_.pose_graph_, output);
  }

  // optional .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
  if (has_all_trajectory_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *data_.all_trajectory_builder_options_, output);
  }

  // optional .cartographer.mapping.proto.Submap submap = 3;
  if (has_submap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *data_.submap_, output);
  }

  // optional .cartographer.mapping.proto.Node node = 4;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *data_.node_, output);
  }

  // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
  if (has_trajectory_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *data_.trajectory_data_, output);
  }

  // optional .cartographer.mapping.proto.ImuData imu_data = 6;
  if (has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *data_.imu_data_, output);
  }

  // optional .cartographer.mapping.proto.OdometryData odometry_data = 7;
  if (has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *data_.odometry_data_, output);
  }

  // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
  if (has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *data_.fixed_frame_pose_data_, output);
  }

  // optional .cartographer.mapping.proto.LandmarkData landmark_data = 9;
  if (has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *data_.landmark_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SerializedData)
}

::google::protobuf::uint8* SerializedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SerializedData)
  // optional .cartographer.mapping.proto.PoseGraph pose_graph = 1;
  if (has_pose_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *data_.pose_graph_, false, target);
  }

  // optional .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
  if (has_all_trajectory_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *data_.all_trajectory_builder_options_, false, target);
  }

  // optional .cartographer.mapping.proto.Submap submap = 3;
  if (has_submap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *data_.submap_, false, target);
  }

  // optional .cartographer.mapping.proto.Node node = 4;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *data_.node_, false, target);
  }

  // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
  if (has_trajectory_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *data_.trajectory_data_, false, target);
  }

  // optional .cartographer.mapping.proto.ImuData imu_data = 6;
  if (has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *data_.imu_data_, false, target);
  }

  // optional .cartographer.mapping.proto.OdometryData odometry_data = 7;
  if (has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *data_.odometry_data_, false, target);
  }

  // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
  if (has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *data_.fixed_frame_pose_data_, false, target);
  }

  // optional .cartographer.mapping.proto.LandmarkData landmark_data = 9;
  if (has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *data_.landmark_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SerializedData)
  return target;
}

int SerializedData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SerializedData)
  int total_size = 0;

  switch (data_case()) {
    // optional .cartographer.mapping.proto.PoseGraph pose_graph = 1;
    case kPoseGraph: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.pose_graph_);
      break;
    }
    // optional .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
    case kAllTrajectoryBuilderOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.all_trajectory_builder_options_);
      break;
    }
    // optional .cartographer.mapping.proto.Submap submap = 3;
    case kSubmap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.submap_);
      break;
    }
    // optional .cartographer.mapping.proto.Node node = 4;
    case kNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.node_);
      break;
    }
    // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
    case kTrajectoryData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.trajectory_data_);
      break;
    }
    // optional .cartographer.mapping.proto.ImuData imu_data = 6;
    case kImuData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.imu_data_);
      break;
    }
    // optional .cartographer.mapping.proto.OdometryData odometry_data = 7;
    case kOdometryData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.odometry_data_);
      break;
    }
    // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
    case kFixedFramePoseData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.fixed_frame_pose_data_);
      break;
    }
    // optional .cartographer.mapping.proto.LandmarkData landmark_data = 9;
    case kLandmarkData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.landmark_data_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SerializedData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerializedData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SerializedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SerializedData)
    MergeFrom(*source);
  }
}

void SerializedData::MergeFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SerializedData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.data_case()) {
    case kPoseGraph: {
      mutable_pose_graph()->::cartographer::mapping::proto::PoseGraph::MergeFrom(from.pose_graph());
      break;
    }
    case kAllTrajectoryBuilderOptions: {
      mutable_all_trajectory_builder_options()->::cartographer::mapping::proto::AllTrajectoryBuilderOptions::MergeFrom(from.all_trajectory_builder_options());
      break;
    }
    case kSubmap: {
      mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from.submap());
      break;
    }
    case kNode: {
      mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from.node());
      break;
    }
    case kTrajectoryData: {
      mutable_trajectory_data()->::cartographer::mapping::proto::TrajectoryData::MergeFrom(from.trajectory_data());
      break;
    }
    case kImuData: {
      mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from.imu_data());
      break;
    }
    case kOdometryData: {
      mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from.odometry_data());
      break;
    }
    case kFixedFramePoseData: {
      mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
      break;
    }
    case kLandmarkData: {
      mutable_landmark_data()->::cartographer::mapping::proto::LandmarkData::MergeFrom(from.landmark_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void SerializedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedData::CopyFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedData::IsInitialized() const {

  return true;
}

void SerializedData::Swap(SerializedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedData::InternalSwap(SerializedData* other) {
  std::swap(data_, other->data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedData_descriptor_;
  metadata.reflection = SerializedData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedData

// optional .cartographer.mapping.proto.PoseGraph pose_graph = 1;
bool SerializedData::has_pose_graph() const {
  return data_case() == kPoseGraph;
}
void SerializedData::set_has_pose_graph() {
  _oneof_case_[0] = kPoseGraph;
}
void SerializedData::clear_pose_graph() {
  if (has_pose_graph()) {
    delete data_.pose_graph_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::PoseGraph& SerializedData::pose_graph() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.pose_graph)
  return has_pose_graph()
      ? *data_.pose_graph_
      : ::cartographer::mapping::proto::PoseGraph::default_instance();
}
::cartographer::mapping::proto::PoseGraph* SerializedData::mutable_pose_graph() {
  if (!has_pose_graph()) {
    clear_data();
    set_has_pose_graph();
    data_.pose_graph_ = new ::cartographer::mapping::proto::PoseGraph;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.pose_graph)
  return data_.pose_graph_;
}
::cartographer::mapping::proto::PoseGraph* SerializedData::release_pose_graph() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.pose_graph)
  if (has_pose_graph()) {
    clear_has_data();
    ::cartographer::mapping::proto::PoseGraph* temp = data_.pose_graph_;
    data_.pose_graph_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_pose_graph(::cartographer::mapping::proto::PoseGraph* pose_graph) {
  clear_data();
  if (pose_graph) {
    set_has_pose_graph();
    data_.pose_graph_ = pose_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.pose_graph)
}

// optional .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
bool SerializedData::has_all_trajectory_builder_options() const {
  return data_case() == kAllTrajectoryBuilderOptions;
}
void SerializedData::set_has_all_trajectory_builder_options() {
  _oneof_case_[0] = kAllTrajectoryBuilderOptions;
}
void SerializedData::clear_all_trajectory_builder_options() {
  if (has_all_trajectory_builder_options()) {
    delete data_.all_trajectory_builder_options_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::AllTrajectoryBuilderOptions& SerializedData::all_trajectory_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  return has_all_trajectory_builder_options()
      ? *data_.all_trajectory_builder_options_
      : ::cartographer::mapping::proto::AllTrajectoryBuilderOptions::default_instance();
}
::cartographer::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::mutable_all_trajectory_builder_options() {
  if (!has_all_trajectory_builder_options()) {
    clear_data();
    set_has_all_trajectory_builder_options();
    data_.all_trajectory_builder_options_ = new ::cartographer::mapping::proto::AllTrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  return data_.all_trajectory_builder_options_;
}
::cartographer::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::release_all_trajectory_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  if (has_all_trajectory_builder_options()) {
    clear_has_data();
    ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* temp = data_.all_trajectory_builder_options_;
    data_.all_trajectory_builder_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_all_trajectory_builder_options(::cartographer::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options) {
  clear_data();
  if (all_trajectory_builder_options) {
    set_has_all_trajectory_builder_options();
    data_.all_trajectory_builder_options_ = all_trajectory_builder_options;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
}

// optional .cartographer.mapping.proto.Submap submap = 3;
bool SerializedData::has_submap() const {
  return data_case() == kSubmap;
}
void SerializedData::set_has_submap() {
  _oneof_case_[0] = kSubmap;
}
void SerializedData::clear_submap() {
  if (has_submap()) {
    delete data_.submap_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::Submap& SerializedData::submap() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.submap)
  return has_submap()
      ? *data_.submap_
      : ::cartographer::mapping::proto::Submap::default_instance();
}
::cartographer::mapping::proto::Submap* SerializedData::mutable_submap() {
  if (!has_submap()) {
    clear_data();
    set_has_submap();
    data_.submap_ = new ::cartographer::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.submap)
  return data_.submap_;
}
::cartographer::mapping::proto::Submap* SerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.submap)
  if (has_submap()) {
    clear_has_data();
    ::cartographer::mapping::proto::Submap* temp = data_.submap_;
    data_.submap_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  clear_data();
  if (submap) {
    set_has_submap();
    data_.submap_ = submap;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}

// optional .cartographer.mapping.proto.Node node = 4;
bool SerializedData::has_node() const {
  return data_case() == kNode;
}
void SerializedData::set_has_node() {
  _oneof_case_[0] = kNode;
}
void SerializedData::clear_node() {
  if (has_node()) {
    delete data_.node_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::Node& SerializedData::node() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.node)
  return has_node()
      ? *data_.node_
      : ::cartographer::mapping::proto::Node::default_instance();
}
::cartographer::mapping::proto::Node* SerializedData::mutable_node() {
  if (!has_node()) {
    clear_data();
    set_has_node();
    data_.node_ = new ::cartographer::mapping::proto::Node;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.node)
  return data_.node_;
}
::cartographer::mapping::proto::Node* SerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.node)
  if (has_node()) {
    clear_has_data();
    ::cartographer::mapping::proto::Node* temp = data_.node_;
    data_.node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  clear_data();
  if (node) {
    set_has_node();
    data_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.node)
}

// optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
bool SerializedData::has_trajectory_data() const {
  return data_case() == kTrajectoryData;
}
void SerializedData::set_has_trajectory_data() {
  _oneof_case_[0] = kTrajectoryData;
}
void SerializedData::clear_trajectory_data() {
  if (has_trajectory_data()) {
    delete data_.trajectory_data_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::TrajectoryData& SerializedData::trajectory_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.trajectory_data)
  return has_trajectory_data()
      ? *data_.trajectory_data_
      : ::cartographer::mapping::proto::TrajectoryData::default_instance();
}
::cartographer::mapping::proto::TrajectoryData* SerializedData::mutable_trajectory_data() {
  if (!has_trajectory_data()) {
    clear_data();
    set_has_trajectory_data();
    data_.trajectory_data_ = new ::cartographer::mapping::proto::TrajectoryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.trajectory_data)
  return data_.trajectory_data_;
}
::cartographer::mapping::proto::TrajectoryData* SerializedData::release_trajectory_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.trajectory_data)
  if (has_trajectory_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::TrajectoryData* temp = data_.trajectory_data_;
    data_.trajectory_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data) {
  clear_data();
  if (trajectory_data) {
    set_has_trajectory_data();
    data_.trajectory_data_ = trajectory_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.trajectory_data)
}

// optional .cartographer.mapping.proto.ImuData imu_data = 6;
bool SerializedData::has_imu_data() const {
  return data_case() == kImuData;
}
void SerializedData::set_has_imu_data() {
  _oneof_case_[0] = kImuData;
}
void SerializedData::clear_imu_data() {
  if (has_imu_data()) {
    delete data_.imu_data_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::ImuData& SerializedData::imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.imu_data)
  return has_imu_data()
      ? *data_.imu_data_
      : ::cartographer::mapping::proto::ImuData::default_instance();
}
::cartographer::mapping::proto::ImuData* SerializedData::mutable_imu_data() {
  if (!has_imu_data()) {
    clear_data();
    set_has_imu_data();
    data_.imu_data_ = new ::cartographer::mapping::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.imu_data)
  return data_.imu_data_;
}
::cartographer::mapping::proto::ImuData* SerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.imu_data)
  if (has_imu_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::ImuData* temp = data_.imu_data_;
    data_.imu_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  clear_data();
  if (imu_data) {
    set_has_imu_data();
    data_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.imu_data)
}

// optional .cartographer.mapping.proto.OdometryData odometry_data = 7;
bool SerializedData::has_odometry_data() const {
  return data_case() == kOdometryData;
}
void SerializedData::set_has_odometry_data() {
  _oneof_case_[0] = kOdometryData;
}
void SerializedData::clear_odometry_data() {
  if (has_odometry_data()) {
    delete data_.odometry_data_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::OdometryData& SerializedData::odometry_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.odometry_data)
  return has_odometry_data()
      ? *data_.odometry_data_
      : ::cartographer::mapping::proto::OdometryData::default_instance();
}
::cartographer::mapping::proto::OdometryData* SerializedData::mutable_odometry_data() {
  if (!has_odometry_data()) {
    clear_data();
    set_has_odometry_data();
    data_.odometry_data_ = new ::cartographer::mapping::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.odometry_data)
  return data_.odometry_data_;
}
::cartographer::mapping::proto::OdometryData* SerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.odometry_data)
  if (has_odometry_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::OdometryData* temp = data_.odometry_data_;
    data_.odometry_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  clear_data();
  if (odometry_data) {
    set_has_odometry_data();
    data_.odometry_data_ = odometry_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.odometry_data)
}

// optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
bool SerializedData::has_fixed_frame_pose_data() const {
  return data_case() == kFixedFramePoseData;
}
void SerializedData::set_has_fixed_frame_pose_data() {
  _oneof_case_[0] = kFixedFramePoseData;
}
void SerializedData::clear_fixed_frame_pose_data() {
  if (has_fixed_frame_pose_data()) {
    delete data_.fixed_frame_pose_data_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::FixedFramePoseData& SerializedData::fixed_frame_pose_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return has_fixed_frame_pose_data()
      ? *data_.fixed_frame_pose_data_
      : ::cartographer::mapping::proto::FixedFramePoseData::default_instance();
}
::cartographer::mapping::proto::FixedFramePoseData* SerializedData::mutable_fixed_frame_pose_data() {
  if (!has_fixed_frame_pose_data()) {
    clear_data();
    set_has_fixed_frame_pose_data();
    data_.fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return data_.fixed_frame_pose_data_;
}
::cartographer::mapping::proto::FixedFramePoseData* SerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  if (has_fixed_frame_pose_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::FixedFramePoseData* temp = data_.fixed_frame_pose_data_;
    data_.fixed_frame_pose_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  clear_data();
  if (fixed_frame_pose_data) {
    set_has_fixed_frame_pose_data();
    data_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
}

// optional .cartographer.mapping.proto.LandmarkData landmark_data = 9;
bool SerializedData::has_landmark_data() const {
  return data_case() == kLandmarkData;
}
void SerializedData::set_has_landmark_data() {
  _oneof_case_[0] = kLandmarkData;
}
void SerializedData::clear_landmark_data() {
  if (has_landmark_data()) {
    delete data_.landmark_data_;
    clear_has_data();
  }
}
 const ::cartographer::mapping::proto::LandmarkData& SerializedData::landmark_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.landmark_data)
  return has_landmark_data()
      ? *data_.landmark_data_
      : ::cartographer::mapping::proto::LandmarkData::default_instance();
}
::cartographer::mapping::proto::LandmarkData* SerializedData::mutable_landmark_data() {
  if (!has_landmark_data()) {
    clear_data();
    set_has_landmark_data();
    data_.landmark_data_ = new ::cartographer::mapping::proto::LandmarkData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.landmark_data)
  return data_.landmark_data_;
}
::cartographer::mapping::proto::LandmarkData* SerializedData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.landmark_data)
  if (has_landmark_data()) {
    clear_has_data();
    ::cartographer::mapping::proto::LandmarkData* temp = data_.landmark_data_;
    data_.landmark_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerializedData::set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data) {
  clear_data();
  if (landmark_data) {
    set_has_landmark_data();
    data_.landmark_data_ = landmark_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.landmark_data)
}

bool SerializedData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void SerializedData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
SerializedData::DataCase SerializedData::data_case() const {
  return SerializedData::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
