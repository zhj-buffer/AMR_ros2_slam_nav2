// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* CeresScanMatcherOptions3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CeresScanMatcherOptions3D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto");
  GOOGLE_CHECK(file != NULL);
  CeresScanMatcherOptions3D_descriptor_ = file->message_type(0);
  static const int CeresScanMatcherOptions3D_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions3D, occupied_space_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions3D, translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions3D, rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions3D, only_optimize_yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions3D, ceres_solver_options_),
  };
  CeresScanMatcherOptions3D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CeresScanMatcherOptions3D_descriptor_,
      CeresScanMatcherOptions3D::default_instance_,
      CeresScanMatcherOptions3D_offsets_,
      -1,
      -1,
      -1,
      sizeof(CeresScanMatcherOptions3D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions3D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions3D, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CeresScanMatcherOptions3D_descriptor_, &CeresScanMatcherOptions3D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto() {
  delete CeresScanMatcherOptions3D::default_instance_;
  delete CeresScanMatcherOptions3D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::common::proto::protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nLcartographer/mapping/proto/scan_matchi"
    "ng/ceres_scan_matcher_options_3d.proto\022("
    "cartographer.mapping.scan_matching.proto"
    "\0324cartographer/common/proto/ceres_solver"
    "_options.proto\"\327\001\n\031CeresScanMatcherOptio"
    "ns3D\022\035\n\025occupied_space_weight\030\001 \003(\001\022\032\n\022t"
    "ranslation_weight\030\002 \001(\001\022\027\n\017rotation_weig"
    "ht\030\003 \001(\001\022\031\n\021only_optimize_yaw\030\005 \001(\010\022K\n\024c"
    "eres_solver_options\030\006 \001(\0132-.cartographer"
    ".common.proto.CeresSolverOptionsb\006proto3", 400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto", &protobuf_RegisterTypes);
  CeresScanMatcherOptions3D::default_instance_ = new CeresScanMatcherOptions3D();
  CeresScanMatcherOptions3D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CeresScanMatcherOptions3D::kOccupiedSpaceWeightFieldNumber;
const int CeresScanMatcherOptions3D::kTranslationWeightFieldNumber;
const int CeresScanMatcherOptions3D::kRotationWeightFieldNumber;
const int CeresScanMatcherOptions3D::kOnlyOptimizeYawFieldNumber;
const int CeresScanMatcherOptions3D::kCeresSolverOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CeresScanMatcherOptions3D::CeresScanMatcherOptions3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
}

void CeresScanMatcherOptions3D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ceres_solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(&::cartographer::common::proto::CeresSolverOptions::default_instance());
}

CeresScanMatcherOptions3D::CeresScanMatcherOptions3D(const CeresScanMatcherOptions3D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
}

void CeresScanMatcherOptions3D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  translation_weight_ = 0;
  rotation_weight_ = 0;
  only_optimize_yaw_ = false;
  ceres_solver_options_ = NULL;
}

CeresScanMatcherOptions3D::~CeresScanMatcherOptions3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  SharedDtor();
}

void CeresScanMatcherOptions3D::SharedDtor() {
  if (this != default_instance_) {
    delete ceres_solver_options_;
  }
}

void CeresScanMatcherOptions3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CeresScanMatcherOptions3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CeresScanMatcherOptions3D_descriptor_;
}

const CeresScanMatcherOptions3D& CeresScanMatcherOptions3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
  return *default_instance_;
}

CeresScanMatcherOptions3D* CeresScanMatcherOptions3D::default_instance_ = NULL;

CeresScanMatcherOptions3D* CeresScanMatcherOptions3D::New(::google::protobuf::Arena* arena) const {
  CeresScanMatcherOptions3D* n = new CeresScanMatcherOptions3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CeresScanMatcherOptions3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CeresScanMatcherOptions3D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CeresScanMatcherOptions3D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(translation_weight_, rotation_weight_);
  only_optimize_yaw_ = false;
  if (GetArenaNoVirtual() == NULL && ceres_solver_options_ != NULL) delete ceres_solver_options_;
  ceres_solver_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  occupied_space_weight_.Clear();
}

bool CeresScanMatcherOptions3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double occupied_space_weight = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_occupied_space_weight())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_occupied_space_weight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_translation_weight;
        break;
      }

      // optional double translation_weight = 2;
      case 2: {
        if (tag == 17) {
         parse_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_rotation_weight;
        break;
      }

      // optional double rotation_weight = 3;
      case 3: {
        if (tag == 25) {
         parse_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_only_optimize_yaw;
        break;
      }

      // optional bool only_optimize_yaw = 5;
      case 5: {
        if (tag == 40) {
         parse_only_optimize_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_optimize_yaw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ceres_solver_options;
        break;
      }

      // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
      case 6: {
        if (tag == 50) {
         parse_ceres_solver_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_solver_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  return false;
#undef DO_
}

void CeresScanMatcherOptions3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  // repeated double occupied_space_weight = 1;
  if (this->occupied_space_weight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_occupied_space_weight_cached_byte_size_);
  }
  for (int i = 0; i < this->occupied_space_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->occupied_space_weight(i), output);
  }

  // optional double translation_weight = 2;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->translation_weight(), output);
  }

  // optional double rotation_weight = 3;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rotation_weight(), output);
  }

  // optional bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->only_optimize_yaw(), output);
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ceres_solver_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
}

::google::protobuf::uint8* CeresScanMatcherOptions3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  // repeated double occupied_space_weight = 1;
  if (this->occupied_space_weight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _occupied_space_weight_cached_byte_size_, target);
  }
  for (int i = 0; i < this->occupied_space_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->occupied_space_weight(i), target);
  }

  // optional double translation_weight = 2;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->translation_weight(), target);
  }

  // optional double rotation_weight = 3;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rotation_weight(), target);
  }

  // optional bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->only_optimize_yaw(), target);
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ceres_solver_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  return target;
}

int CeresScanMatcherOptions3D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  int total_size = 0;

  // optional double translation_weight = 2;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double rotation_weight = 3;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    total_size += 1 + 1;
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ceres_solver_options_);
  }

  // repeated double occupied_space_weight = 1;
  {
    int data_size = 0;
    data_size = 8 * this->occupied_space_weight_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _occupied_space_weight_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CeresScanMatcherOptions3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CeresScanMatcherOptions3D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CeresScanMatcherOptions3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
    MergeFrom(*source);
  }
}

void CeresScanMatcherOptions3D::MergeFrom(const CeresScanMatcherOptions3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  occupied_space_weight_.MergeFrom(from.occupied_space_weight_);
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
  if (from.only_optimize_yaw() != 0) {
    set_only_optimize_yaw(from.only_optimize_yaw());
  }
  if (from.has_ceres_solver_options()) {
    mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from.ceres_solver_options());
  }
}

void CeresScanMatcherOptions3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CeresScanMatcherOptions3D::CopyFrom(const CeresScanMatcherOptions3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CeresScanMatcherOptions3D::IsInitialized() const {

  return true;
}

void CeresScanMatcherOptions3D::Swap(CeresScanMatcherOptions3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CeresScanMatcherOptions3D::InternalSwap(CeresScanMatcherOptions3D* other) {
  occupied_space_weight_.UnsafeArenaSwap(&other->occupied_space_weight_);
  std::swap(translation_weight_, other->translation_weight_);
  std::swap(rotation_weight_, other->rotation_weight_);
  std::swap(only_optimize_yaw_, other->only_optimize_yaw_);
  std::swap(ceres_solver_options_, other->ceres_solver_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CeresScanMatcherOptions3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CeresScanMatcherOptions3D_descriptor_;
  metadata.reflection = CeresScanMatcherOptions3D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CeresScanMatcherOptions3D

// repeated double occupied_space_weight = 1;
int CeresScanMatcherOptions3D::occupied_space_weight_size() const {
  return occupied_space_weight_.size();
}
void CeresScanMatcherOptions3D::clear_occupied_space_weight() {
  occupied_space_weight_.Clear();
}
 double CeresScanMatcherOptions3D::occupied_space_weight(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return occupied_space_weight_.Get(index);
}
 void CeresScanMatcherOptions3D::set_occupied_space_weight(int index, double value) {
  occupied_space_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
}
 void CeresScanMatcherOptions3D::add_occupied_space_weight(double value) {
  occupied_space_weight_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
}
 const ::google::protobuf::RepeatedField< double >&
CeresScanMatcherOptions3D::occupied_space_weight() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return occupied_space_weight_;
}
 ::google::protobuf::RepeatedField< double >*
CeresScanMatcherOptions3D::mutable_occupied_space_weight() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return &occupied_space_weight_;
}

// optional double translation_weight = 2;
void CeresScanMatcherOptions3D::clear_translation_weight() {
  translation_weight_ = 0;
}
 double CeresScanMatcherOptions3D::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.translation_weight)
  return translation_weight_;
}
 void CeresScanMatcherOptions3D::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.translation_weight)
}

// optional double rotation_weight = 3;
void CeresScanMatcherOptions3D::clear_rotation_weight() {
  rotation_weight_ = 0;
}
 double CeresScanMatcherOptions3D::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.rotation_weight)
  return rotation_weight_;
}
 void CeresScanMatcherOptions3D::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.rotation_weight)
}

// optional bool only_optimize_yaw = 5;
void CeresScanMatcherOptions3D::clear_only_optimize_yaw() {
  only_optimize_yaw_ = false;
}
 bool CeresScanMatcherOptions3D::only_optimize_yaw() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.only_optimize_yaw)
  return only_optimize_yaw_;
}
 void CeresScanMatcherOptions3D::set_only_optimize_yaw(bool value) {
  
  only_optimize_yaw_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.only_optimize_yaw)
}

// optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
bool CeresScanMatcherOptions3D::has_ceres_solver_options() const {
  return !_is_default_instance_ && ceres_solver_options_ != NULL;
}
void CeresScanMatcherOptions3D::clear_ceres_solver_options() {
  if (GetArenaNoVirtual() == NULL && ceres_solver_options_ != NULL) delete ceres_solver_options_;
  ceres_solver_options_ = NULL;
}
const ::cartographer::common::proto::CeresSolverOptions& CeresScanMatcherOptions3D::ceres_solver_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  return ceres_solver_options_ != NULL ? *ceres_solver_options_ : *default_instance_->ceres_solver_options_;
}
::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::mutable_ceres_solver_options() {
  
  if (ceres_solver_options_ == NULL) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  return ceres_solver_options_;
}
::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::release_ceres_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = ceres_solver_options_;
  ceres_solver_options_ = NULL;
  return temp;
}
void CeresScanMatcherOptions3D::set_allocated_ceres_solver_options(::cartographer::common::proto::CeresSolverOptions* ceres_solver_options) {
  delete ceres_solver_options_;
  ceres_solver_options_ = ceres_solver_options;
  if (ceres_solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
