// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RealTimeCorrelativeScanMatcherOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealTimeCorrelativeScanMatcherOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.proto");
  GOOGLE_CHECK(file != NULL);
  RealTimeCorrelativeScanMatcherOptions_descriptor_ = file->message_type(0);
  static const int RealTimeCorrelativeScanMatcherOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCorrelativeScanMatcherOptions, linear_search_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCorrelativeScanMatcherOptions, angular_search_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCorrelativeScanMatcherOptions, translation_delta_cost_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCorrelativeScanMatcherOptions, rotation_delta_cost_weight_),
  };
  RealTimeCorrelativeScanMatcherOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RealTimeCorrelativeScanMatcherOptions_descriptor_,
      RealTimeCorrelativeScanMatcherOptions::default_instance_,
      RealTimeCorrelativeScanMatcherOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(RealTimeCorrelativeScanMatcherOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCorrelativeScanMatcherOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeCorrelativeScanMatcherOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RealTimeCorrelativeScanMatcherOptions_descriptor_, &RealTimeCorrelativeScanMatcherOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto() {
  delete RealTimeCorrelativeScanMatcherOptions::default_instance_;
  delete RealTimeCorrelativeScanMatcherOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nYcartographer/mapping/proto/scan_matchi"
    "ng/real_time_correlative_scan_matcher_op"
    "tions.proto\022(cartographer.mapping.scan_m"
    "atching.proto\"\257\001\n%RealTimeCorrelativeSca"
    "nMatcherOptions\022\034\n\024linear_search_window\030"
    "\001 \001(\001\022\035\n\025angular_search_window\030\002 \001(\001\022%\n\035"
    "translation_delta_cost_weight\030\003 \001(\001\022\"\n\032r"
    "otation_delta_cost_weight\030\004 \001(\001b\006proto3", 319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/scan_matching/real_time_correlative_scan_matcher_options.proto", &protobuf_RegisterTypes);
  RealTimeCorrelativeScanMatcherOptions::default_instance_ = new RealTimeCorrelativeScanMatcherOptions();
  RealTimeCorrelativeScanMatcherOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealTimeCorrelativeScanMatcherOptions::kLinearSearchWindowFieldNumber;
const int RealTimeCorrelativeScanMatcherOptions::kAngularSearchWindowFieldNumber;
const int RealTimeCorrelativeScanMatcherOptions::kTranslationDeltaCostWeightFieldNumber;
const int RealTimeCorrelativeScanMatcherOptions::kRotationDeltaCostWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealTimeCorrelativeScanMatcherOptions::RealTimeCorrelativeScanMatcherOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
}

void RealTimeCorrelativeScanMatcherOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RealTimeCorrelativeScanMatcherOptions::RealTimeCorrelativeScanMatcherOptions(const RealTimeCorrelativeScanMatcherOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
}

void RealTimeCorrelativeScanMatcherOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  linear_search_window_ = 0;
  angular_search_window_ = 0;
  translation_delta_cost_weight_ = 0;
  rotation_delta_cost_weight_ = 0;
}

RealTimeCorrelativeScanMatcherOptions::~RealTimeCorrelativeScanMatcherOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  SharedDtor();
}

void RealTimeCorrelativeScanMatcherOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealTimeCorrelativeScanMatcherOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeCorrelativeScanMatcherOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealTimeCorrelativeScanMatcherOptions_descriptor_;
}

const RealTimeCorrelativeScanMatcherOptions& RealTimeCorrelativeScanMatcherOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto();
  return *default_instance_;
}

RealTimeCorrelativeScanMatcherOptions* RealTimeCorrelativeScanMatcherOptions::default_instance_ = NULL;

RealTimeCorrelativeScanMatcherOptions* RealTimeCorrelativeScanMatcherOptions::New(::google::protobuf::Arena* arena) const {
  RealTimeCorrelativeScanMatcherOptions* n = new RealTimeCorrelativeScanMatcherOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealTimeCorrelativeScanMatcherOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RealTimeCorrelativeScanMatcherOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RealTimeCorrelativeScanMatcherOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(linear_search_window_, rotation_delta_cost_weight_);

#undef ZR_HELPER_
#undef ZR_

}

bool RealTimeCorrelativeScanMatcherOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double linear_search_window = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_search_window_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_angular_search_window;
        break;
      }

      // optional double angular_search_window = 2;
      case 2: {
        if (tag == 17) {
         parse_angular_search_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_search_window_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_translation_delta_cost_weight;
        break;
      }

      // optional double translation_delta_cost_weight = 3;
      case 3: {
        if (tag == 25) {
         parse_translation_delta_cost_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_delta_cost_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rotation_delta_cost_weight;
        break;
      }

      // optional double rotation_delta_cost_weight = 4;
      case 4: {
        if (tag == 33) {
         parse_rotation_delta_cost_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_delta_cost_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  return false;
#undef DO_
}

void RealTimeCorrelativeScanMatcherOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  // optional double linear_search_window = 1;
  if (this->linear_search_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->linear_search_window(), output);
  }

  // optional double angular_search_window = 2;
  if (this->angular_search_window() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->angular_search_window(), output);
  }

  // optional double translation_delta_cost_weight = 3;
  if (this->translation_delta_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->translation_delta_cost_weight(), output);
  }

  // optional double rotation_delta_cost_weight = 4;
  if (this->rotation_delta_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rotation_delta_cost_weight(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
}

::google::protobuf::uint8* RealTimeCorrelativeScanMatcherOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  // optional double linear_search_window = 1;
  if (this->linear_search_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->linear_search_window(), target);
  }

  // optional double angular_search_window = 2;
  if (this->angular_search_window() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->angular_search_window(), target);
  }

  // optional double translation_delta_cost_weight = 3;
  if (this->translation_delta_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->translation_delta_cost_weight(), target);
  }

  // optional double rotation_delta_cost_weight = 4;
  if (this->rotation_delta_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rotation_delta_cost_weight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  return target;
}

int RealTimeCorrelativeScanMatcherOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  int total_size = 0;

  // optional double linear_search_window = 1;
  if (this->linear_search_window() != 0) {
    total_size += 1 + 8;
  }

  // optional double angular_search_window = 2;
  if (this->angular_search_window() != 0) {
    total_size += 1 + 8;
  }

  // optional double translation_delta_cost_weight = 3;
  if (this->translation_delta_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double rotation_delta_cost_weight = 4;
  if (this->rotation_delta_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeCorrelativeScanMatcherOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RealTimeCorrelativeScanMatcherOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RealTimeCorrelativeScanMatcherOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
    MergeFrom(*source);
  }
}

void RealTimeCorrelativeScanMatcherOptions::MergeFrom(const RealTimeCorrelativeScanMatcherOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.linear_search_window() != 0) {
    set_linear_search_window(from.linear_search_window());
  }
  if (from.angular_search_window() != 0) {
    set_angular_search_window(from.angular_search_window());
  }
  if (from.translation_delta_cost_weight() != 0) {
    set_translation_delta_cost_weight(from.translation_delta_cost_weight());
  }
  if (from.rotation_delta_cost_weight() != 0) {
    set_rotation_delta_cost_weight(from.rotation_delta_cost_weight());
  }
}

void RealTimeCorrelativeScanMatcherOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeCorrelativeScanMatcherOptions::CopyFrom(const RealTimeCorrelativeScanMatcherOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeCorrelativeScanMatcherOptions::IsInitialized() const {

  return true;
}

void RealTimeCorrelativeScanMatcherOptions::Swap(RealTimeCorrelativeScanMatcherOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealTimeCorrelativeScanMatcherOptions::InternalSwap(RealTimeCorrelativeScanMatcherOptions* other) {
  std::swap(linear_search_window_, other->linear_search_window_);
  std::swap(angular_search_window_, other->angular_search_window_);
  std::swap(translation_delta_cost_weight_, other->translation_delta_cost_weight_);
  std::swap(rotation_delta_cost_weight_, other->rotation_delta_cost_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealTimeCorrelativeScanMatcherOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealTimeCorrelativeScanMatcherOptions_descriptor_;
  metadata.reflection = RealTimeCorrelativeScanMatcherOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealTimeCorrelativeScanMatcherOptions

// optional double linear_search_window = 1;
void RealTimeCorrelativeScanMatcherOptions::clear_linear_search_window() {
  linear_search_window_ = 0;
}
 double RealTimeCorrelativeScanMatcherOptions::linear_search_window() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.linear_search_window)
  return linear_search_window_;
}
 void RealTimeCorrelativeScanMatcherOptions::set_linear_search_window(double value) {
  
  linear_search_window_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.linear_search_window)
}

// optional double angular_search_window = 2;
void RealTimeCorrelativeScanMatcherOptions::clear_angular_search_window() {
  angular_search_window_ = 0;
}
 double RealTimeCorrelativeScanMatcherOptions::angular_search_window() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.angular_search_window)
  return angular_search_window_;
}
 void RealTimeCorrelativeScanMatcherOptions::set_angular_search_window(double value) {
  
  angular_search_window_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.angular_search_window)
}

// optional double translation_delta_cost_weight = 3;
void RealTimeCorrelativeScanMatcherOptions::clear_translation_delta_cost_weight() {
  translation_delta_cost_weight_ = 0;
}
 double RealTimeCorrelativeScanMatcherOptions::translation_delta_cost_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.translation_delta_cost_weight)
  return translation_delta_cost_weight_;
}
 void RealTimeCorrelativeScanMatcherOptions::set_translation_delta_cost_weight(double value) {
  
  translation_delta_cost_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.translation_delta_cost_weight)
}

// optional double rotation_delta_cost_weight = 4;
void RealTimeCorrelativeScanMatcherOptions::clear_rotation_delta_cost_weight() {
  rotation_delta_cost_weight_ = 0;
}
 double RealTimeCorrelativeScanMatcherOptions::rotation_delta_cost_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.rotation_delta_cost_weight)
  return rotation_delta_cost_weight_;
}
 void RealTimeCorrelativeScanMatcherOptions::set_rotation_delta_cost_weight(double value) {
  
  rotation_delta_cost_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions.rotation_delta_cost_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
