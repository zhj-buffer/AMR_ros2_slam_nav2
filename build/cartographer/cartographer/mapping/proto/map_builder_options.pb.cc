// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/map_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MapBuilderOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapBuilderOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/map_builder_options.proto");
  GOOGLE_CHECK(file != NULL);
  MapBuilderOptions_descriptor_ = file->message_type(0);
  static const int MapBuilderOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBuilderOptions, use_trajectory_builder_2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBuilderOptions, use_trajectory_builder_3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBuilderOptions, num_background_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBuilderOptions, pose_graph_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBuilderOptions, collate_by_trajectory_),
  };
  MapBuilderOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapBuilderOptions_descriptor_,
      MapBuilderOptions::default_instance_,
      MapBuilderOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapBuilderOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBuilderOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBuilderOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapBuilderOptions_descriptor_, &MapBuilderOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto() {
  delete MapBuilderOptions::default_instance_;
  delete MapBuilderOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n4cartographer/mapping/proto/map_builder"
    "_options.proto\022\032cartographer.mapping.pro"
    "to\0323cartographer/mapping/proto/pose_grap"
    "h_options.proto\"\342\001\n\021MapBuilderOptions\022!\n"
    "\031use_trajectory_builder_2d\030\001 \001(\010\022!\n\031use_"
    "trajectory_builder_3d\030\002 \001(\010\022\036\n\026num_backg"
    "round_threads\030\003 \001(\005\022H\n\022pose_graph_option"
    "s\030\004 \001(\0132,.cartographer.mapping.proto.Pos"
    "eGraphOptions\022\035\n\025collate_by_trajectory\030\005"
    " \001(\010b\006proto3", 372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/map_builder_options.proto", &protobuf_RegisterTypes);
  MapBuilderOptions::default_instance_ = new MapBuilderOptions();
  MapBuilderOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBuilderOptions::kUseTrajectoryBuilder2DFieldNumber;
const int MapBuilderOptions::kUseTrajectoryBuilder3DFieldNumber;
const int MapBuilderOptions::kNumBackgroundThreadsFieldNumber;
const int MapBuilderOptions::kPoseGraphOptionsFieldNumber;
const int MapBuilderOptions::kCollateByTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBuilderOptions::MapBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.MapBuilderOptions)
}

void MapBuilderOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_graph_options_ = const_cast< ::cartographer::mapping::proto::PoseGraphOptions*>(&::cartographer::mapping::proto::PoseGraphOptions::default_instance());
}

MapBuilderOptions::MapBuilderOptions(const MapBuilderOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MapBuilderOptions)
}

void MapBuilderOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  use_trajectory_builder_2d_ = false;
  use_trajectory_builder_3d_ = false;
  num_background_threads_ = 0;
  pose_graph_options_ = NULL;
  collate_by_trajectory_ = false;
}

MapBuilderOptions::~MapBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MapBuilderOptions)
  SharedDtor();
}

void MapBuilderOptions::SharedDtor() {
  if (this != default_instance_) {
    delete pose_graph_options_;
  }
}

void MapBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapBuilderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapBuilderOptions_descriptor_;
}

const MapBuilderOptions& MapBuilderOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

MapBuilderOptions* MapBuilderOptions::default_instance_ = NULL;

MapBuilderOptions* MapBuilderOptions::New(::google::protobuf::Arena* arena) const {
  MapBuilderOptions* n = new MapBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MapBuilderOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MapBuilderOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MapBuilderOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(use_trajectory_builder_2d_, num_background_threads_);
  if (GetArenaNoVirtual() == NULL && pose_graph_options_ != NULL) delete pose_graph_options_;
  pose_graph_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MapBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.MapBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_trajectory_builder_2d = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_trajectory_builder_2d_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_trajectory_builder_3d;
        break;
      }

      // optional bool use_trajectory_builder_3d = 2;
      case 2: {
        if (tag == 16) {
         parse_use_trajectory_builder_3d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_trajectory_builder_3d_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_background_threads;
        break;
      }

      // optional int32 num_background_threads = 3;
      case 3: {
        if (tag == 24) {
         parse_num_background_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_background_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pose_graph_options;
        break;
      }

      // optional .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
      case 4: {
        if (tag == 34) {
         parse_pose_graph_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_graph_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_collate_by_trajectory;
        break;
      }

      // optional bool collate_by_trajectory = 5;
      case 5: {
        if (tag == 40) {
         parse_collate_by_trajectory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_by_trajectory_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.MapBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.MapBuilderOptions)
  return false;
#undef DO_
}

void MapBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.MapBuilderOptions)
  // optional bool use_trajectory_builder_2d = 1;
  if (this->use_trajectory_builder_2d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_trajectory_builder_2d(), output);
  }

  // optional bool use_trajectory_builder_3d = 2;
  if (this->use_trajectory_builder_3d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_trajectory_builder_3d(), output);
  }

  // optional int32 num_background_threads = 3;
  if (this->num_background_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_background_threads(), output);
  }

  // optional .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  if (this->has_pose_graph_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pose_graph_options_, output);
  }

  // optional bool collate_by_trajectory = 5;
  if (this->collate_by_trajectory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->collate_by_trajectory(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.MapBuilderOptions)
}

::google::protobuf::uint8* MapBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MapBuilderOptions)
  // optional bool use_trajectory_builder_2d = 1;
  if (this->use_trajectory_builder_2d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_trajectory_builder_2d(), target);
  }

  // optional bool use_trajectory_builder_3d = 2;
  if (this->use_trajectory_builder_3d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_trajectory_builder_3d(), target);
  }

  // optional int32 num_background_threads = 3;
  if (this->num_background_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_background_threads(), target);
  }

  // optional .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  if (this->has_pose_graph_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pose_graph_options_, false, target);
  }

  // optional bool collate_by_trajectory = 5;
  if (this->collate_by_trajectory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->collate_by_trajectory(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MapBuilderOptions)
  return target;
}

int MapBuilderOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MapBuilderOptions)
  int total_size = 0;

  // optional bool use_trajectory_builder_2d = 1;
  if (this->use_trajectory_builder_2d() != 0) {
    total_size += 1 + 1;
  }

  // optional bool use_trajectory_builder_3d = 2;
  if (this->use_trajectory_builder_3d() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 num_background_threads = 3;
  if (this->num_background_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_background_threads());
  }

  // optional .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  if (this->has_pose_graph_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_graph_options_);
  }

  // optional bool collate_by_trajectory = 5;
  if (this->collate_by_trajectory() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.MapBuilderOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapBuilderOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.MapBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.MapBuilderOptions)
    MergeFrom(*source);
  }
}

void MapBuilderOptions::MergeFrom(const MapBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MapBuilderOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.use_trajectory_builder_2d() != 0) {
    set_use_trajectory_builder_2d(from.use_trajectory_builder_2d());
  }
  if (from.use_trajectory_builder_3d() != 0) {
    set_use_trajectory_builder_3d(from.use_trajectory_builder_3d());
  }
  if (from.num_background_threads() != 0) {
    set_num_background_threads(from.num_background_threads());
  }
  if (from.has_pose_graph_options()) {
    mutable_pose_graph_options()->::cartographer::mapping::proto::PoseGraphOptions::MergeFrom(from.pose_graph_options());
  }
  if (from.collate_by_trajectory() != 0) {
    set_collate_by_trajectory(from.collate_by_trajectory());
  }
}

void MapBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.MapBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBuilderOptions::CopyFrom(const MapBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MapBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBuilderOptions::IsInitialized() const {

  return true;
}

void MapBuilderOptions::Swap(MapBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBuilderOptions::InternalSwap(MapBuilderOptions* other) {
  std::swap(use_trajectory_builder_2d_, other->use_trajectory_builder_2d_);
  std::swap(use_trajectory_builder_3d_, other->use_trajectory_builder_3d_);
  std::swap(num_background_threads_, other->num_background_threads_);
  std::swap(pose_graph_options_, other->pose_graph_options_);
  std::swap(collate_by_trajectory_, other->collate_by_trajectory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapBuilderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapBuilderOptions_descriptor_;
  metadata.reflection = MapBuilderOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapBuilderOptions

// optional bool use_trajectory_builder_2d = 1;
void MapBuilderOptions::clear_use_trajectory_builder_2d() {
  use_trajectory_builder_2d_ = false;
}
 bool MapBuilderOptions::use_trajectory_builder_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_2d)
  return use_trajectory_builder_2d_;
}
 void MapBuilderOptions::set_use_trajectory_builder_2d(bool value) {
  
  use_trajectory_builder_2d_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_2d)
}

// optional bool use_trajectory_builder_3d = 2;
void MapBuilderOptions::clear_use_trajectory_builder_3d() {
  use_trajectory_builder_3d_ = false;
}
 bool MapBuilderOptions::use_trajectory_builder_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_3d)
  return use_trajectory_builder_3d_;
}
 void MapBuilderOptions::set_use_trajectory_builder_3d(bool value) {
  
  use_trajectory_builder_3d_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_3d)
}

// optional int32 num_background_threads = 3;
void MapBuilderOptions::clear_num_background_threads() {
  num_background_threads_ = 0;
}
 ::google::protobuf::int32 MapBuilderOptions::num_background_threads() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.num_background_threads)
  return num_background_threads_;
}
 void MapBuilderOptions::set_num_background_threads(::google::protobuf::int32 value) {
  
  num_background_threads_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.num_background_threads)
}

// optional .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
bool MapBuilderOptions::has_pose_graph_options() const {
  return !_is_default_instance_ && pose_graph_options_ != NULL;
}
void MapBuilderOptions::clear_pose_graph_options() {
  if (GetArenaNoVirtual() == NULL && pose_graph_options_ != NULL) delete pose_graph_options_;
  pose_graph_options_ = NULL;
}
const ::cartographer::mapping::proto::PoseGraphOptions& MapBuilderOptions::pose_graph_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  return pose_graph_options_ != NULL ? *pose_graph_options_ : *default_instance_->pose_graph_options_;
}
::cartographer::mapping::proto::PoseGraphOptions* MapBuilderOptions::mutable_pose_graph_options() {
  
  if (pose_graph_options_ == NULL) {
    pose_graph_options_ = new ::cartographer::mapping::proto::PoseGraphOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  return pose_graph_options_;
}
::cartographer::mapping::proto::PoseGraphOptions* MapBuilderOptions::release_pose_graph_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  
  ::cartographer::mapping::proto::PoseGraphOptions* temp = pose_graph_options_;
  pose_graph_options_ = NULL;
  return temp;
}
void MapBuilderOptions::set_allocated_pose_graph_options(::cartographer::mapping::proto::PoseGraphOptions* pose_graph_options) {
  delete pose_graph_options_;
  pose_graph_options_ = pose_graph_options;
  if (pose_graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
}

// optional bool collate_by_trajectory = 5;
void MapBuilderOptions::clear_collate_by_trajectory() {
  collate_by_trajectory_ = false;
}
 bool MapBuilderOptions::collate_by_trajectory() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.collate_by_trajectory)
  return collate_by_trajectory_;
}
 void MapBuilderOptions::set_collate_by_trajectory(bool value) {
  
  collate_by_trajectory_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.collate_by_trajectory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
