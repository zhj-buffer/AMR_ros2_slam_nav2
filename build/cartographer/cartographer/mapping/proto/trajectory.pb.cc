// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_Submap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_Submap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/trajectory.proto");
  GOOGLE_CHECK(file != NULL);
  Trajectory_descriptor_ = file->message_type(0);
  static const int Trajectory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, submap_),
  };
  Trajectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trajectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _is_default_instance_));
  Trajectory_Node_descriptor_ = Trajectory_descriptor_->nested_type(0);
  static const int Trajectory_Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, pose_),
  };
  Trajectory_Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectory_Node_descriptor_,
      Trajectory_Node::default_instance_,
      Trajectory_Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trajectory_Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, _is_default_instance_));
  Trajectory_Submap_descriptor_ = Trajectory_descriptor_->nested_type(1);
  static const int Trajectory_Submap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, submap_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, pose_),
  };
  Trajectory_Submap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trajectory_Submap_descriptor_,
      Trajectory_Submap::default_instance_,
      Trajectory_Submap_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trajectory_Submap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectory_Node_descriptor_, &Trajectory_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trajectory_Submap_descriptor_, &Trajectory_Submap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete Trajectory_Node::default_instance_;
  delete Trajectory_Node_reflection_;
  delete Trajectory_Submap::default_instance_;
  delete Trajectory_Submap_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+cartographer/mapping/proto/trajectory."
    "proto\022\032cartographer.mapping.proto\032,carto"
    "grapher/transform/proto/transform.proto\""
    "\326\002\n\nTrajectory\022\025\n\rtrajectory_id\030\003 \001(\005\0229\n"
    "\004node\030\001 \003(\0132+.cartographer.mapping.proto"
    ".Trajectory.Node\022=\n\006submap\030\002 \003(\0132-.carto"
    "grapher.mapping.proto.Trajectory.Submap\032"
    "b\n\004Node\022\022\n\nnode_index\030\007 \001(\005\022\021\n\ttimestamp"
    "\030\001 \001(\003\0223\n\004pose\030\005 \001(\0132%.cartographer.tran"
    "sform.proto.Rigid3d\032S\n\006Submap\022\024\n\014submap_"
    "index\030\002 \001(\005\0223\n\004pose\030\001 \001(\0132%.cartographer"
    ".transform.proto.Rigid3dB\026B\024TrajectoryOu"
    "terClassb\006proto3", 496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory.proto", &protobuf_RegisterTypes);
  Trajectory::default_instance_ = new Trajectory();
  Trajectory_Node::default_instance_ = new Trajectory_Node();
  Trajectory_Submap::default_instance_ = new Trajectory_Submap();
  Trajectory::default_instance_->InitAsDefaultInstance();
  Trajectory_Node::default_instance_->InitAsDefaultInstance();
  Trajectory_Submap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2ftrajectory_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory_Node::kNodeIndexFieldNumber;
const int Trajectory_Node::kTimestampFieldNumber;
const int Trajectory_Node::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory_Node::Trajectory_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory.Node)
}

void Trajectory_Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

Trajectory_Node::Trajectory_Node(const Trajectory_Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Node)
}

void Trajectory_Node::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_index_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  pose_ = NULL;
}

Trajectory_Node::~Trajectory_Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Node)
  SharedDtor();
}

void Trajectory_Node::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Trajectory_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_Node_descriptor_;
}

const Trajectory_Node& Trajectory_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory_Node* Trajectory_Node::default_instance_ = NULL;

Trajectory_Node* Trajectory_Node::New(::google::protobuf::Arena* arena) const {
  Trajectory_Node* n = new Trajectory_Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Node)
  node_index_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}

bool Trajectory_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Trajectory.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 5;
      case 5: {
        if (tag == 42) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_node_index;
        break;
      }

      // optional int32 node_index = 7;
      case 7: {
        if (tag == 56) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Trajectory.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Trajectory.Node)
  return false;
#undef DO_
}

void Trajectory_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Trajectory.Node)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pose_, output);
  }

  // optional int32 node_index = 7;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->node_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Trajectory.Node)
}

::google::protobuf::uint8* Trajectory_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Node)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->pose_, false, target);
  }

  // optional int32 node_index = 7;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->node_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Node)
  return target;
}

int Trajectory_Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Node)
  int total_size = 0;

  // optional int32 node_index = 7;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Trajectory_Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory.Node)
    MergeFrom(*source);
  }
}

void Trajectory_Node::MergeFrom(const Trajectory_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
}

void Trajectory_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Node::CopyFrom(const Trajectory_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Node::IsInitialized() const {

  return true;
}

void Trajectory_Node::Swap(Trajectory_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory_Node::InternalSwap(Trajectory_Node* other) {
  std::swap(node_index_, other->node_index_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(pose_, other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_Node_descriptor_;
  metadata.reflection = Trajectory_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory_Submap::kSubmapIndexFieldNumber;
const int Trajectory_Submap::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory_Submap::Trajectory_Submap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory.Submap)
}

void Trajectory_Submap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

Trajectory_Submap::Trajectory_Submap(const Trajectory_Submap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Submap)
}

void Trajectory_Submap::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  submap_index_ = 0;
  pose_ = NULL;
}

Trajectory_Submap::~Trajectory_Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Submap)
  SharedDtor();
}

void Trajectory_Submap::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void Trajectory_Submap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory_Submap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_Submap_descriptor_;
}

const Trajectory_Submap& Trajectory_Submap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory_Submap* Trajectory_Submap::default_instance_ = NULL;

Trajectory_Submap* Trajectory_Submap::New(::google::protobuf::Arena* arena) const {
  Trajectory_Submap* n = new Trajectory_Submap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory_Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Submap)
  submap_index_ = 0;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}

bool Trajectory_Submap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Trajectory.Submap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Rigid3d pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_submap_index;
        break;
      }

      // optional int32 submap_index = 2;
      case 2: {
        if (tag == 16) {
         parse_submap_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Trajectory.Submap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Trajectory.Submap)
  return false;
#undef DO_
}

void Trajectory_Submap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Trajectory.Submap)
  // optional .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // optional int32 submap_index = 2;
  if (this->submap_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Trajectory.Submap)
}

::google::protobuf::uint8* Trajectory_Submap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Submap)
  // optional .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, false, target);
  }

  // optional int32 submap_index = 2;
  if (this->submap_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Submap)
  return target;
}

int Trajectory_Submap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Submap)
  int total_size = 0;

  // optional int32 submap_index = 2;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_index());
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory_Submap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Trajectory_Submap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory_Submap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory.Submap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory.Submap)
    MergeFrom(*source);
  }
}

void Trajectory_Submap::MergeFrom(const Trajectory_Submap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.submap_index() != 0) {
    set_submap_index(from.submap_index());
  }
  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
}

void Trajectory_Submap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Submap::CopyFrom(const Trajectory_Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Submap::IsInitialized() const {

  return true;
}

void Trajectory_Submap::Swap(Trajectory_Submap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory_Submap::InternalSwap(Trajectory_Submap* other) {
  std::swap(submap_index_, other->submap_index_);
  std::swap(pose_, other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory_Submap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_Submap_descriptor_;
  metadata.reflection = Trajectory_Submap_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kTrajectoryIdFieldNumber;
const int Trajectory::kNodeFieldNumber;
const int Trajectory::kSubmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory)
}

void Trajectory::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_id_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory)
  trajectory_id_ = 0;
  node_.Clear();
  submap_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node;
        if (input->ExpectTag(18)) goto parse_loop_submap;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_submap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_submap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_submap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_trajectory_id;
        break;
      }

      // optional int32 trajectory_id = 3;
      case 3: {
        if (tag == 24) {
         parse_trajectory_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Trajectory)
  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (unsigned int i = 0, n = this->submap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->submap(i), output);
  }

  // optional int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trajectory_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory)
  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node(i), false, target);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (unsigned int i = 0, n = this->submap_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->submap(i), false, target);
  }

  // optional int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trajectory_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory)
  int total_size = 0;

  // optional int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  total_size += 1 * this->submap_size();
  for (int i = 0; i < this->submap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->submap(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Trajectory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_.MergeFrom(from.node_);
  submap_.MergeFrom(from.submap_);
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  std::swap(trajectory_id_, other->trajectory_id_);
  node_.UnsafeArenaSwap(&other->node_);
  submap_.UnsafeArenaSwap(&other->submap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory_Node

// optional int32 node_index = 7;
void Trajectory_Node::clear_node_index() {
  node_index_ = 0;
}
 ::google::protobuf::int32 Trajectory_Node::node_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.node_index)
  return node_index_;
}
 void Trajectory_Node::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.node_index)
}

// optional int64 timestamp = 1;
void Trajectory_Node::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Trajectory_Node::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.timestamp)
  return timestamp_;
}
 void Trajectory_Node::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.timestamp)
}

// optional .cartographer.transform.proto.Rigid3d pose = 5;
bool Trajectory_Node::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void Trajectory_Node::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& Trajectory_Node::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::cartographer::transform::proto::Rigid3d* Trajectory_Node::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Node.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* Trajectory_Node::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Node.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Trajectory_Node::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Node.pose)
}

// -------------------------------------------------------------------

// Trajectory_Submap

// optional int32 submap_index = 2;
void Trajectory_Submap::clear_submap_index() {
  submap_index_ = 0;
}
 ::google::protobuf::int32 Trajectory_Submap::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.submap_index)
  return submap_index_;
}
 void Trajectory_Submap::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Submap.submap_index)
}

// optional .cartographer.transform.proto.Rigid3d pose = 1;
bool Trajectory_Submap::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void Trajectory_Submap::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& Trajectory_Submap::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::cartographer::transform::proto::Rigid3d* Trajectory_Submap::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Submap.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* Trajectory_Submap::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Submap.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Trajectory_Submap::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Submap.pose)
}

// -------------------------------------------------------------------

// Trajectory

// optional int32 trajectory_id = 3;
void Trajectory::clear_trajectory_id() {
  trajectory_id_ = 0;
}
 ::google::protobuf::int32 Trajectory::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.trajectory_id)
  return trajectory_id_;
}
 void Trajectory::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.trajectory_id)
}

// repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
int Trajectory::node_size() const {
  return node_.size();
}
void Trajectory::clear_node() {
  node_.Clear();
}
const ::cartographer::mapping::proto::Trajectory_Node& Trajectory::node(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.node)
  return node_.Get(index);
}
::cartographer::mapping::proto::Trajectory_Node* Trajectory::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.node)
  return node_.Mutable(index);
}
::cartographer::mapping::proto::Trajectory_Node* Trajectory::add_node() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >*
Trajectory::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >&
Trajectory::node() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.node)
  return node_;
}

// repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
int Trajectory::submap_size() const {
  return submap_.size();
}
void Trajectory::clear_submap() {
  submap_.Clear();
}
const ::cartographer::mapping::proto::Trajectory_Submap& Trajectory::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Get(index);
}
::cartographer::mapping::proto::Trajectory_Submap* Trajectory::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Mutable(index);
}
::cartographer::mapping::proto::Trajectory_Submap* Trajectory::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >*
Trajectory::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.submap)
  return &submap_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >&
Trajectory::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.submap)
  return submap_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
