// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/optimization_problem_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace optimization {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* OptimizationProblemOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizationProblemOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/pose_graph/optimization_problem_options.proto");
  GOOGLE_CHECK(file != NULL);
  OptimizationProblemOptions_descriptor_ = file->message_type(0);
  static const int OptimizationProblemOptions_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, huber_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, acceleration_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, local_slam_pose_translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, local_slam_pose_rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, odometry_translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, odometry_rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, fixed_frame_pose_translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, fixed_frame_pose_rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, fix_z_in_3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, log_solver_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, ceres_solver_options_),
  };
  OptimizationProblemOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptimizationProblemOptions_descriptor_,
      OptimizationProblemOptions::default_instance_,
      OptimizationProblemOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptimizationProblemOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationProblemOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptimizationProblemOptions_descriptor_, &OptimizationProblemOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
  delete OptimizationProblemOptions::default_instance_;
  delete OptimizationProblemOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::common::proto::protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nHcartographer/mapping/proto/pose_graph/"
    "optimization_problem_options.proto\022\'cart"
    "ographer.mapping.optimization.proto\0324car"
    "tographer/common/proto/ceres_solver_opti"
    "ons.proto\"\330\003\n\032OptimizationProblemOptions"
    "\022\023\n\013huber_scale\030\001 \001(\001\022\033\n\023acceleration_we"
    "ight\030\010 \001(\001\022\027\n\017rotation_weight\030\t \001(\001\022*\n\"l"
    "ocal_slam_pose_translation_weight\030\016 \001(\001\022"
    "\'\n\037local_slam_pose_rotation_weight\030\017 \001(\001"
    "\022#\n\033odometry_translation_weight\030\020 \001(\001\022 \n"
    "\030odometry_rotation_weight\030\021 \001(\001\022+\n#fixed"
    "_frame_pose_translation_weight\030\013 \001(\001\022(\n "
    "fixed_frame_pose_rotation_weight\030\014 \001(\001\022\023"
    "\n\013fix_z_in_3d\030\r \001(\010\022\032\n\022log_solver_summar"
    "y\030\005 \001(\010\022K\n\024ceres_solver_options\030\007 \001(\0132-."
    "cartographer.common.proto.CeresSolverOpt"
    "ionsb\006proto3", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/pose_graph/optimization_problem_options.proto", &protobuf_RegisterTypes);
  OptimizationProblemOptions::default_instance_ = new OptimizationProblemOptions();
  OptimizationProblemOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptimizationProblemOptions::kHuberScaleFieldNumber;
const int OptimizationProblemOptions::kAccelerationWeightFieldNumber;
const int OptimizationProblemOptions::kRotationWeightFieldNumber;
const int OptimizationProblemOptions::kLocalSlamPoseTranslationWeightFieldNumber;
const int OptimizationProblemOptions::kLocalSlamPoseRotationWeightFieldNumber;
const int OptimizationProblemOptions::kOdometryTranslationWeightFieldNumber;
const int OptimizationProblemOptions::kOdometryRotationWeightFieldNumber;
const int OptimizationProblemOptions::kFixedFramePoseTranslationWeightFieldNumber;
const int OptimizationProblemOptions::kFixedFramePoseRotationWeightFieldNumber;
const int OptimizationProblemOptions::kFixZIn3DFieldNumber;
const int OptimizationProblemOptions::kLogSolverSummaryFieldNumber;
const int OptimizationProblemOptions::kCeresSolverOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptimizationProblemOptions::OptimizationProblemOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}

void OptimizationProblemOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ceres_solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(&::cartographer::common::proto::CeresSolverOptions::default_instance());
}

OptimizationProblemOptions::OptimizationProblemOptions(const OptimizationProblemOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}

void OptimizationProblemOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  huber_scale_ = 0;
  acceleration_weight_ = 0;
  rotation_weight_ = 0;
  local_slam_pose_translation_weight_ = 0;
  local_slam_pose_rotation_weight_ = 0;
  odometry_translation_weight_ = 0;
  odometry_rotation_weight_ = 0;
  fixed_frame_pose_translation_weight_ = 0;
  fixed_frame_pose_rotation_weight_ = 0;
  fix_z_in_3d_ = false;
  log_solver_summary_ = false;
  ceres_solver_options_ = NULL;
}

OptimizationProblemOptions::~OptimizationProblemOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  SharedDtor();
}

void OptimizationProblemOptions::SharedDtor() {
  if (this != default_instance_) {
    delete ceres_solver_options_;
  }
}

void OptimizationProblemOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizationProblemOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizationProblemOptions_descriptor_;
}

const OptimizationProblemOptions& OptimizationProblemOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto();
  return *default_instance_;
}

OptimizationProblemOptions* OptimizationProblemOptions::default_instance_ = NULL;

OptimizationProblemOptions* OptimizationProblemOptions::New(::google::protobuf::Arena* arena) const {
  OptimizationProblemOptions* n = new OptimizationProblemOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptimizationProblemOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OptimizationProblemOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OptimizationProblemOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(huber_scale_, fixed_frame_pose_translation_weight_);
  ZR_(fix_z_in_3d_, log_solver_summary_);
  fixed_frame_pose_rotation_weight_ = 0;
  if (GetArenaNoVirtual() == NULL && ceres_solver_options_ != NULL) delete ceres_solver_options_;
  ceres_solver_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool OptimizationProblemOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double huber_scale = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &huber_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_log_solver_summary;
        break;
      }

      // optional bool log_solver_summary = 5;
      case 5: {
        if (tag == 40) {
         parse_log_solver_summary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_solver_summary_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ceres_solver_options;
        break;
      }

      // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
      case 7: {
        if (tag == 58) {
         parse_ceres_solver_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_solver_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_acceleration_weight;
        break;
      }

      // optional double acceleration_weight = 8;
      case 8: {
        if (tag == 65) {
         parse_acceleration_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_rotation_weight;
        break;
      }

      // optional double rotation_weight = 9;
      case 9: {
        if (tag == 73) {
         parse_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_fixed_frame_pose_translation_weight;
        break;
      }

      // optional double fixed_frame_pose_translation_weight = 11;
      case 11: {
        if (tag == 89) {
         parse_fixed_frame_pose_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fixed_frame_pose_translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_fixed_frame_pose_rotation_weight;
        break;
      }

      // optional double fixed_frame_pose_rotation_weight = 12;
      case 12: {
        if (tag == 97) {
         parse_fixed_frame_pose_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fixed_frame_pose_rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fix_z_in_3d;
        break;
      }

      // optional bool fix_z_in_3d = 13;
      case 13: {
        if (tag == 104) {
         parse_fix_z_in_3d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fix_z_in_3d_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_local_slam_pose_translation_weight;
        break;
      }

      // optional double local_slam_pose_translation_weight = 14;
      case 14: {
        if (tag == 113) {
         parse_local_slam_pose_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &local_slam_pose_translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_local_slam_pose_rotation_weight;
        break;
      }

      // optional double local_slam_pose_rotation_weight = 15;
      case 15: {
        if (tag == 121) {
         parse_local_slam_pose_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &local_slam_pose_rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_odometry_translation_weight;
        break;
      }

      // optional double odometry_translation_weight = 16;
      case 16: {
        if (tag == 129) {
         parse_odometry_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_odometry_rotation_weight;
        break;
      }

      // optional double odometry_rotation_weight = 17;
      case 17: {
        if (tag == 137) {
         parse_odometry_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return false;
#undef DO_
}

void OptimizationProblemOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  // optional double huber_scale = 1;
  if (this->huber_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->huber_scale(), output);
  }

  // optional bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->log_solver_summary(), output);
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ceres_solver_options_, output);
  }

  // optional double acceleration_weight = 8;
  if (this->acceleration_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->acceleration_weight(), output);
  }

  // optional double rotation_weight = 9;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->rotation_weight(), output);
  }

  // optional double fixed_frame_pose_translation_weight = 11;
  if (this->fixed_frame_pose_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->fixed_frame_pose_translation_weight(), output);
  }

  // optional double fixed_frame_pose_rotation_weight = 12;
  if (this->fixed_frame_pose_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->fixed_frame_pose_rotation_weight(), output);
  }

  // optional bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->fix_z_in_3d(), output);
  }

  // optional double local_slam_pose_translation_weight = 14;
  if (this->local_slam_pose_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->local_slam_pose_translation_weight(), output);
  }

  // optional double local_slam_pose_rotation_weight = 15;
  if (this->local_slam_pose_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->local_slam_pose_rotation_weight(), output);
  }

  // optional double odometry_translation_weight = 16;
  if (this->odometry_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->odometry_translation_weight(), output);
  }

  // optional double odometry_rotation_weight = 17;
  if (this->odometry_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->odometry_rotation_weight(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}

::google::protobuf::uint8* OptimizationProblemOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  // optional double huber_scale = 1;
  if (this->huber_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->huber_scale(), target);
  }

  // optional bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->log_solver_summary(), target);
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ceres_solver_options_, false, target);
  }

  // optional double acceleration_weight = 8;
  if (this->acceleration_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->acceleration_weight(), target);
  }

  // optional double rotation_weight = 9;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->rotation_weight(), target);
  }

  // optional double fixed_frame_pose_translation_weight = 11;
  if (this->fixed_frame_pose_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->fixed_frame_pose_translation_weight(), target);
  }

  // optional double fixed_frame_pose_rotation_weight = 12;
  if (this->fixed_frame_pose_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->fixed_frame_pose_rotation_weight(), target);
  }

  // optional bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->fix_z_in_3d(), target);
  }

  // optional double local_slam_pose_translation_weight = 14;
  if (this->local_slam_pose_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->local_slam_pose_translation_weight(), target);
  }

  // optional double local_slam_pose_rotation_weight = 15;
  if (this->local_slam_pose_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->local_slam_pose_rotation_weight(), target);
  }

  // optional double odometry_translation_weight = 16;
  if (this->odometry_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->odometry_translation_weight(), target);
  }

  // optional double odometry_rotation_weight = 17;
  if (this->odometry_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->odometry_rotation_weight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return target;
}

int OptimizationProblemOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  int total_size = 0;

  // optional double huber_scale = 1;
  if (this->huber_scale() != 0) {
    total_size += 1 + 8;
  }

  // optional double acceleration_weight = 8;
  if (this->acceleration_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double rotation_weight = 9;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double local_slam_pose_translation_weight = 14;
  if (this->local_slam_pose_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double local_slam_pose_rotation_weight = 15;
  if (this->local_slam_pose_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double odometry_translation_weight = 16;
  if (this->odometry_translation_weight() != 0) {
    total_size += 2 + 8;
  }

  // optional double odometry_rotation_weight = 17;
  if (this->odometry_rotation_weight() != 0) {
    total_size += 2 + 8;
  }

  // optional double fixed_frame_pose_translation_weight = 11;
  if (this->fixed_frame_pose_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double fixed_frame_pose_rotation_weight = 12;
  if (this->fixed_frame_pose_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    total_size += 1 + 1;
  }

  // optional bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    total_size += 1 + 1;
  }

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ceres_solver_options_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizationProblemOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OptimizationProblemOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OptimizationProblemOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
    MergeFrom(*source);
  }
}

void OptimizationProblemOptions::MergeFrom(const OptimizationProblemOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.huber_scale() != 0) {
    set_huber_scale(from.huber_scale());
  }
  if (from.acceleration_weight() != 0) {
    set_acceleration_weight(from.acceleration_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
  if (from.local_slam_pose_translation_weight() != 0) {
    set_local_slam_pose_translation_weight(from.local_slam_pose_translation_weight());
  }
  if (from.local_slam_pose_rotation_weight() != 0) {
    set_local_slam_pose_rotation_weight(from.local_slam_pose_rotation_weight());
  }
  if (from.odometry_translation_weight() != 0) {
    set_odometry_translation_weight(from.odometry_translation_weight());
  }
  if (from.odometry_rotation_weight() != 0) {
    set_odometry_rotation_weight(from.odometry_rotation_weight());
  }
  if (from.fixed_frame_pose_translation_weight() != 0) {
    set_fixed_frame_pose_translation_weight(from.fixed_frame_pose_translation_weight());
  }
  if (from.fixed_frame_pose_rotation_weight() != 0) {
    set_fixed_frame_pose_rotation_weight(from.fixed_frame_pose_rotation_weight());
  }
  if (from.fix_z_in_3d() != 0) {
    set_fix_z_in_3d(from.fix_z_in_3d());
  }
  if (from.log_solver_summary() != 0) {
    set_log_solver_summary(from.log_solver_summary());
  }
  if (from.has_ceres_solver_options()) {
    mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from.ceres_solver_options());
  }
}

void OptimizationProblemOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationProblemOptions::CopyFrom(const OptimizationProblemOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationProblemOptions::IsInitialized() const {

  return true;
}

void OptimizationProblemOptions::Swap(OptimizationProblemOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptimizationProblemOptions::InternalSwap(OptimizationProblemOptions* other) {
  std::swap(huber_scale_, other->huber_scale_);
  std::swap(acceleration_weight_, other->acceleration_weight_);
  std::swap(rotation_weight_, other->rotation_weight_);
  std::swap(local_slam_pose_translation_weight_, other->local_slam_pose_translation_weight_);
  std::swap(local_slam_pose_rotation_weight_, other->local_slam_pose_rotation_weight_);
  std::swap(odometry_translation_weight_, other->odometry_translation_weight_);
  std::swap(odometry_rotation_weight_, other->odometry_rotation_weight_);
  std::swap(fixed_frame_pose_translation_weight_, other->fixed_frame_pose_translation_weight_);
  std::swap(fixed_frame_pose_rotation_weight_, other->fixed_frame_pose_rotation_weight_);
  std::swap(fix_z_in_3d_, other->fix_z_in_3d_);
  std::swap(log_solver_summary_, other->log_solver_summary_);
  std::swap(ceres_solver_options_, other->ceres_solver_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptimizationProblemOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizationProblemOptions_descriptor_;
  metadata.reflection = OptimizationProblemOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptimizationProblemOptions

// optional double huber_scale = 1;
void OptimizationProblemOptions::clear_huber_scale() {
  huber_scale_ = 0;
}
 double OptimizationProblemOptions::huber_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.huber_scale)
  return huber_scale_;
}
 void OptimizationProblemOptions::set_huber_scale(double value) {
  
  huber_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.huber_scale)
}

// optional double acceleration_weight = 8;
void OptimizationProblemOptions::clear_acceleration_weight() {
  acceleration_weight_ = 0;
}
 double OptimizationProblemOptions::acceleration_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.acceleration_weight)
  return acceleration_weight_;
}
 void OptimizationProblemOptions::set_acceleration_weight(double value) {
  
  acceleration_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.acceleration_weight)
}

// optional double rotation_weight = 9;
void OptimizationProblemOptions::clear_rotation_weight() {
  rotation_weight_ = 0;
}
 double OptimizationProblemOptions::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.rotation_weight)
  return rotation_weight_;
}
 void OptimizationProblemOptions::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.rotation_weight)
}

// optional double local_slam_pose_translation_weight = 14;
void OptimizationProblemOptions::clear_local_slam_pose_translation_weight() {
  local_slam_pose_translation_weight_ = 0;
}
 double OptimizationProblemOptions::local_slam_pose_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.local_slam_pose_translation_weight)
  return local_slam_pose_translation_weight_;
}
 void OptimizationProblemOptions::set_local_slam_pose_translation_weight(double value) {
  
  local_slam_pose_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.local_slam_pose_translation_weight)
}

// optional double local_slam_pose_rotation_weight = 15;
void OptimizationProblemOptions::clear_local_slam_pose_rotation_weight() {
  local_slam_pose_rotation_weight_ = 0;
}
 double OptimizationProblemOptions::local_slam_pose_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.local_slam_pose_rotation_weight)
  return local_slam_pose_rotation_weight_;
}
 void OptimizationProblemOptions::set_local_slam_pose_rotation_weight(double value) {
  
  local_slam_pose_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.local_slam_pose_rotation_weight)
}

// optional double odometry_translation_weight = 16;
void OptimizationProblemOptions::clear_odometry_translation_weight() {
  odometry_translation_weight_ = 0;
}
 double OptimizationProblemOptions::odometry_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.odometry_translation_weight)
  return odometry_translation_weight_;
}
 void OptimizationProblemOptions::set_odometry_translation_weight(double value) {
  
  odometry_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.odometry_translation_weight)
}

// optional double odometry_rotation_weight = 17;
void OptimizationProblemOptions::clear_odometry_rotation_weight() {
  odometry_rotation_weight_ = 0;
}
 double OptimizationProblemOptions::odometry_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.odometry_rotation_weight)
  return odometry_rotation_weight_;
}
 void OptimizationProblemOptions::set_odometry_rotation_weight(double value) {
  
  odometry_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.odometry_rotation_weight)
}

// optional double fixed_frame_pose_translation_weight = 11;
void OptimizationProblemOptions::clear_fixed_frame_pose_translation_weight() {
  fixed_frame_pose_translation_weight_ = 0;
}
 double OptimizationProblemOptions::fixed_frame_pose_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.fixed_frame_pose_translation_weight)
  return fixed_frame_pose_translation_weight_;
}
 void OptimizationProblemOptions::set_fixed_frame_pose_translation_weight(double value) {
  
  fixed_frame_pose_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.fixed_frame_pose_translation_weight)
}

// optional double fixed_frame_pose_rotation_weight = 12;
void OptimizationProblemOptions::clear_fixed_frame_pose_rotation_weight() {
  fixed_frame_pose_rotation_weight_ = 0;
}
 double OptimizationProblemOptions::fixed_frame_pose_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.fixed_frame_pose_rotation_weight)
  return fixed_frame_pose_rotation_weight_;
}
 void OptimizationProblemOptions::set_fixed_frame_pose_rotation_weight(double value) {
  
  fixed_frame_pose_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.fixed_frame_pose_rotation_weight)
}

// optional bool fix_z_in_3d = 13;
void OptimizationProblemOptions::clear_fix_z_in_3d() {
  fix_z_in_3d_ = false;
}
 bool OptimizationProblemOptions::fix_z_in_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.fix_z_in_3d)
  return fix_z_in_3d_;
}
 void OptimizationProblemOptions::set_fix_z_in_3d(bool value) {
  
  fix_z_in_3d_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.fix_z_in_3d)
}

// optional bool log_solver_summary = 5;
void OptimizationProblemOptions::clear_log_solver_summary() {
  log_solver_summary_ = false;
}
 bool OptimizationProblemOptions::log_solver_summary() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.log_solver_summary)
  return log_solver_summary_;
}
 void OptimizationProblemOptions::set_log_solver_summary(bool value) {
  
  log_solver_summary_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.optimization.proto.OptimizationProblemOptions.log_solver_summary)
}

// optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
bool OptimizationProblemOptions::has_ceres_solver_options() const {
  return !_is_default_instance_ && ceres_solver_options_ != NULL;
}
void OptimizationProblemOptions::clear_ceres_solver_options() {
  if (GetArenaNoVirtual() == NULL && ceres_solver_options_ != NULL) delete ceres_solver_options_;
  ceres_solver_options_ = NULL;
}
const ::cartographer::common::proto::CeresSolverOptions& OptimizationProblemOptions::ceres_solver_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.optimization.proto.OptimizationProblemOptions.ceres_solver_options)
  return ceres_solver_options_ != NULL ? *ceres_solver_options_ : *default_instance_->ceres_solver_options_;
}
::cartographer::common::proto::CeresSolverOptions* OptimizationProblemOptions::mutable_ceres_solver_options() {
  
  if (ceres_solver_options_ == NULL) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.optimization.proto.OptimizationProblemOptions.ceres_solver_options)
  return ceres_solver_options_;
}
::cartographer::common::proto::CeresSolverOptions* OptimizationProblemOptions::release_ceres_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.optimization.proto.OptimizationProblemOptions.ceres_solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = ceres_solver_options_;
  ceres_solver_options_ = NULL;
  return temp;
}
void OptimizationProblemOptions::set_allocated_ceres_solver_options(::cartographer::common::proto::CeresSolverOptions* ceres_solver_options) {
  delete ceres_solver_options_;
  ceres_solver_options_ = ceres_solver_options;
  if (ceres_solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.optimization.proto.OptimizationProblemOptions.ceres_solver_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
