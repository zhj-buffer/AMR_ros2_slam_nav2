// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_node_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory_node_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TrajectoryNodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryNodeData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/trajectory_node_data.proto");
  GOOGLE_CHECK(file != NULL);
  TrajectoryNodeData_descriptor_ = file->message_type(0);
  static const int TrajectoryNodeData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, gravity_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, filtered_gravity_aligned_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, high_resolution_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, low_resolution_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, rotational_scan_matcher_histogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, local_pose_),
  };
  TrajectoryNodeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryNodeData_descriptor_,
      TrajectoryNodeData::default_instance_,
      TrajectoryNodeData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrajectoryNodeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryNodeData_descriptor_, &TrajectoryNodeData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
  delete TrajectoryNodeData::default_instance_;
  delete TrajectoryNodeData_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::sensor::proto::protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5cartographer/mapping/proto/trajectory_"
    "node_data.proto\022\032cartographer.mapping.pr"
    "oto\032&cartographer/sensor/proto/sensor.pr"
    "oto\032,cartographer/transform/proto/transf"
    "orm.proto\"\335\003\n\022TrajectoryNodeData\022\021\n\ttime"
    "stamp\030\001 \001(\003\022D\n\021gravity_alignment\030\002 \001(\0132)"
    ".cartographer.transform.proto.Quaternion"
    "d\022]\n$filtered_gravity_aligned_point_clou"
    "d\030\003 \001(\0132/.cartographer.sensor.proto.Comp"
    "ressedPointCloud\022T\n\033high_resolution_poin"
    "t_cloud\030\004 \001(\0132/.cartographer.sensor.prot"
    "o.CompressedPointCloud\022S\n\032low_resolution"
    "_point_cloud\030\005 \001(\0132/.cartographer.sensor"
    ".proto.CompressedPointCloud\022)\n!rotationa"
    "l_scan_matcher_histogram\030\006 \003(\002\0229\n\nlocal_"
    "pose\030\007 \001(\0132%.cartographer.transform.prot"
    "o.Rigid3db\006proto3", 657);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory_node_data.proto", &protobuf_RegisterTypes);
  TrajectoryNodeData::default_instance_ = new TrajectoryNodeData();
  TrajectoryNodeData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryNodeData::kTimestampFieldNumber;
const int TrajectoryNodeData::kGravityAlignmentFieldNumber;
const int TrajectoryNodeData::kFilteredGravityAlignedPointCloudFieldNumber;
const int TrajectoryNodeData::kHighResolutionPointCloudFieldNumber;
const int TrajectoryNodeData::kLowResolutionPointCloudFieldNumber;
const int TrajectoryNodeData::kRotationalScanMatcherHistogramFieldNumber;
const int TrajectoryNodeData::kLocalPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryNodeData::TrajectoryNodeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryNodeData)
}

void TrajectoryNodeData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  gravity_alignment_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(&::cartographer::transform::proto::Quaterniond::default_instance());
  filtered_gravity_aligned_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
  high_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
  low_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
  local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

TrajectoryNodeData::TrajectoryNodeData(const TrajectoryNodeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryNodeData)
}

void TrajectoryNodeData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  gravity_alignment_ = NULL;
  filtered_gravity_aligned_point_cloud_ = NULL;
  high_resolution_point_cloud_ = NULL;
  low_resolution_point_cloud_ = NULL;
  local_pose_ = NULL;
}

TrajectoryNodeData::~TrajectoryNodeData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryNodeData)
  SharedDtor();
}

void TrajectoryNodeData::SharedDtor() {
  if (this != default_instance_) {
    delete gravity_alignment_;
    delete filtered_gravity_aligned_point_cloud_;
    delete high_resolution_point_cloud_;
    delete low_resolution_point_cloud_;
    delete local_pose_;
  }
}

void TrajectoryNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryNodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryNodeData_descriptor_;
}

const TrajectoryNodeData& TrajectoryNodeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto();
  return *default_instance_;
}

TrajectoryNodeData* TrajectoryNodeData::default_instance_ = NULL;

TrajectoryNodeData* TrajectoryNodeData::New(::google::protobuf::Arena* arena) const {
  TrajectoryNodeData* n = new TrajectoryNodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryNodeData)
  timestamp_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && gravity_alignment_ != NULL) delete gravity_alignment_;
  gravity_alignment_ = NULL;
  if (GetArenaNoVirtual() == NULL && filtered_gravity_aligned_point_cloud_ != NULL) delete filtered_gravity_aligned_point_cloud_;
  filtered_gravity_aligned_point_cloud_ = NULL;
  if (GetArenaNoVirtual() == NULL && high_resolution_point_cloud_ != NULL) delete high_resolution_point_cloud_;
  high_resolution_point_cloud_ = NULL;
  if (GetArenaNoVirtual() == NULL && low_resolution_point_cloud_ != NULL) delete low_resolution_point_cloud_;
  low_resolution_point_cloud_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
  rotational_scan_matcher_histogram_.Clear();
}

bool TrajectoryNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gravity_alignment;
        break;
      }

      // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
      case 2: {
        if (tag == 18) {
         parse_gravity_alignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity_alignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filtered_gravity_aligned_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
      case 3: {
        if (tag == 26) {
         parse_filtered_gravity_aligned_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filtered_gravity_aligned_point_cloud()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_high_resolution_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
      case 4: {
        if (tag == 34) {
         parse_high_resolution_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_resolution_point_cloud()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_low_resolution_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
      case 5: {
        if (tag == 42) {
         parse_low_resolution_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_resolution_point_cloud()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rotational_scan_matcher_histogram;
        break;
      }

      // repeated float rotational_scan_matcher_histogram = 6;
      case 6: {
        if (tag == 50) {
         parse_rotational_scan_matcher_histogram:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotational_scan_matcher_histogram())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_rotational_scan_matcher_histogram())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_local_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d local_pose = 7;
      case 7: {
        if (tag == 58) {
         parse_local_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryNodeData)
  return false;
#undef DO_
}

void TrajectoryNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryNodeData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (this->has_gravity_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gravity_alignment_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (this->has_filtered_gravity_aligned_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filtered_gravity_aligned_point_cloud_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (this->has_high_resolution_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->high_resolution_point_cloud_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (this->has_low_resolution_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->low_resolution_point_cloud_, output);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  if (this->rotational_scan_matcher_histogram_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotational_scan_matcher_histogram_cached_byte_size_);
  }
  for (int i = 0; i < this->rotational_scan_matcher_histogram_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->rotational_scan_matcher_histogram(i), output);
  }

  // optional .cartographer.transform.proto.Rigid3d local_pose = 7;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->local_pose_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryNodeData)
}

::google::protobuf::uint8* TrajectoryNodeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryNodeData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (this->has_gravity_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->gravity_alignment_, false, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (this->has_filtered_gravity_aligned_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filtered_gravity_aligned_point_cloud_, false, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (this->has_high_resolution_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->high_resolution_point_cloud_, false, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (this->has_low_resolution_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->low_resolution_point_cloud_, false, target);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  if (this->rotational_scan_matcher_histogram_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rotational_scan_matcher_histogram_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rotational_scan_matcher_histogram_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotational_scan_matcher_histogram(i), target);
  }

  // optional .cartographer.transform.proto.Rigid3d local_pose = 7;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->local_pose_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryNodeData)
  return target;
}

int TrajectoryNodeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryNodeData)
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (this->has_gravity_alignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gravity_alignment_);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (this->has_filtered_gravity_aligned_point_cloud()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filtered_gravity_aligned_point_cloud_);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (this->has_high_resolution_point_cloud()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->high_resolution_point_cloud_);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (this->has_low_resolution_point_cloud()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->low_resolution_point_cloud_);
  }

  // optional .cartographer.transform.proto.Rigid3d local_pose = 7;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_pose_);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  {
    int data_size = 0;
    data_size = 4 * this->rotational_scan_matcher_histogram_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotational_scan_matcher_histogram_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryNodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryNodeData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryNodeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryNodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryNodeData)
    MergeFrom(*source);
  }
}

void TrajectoryNodeData::MergeFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rotational_scan_matcher_histogram_.MergeFrom(from.rotational_scan_matcher_histogram_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_gravity_alignment()) {
    mutable_gravity_alignment()->::cartographer::transform::proto::Quaterniond::MergeFrom(from.gravity_alignment());
  }
  if (from.has_filtered_gravity_aligned_point_cloud()) {
    mutable_filtered_gravity_aligned_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.filtered_gravity_aligned_point_cloud());
  }
  if (from.has_high_resolution_point_cloud()) {
    mutable_high_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.high_resolution_point_cloud());
  }
  if (from.has_low_resolution_point_cloud()) {
    mutable_low_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.low_resolution_point_cloud());
  }
  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
}

void TrajectoryNodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodeData::CopyFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodeData::IsInitialized() const {

  return true;
}

void TrajectoryNodeData::Swap(TrajectoryNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryNodeData::InternalSwap(TrajectoryNodeData* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(gravity_alignment_, other->gravity_alignment_);
  std::swap(filtered_gravity_aligned_point_cloud_, other->filtered_gravity_aligned_point_cloud_);
  std::swap(high_resolution_point_cloud_, other->high_resolution_point_cloud_);
  std::swap(low_resolution_point_cloud_, other->low_resolution_point_cloud_);
  rotational_scan_matcher_histogram_.UnsafeArenaSwap(&other->rotational_scan_matcher_histogram_);
  std::swap(local_pose_, other->local_pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryNodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryNodeData_descriptor_;
  metadata.reflection = TrajectoryNodeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryNodeData

// optional int64 timestamp = 1;
void TrajectoryNodeData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TrajectoryNodeData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.timestamp)
  return timestamp_;
}
 void TrajectoryNodeData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryNodeData.timestamp)
}

// optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
bool TrajectoryNodeData::has_gravity_alignment() const {
  return !_is_default_instance_ && gravity_alignment_ != NULL;
}
void TrajectoryNodeData::clear_gravity_alignment() {
  if (GetArenaNoVirtual() == NULL && gravity_alignment_ != NULL) delete gravity_alignment_;
  gravity_alignment_ = NULL;
}
const ::cartographer::transform::proto::Quaterniond& TrajectoryNodeData::gravity_alignment() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  return gravity_alignment_ != NULL ? *gravity_alignment_ : *default_instance_->gravity_alignment_;
}
::cartographer::transform::proto::Quaterniond* TrajectoryNodeData::mutable_gravity_alignment() {
  
  if (gravity_alignment_ == NULL) {
    gravity_alignment_ = new ::cartographer::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  return gravity_alignment_;
}
::cartographer::transform::proto::Quaterniond* TrajectoryNodeData::release_gravity_alignment() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  
  ::cartographer::transform::proto::Quaterniond* temp = gravity_alignment_;
  gravity_alignment_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_gravity_alignment(::cartographer::transform::proto::Quaterniond* gravity_alignment) {
  delete gravity_alignment_;
  gravity_alignment_ = gravity_alignment;
  if (gravity_alignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
}

// optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
bool TrajectoryNodeData::has_filtered_gravity_aligned_point_cloud() const {
  return !_is_default_instance_ && filtered_gravity_aligned_point_cloud_ != NULL;
}
void TrajectoryNodeData::clear_filtered_gravity_aligned_point_cloud() {
  if (GetArenaNoVirtual() == NULL && filtered_gravity_aligned_point_cloud_ != NULL) delete filtered_gravity_aligned_point_cloud_;
  filtered_gravity_aligned_point_cloud_ = NULL;
}
const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::filtered_gravity_aligned_point_cloud() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  return filtered_gravity_aligned_point_cloud_ != NULL ? *filtered_gravity_aligned_point_cloud_ : *default_instance_->filtered_gravity_aligned_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_filtered_gravity_aligned_point_cloud() {
  
  if (filtered_gravity_aligned_point_cloud_ == NULL) {
    filtered_gravity_aligned_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  return filtered_gravity_aligned_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_filtered_gravity_aligned_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  
  ::cartographer::sensor::proto::CompressedPointCloud* temp = filtered_gravity_aligned_point_cloud_;
  filtered_gravity_aligned_point_cloud_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_filtered_gravity_aligned_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* filtered_gravity_aligned_point_cloud) {
  delete filtered_gravity_aligned_point_cloud_;
  filtered_gravity_aligned_point_cloud_ = filtered_gravity_aligned_point_cloud;
  if (filtered_gravity_aligned_point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
}

// optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
bool TrajectoryNodeData::has_high_resolution_point_cloud() const {
  return !_is_default_instance_ && high_resolution_point_cloud_ != NULL;
}
void TrajectoryNodeData::clear_high_resolution_point_cloud() {
  if (GetArenaNoVirtual() == NULL && high_resolution_point_cloud_ != NULL) delete high_resolution_point_cloud_;
  high_resolution_point_cloud_ = NULL;
}
const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::high_resolution_point_cloud() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  return high_resolution_point_cloud_ != NULL ? *high_resolution_point_cloud_ : *default_instance_->high_resolution_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_high_resolution_point_cloud() {
  
  if (high_resolution_point_cloud_ == NULL) {
    high_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  return high_resolution_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_high_resolution_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  
  ::cartographer::sensor::proto::CompressedPointCloud* temp = high_resolution_point_cloud_;
  high_resolution_point_cloud_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_high_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* high_resolution_point_cloud) {
  delete high_resolution_point_cloud_;
  high_resolution_point_cloud_ = high_resolution_point_cloud;
  if (high_resolution_point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
}

// optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
bool TrajectoryNodeData::has_low_resolution_point_cloud() const {
  return !_is_default_instance_ && low_resolution_point_cloud_ != NULL;
}
void TrajectoryNodeData::clear_low_resolution_point_cloud() {
  if (GetArenaNoVirtual() == NULL && low_resolution_point_cloud_ != NULL) delete low_resolution_point_cloud_;
  low_resolution_point_cloud_ = NULL;
}
const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::low_resolution_point_cloud() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  return low_resolution_point_cloud_ != NULL ? *low_resolution_point_cloud_ : *default_instance_->low_resolution_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_low_resolution_point_cloud() {
  
  if (low_resolution_point_cloud_ == NULL) {
    low_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  return low_resolution_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_low_resolution_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  
  ::cartographer::sensor::proto::CompressedPointCloud* temp = low_resolution_point_cloud_;
  low_resolution_point_cloud_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_low_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* low_resolution_point_cloud) {
  delete low_resolution_point_cloud_;
  low_resolution_point_cloud_ = low_resolution_point_cloud;
  if (low_resolution_point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
}

// repeated float rotational_scan_matcher_histogram = 6;
int TrajectoryNodeData::rotational_scan_matcher_histogram_size() const {
  return rotational_scan_matcher_histogram_.size();
}
void TrajectoryNodeData::clear_rotational_scan_matcher_histogram() {
  rotational_scan_matcher_histogram_.Clear();
}
 float TrajectoryNodeData::rotational_scan_matcher_histogram(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return rotational_scan_matcher_histogram_.Get(index);
}
 void TrajectoryNodeData::set_rotational_scan_matcher_histogram(int index, float value) {
  rotational_scan_matcher_histogram_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
}
 void TrajectoryNodeData::add_rotational_scan_matcher_histogram(float value) {
  rotational_scan_matcher_histogram_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
}
 const ::google::protobuf::RepeatedField< float >&
TrajectoryNodeData::rotational_scan_matcher_histogram() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return rotational_scan_matcher_histogram_;
}
 ::google::protobuf::RepeatedField< float >*
TrajectoryNodeData::mutable_rotational_scan_matcher_histogram() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return &rotational_scan_matcher_histogram_;
}

// optional .cartographer.transform.proto.Rigid3d local_pose = 7;
bool TrajectoryNodeData::has_local_pose() const {
  return !_is_default_instance_ && local_pose_ != NULL;
}
void TrajectoryNodeData::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& TrajectoryNodeData::local_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
  return local_pose_ != NULL ? *local_pose_ : *default_instance_->local_pose_;
}
::cartographer::transform::proto::Rigid3d* TrajectoryNodeData::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
  return local_pose_;
}
::cartographer::transform::proto::Rigid3d* TrajectoryNodeData::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.local_pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
