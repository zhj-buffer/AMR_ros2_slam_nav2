// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/map_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/pose_graph_options.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();

class MapBuilderOptions;

// ===================================================================

class MapBuilderOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.MapBuilderOptions) */ {
 public:
  MapBuilderOptions();
  virtual ~MapBuilderOptions();

  MapBuilderOptions(const MapBuilderOptions& from);

  inline MapBuilderOptions& operator=(const MapBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapBuilderOptions& default_instance();

  void Swap(MapBuilderOptions* other);

  // implements Message ----------------------------------------------

  inline MapBuilderOptions* New() const { return New(NULL); }

  MapBuilderOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapBuilderOptions& from);
  void MergeFrom(const MapBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MapBuilderOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_trajectory_builder_2d = 1;
  void clear_use_trajectory_builder_2d();
  static const int kUseTrajectoryBuilder2DFieldNumber = 1;
  bool use_trajectory_builder_2d() const;
  void set_use_trajectory_builder_2d(bool value);

  // optional bool use_trajectory_builder_3d = 2;
  void clear_use_trajectory_builder_3d();
  static const int kUseTrajectoryBuilder3DFieldNumber = 2;
  bool use_trajectory_builder_3d() const;
  void set_use_trajectory_builder_3d(bool value);

  // optional int32 num_background_threads = 3;
  void clear_num_background_threads();
  static const int kNumBackgroundThreadsFieldNumber = 3;
  ::google::protobuf::int32 num_background_threads() const;
  void set_num_background_threads(::google::protobuf::int32 value);

  // optional .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
  bool has_pose_graph_options() const;
  void clear_pose_graph_options();
  static const int kPoseGraphOptionsFieldNumber = 4;
  const ::cartographer::mapping::proto::PoseGraphOptions& pose_graph_options() const;
  ::cartographer::mapping::proto::PoseGraphOptions* mutable_pose_graph_options();
  ::cartographer::mapping::proto::PoseGraphOptions* release_pose_graph_options();
  void set_allocated_pose_graph_options(::cartographer::mapping::proto::PoseGraphOptions* pose_graph_options);

  // optional bool collate_by_trajectory = 5;
  void clear_collate_by_trajectory();
  static const int kCollateByTrajectoryFieldNumber = 5;
  bool collate_by_trajectory() const;
  void set_collate_by_trajectory(bool value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.MapBuilderOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool use_trajectory_builder_2d_;
  bool use_trajectory_builder_3d_;
  bool collate_by_trajectory_;
  ::google::protobuf::int32 num_background_threads_;
  ::cartographer::mapping::proto::PoseGraphOptions* pose_graph_options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static MapBuilderOptions* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MapBuilderOptions

// optional bool use_trajectory_builder_2d = 1;
inline void MapBuilderOptions::clear_use_trajectory_builder_2d() {
  use_trajectory_builder_2d_ = false;
}
inline bool MapBuilderOptions::use_trajectory_builder_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_2d)
  return use_trajectory_builder_2d_;
}
inline void MapBuilderOptions::set_use_trajectory_builder_2d(bool value) {
  
  use_trajectory_builder_2d_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_2d)
}

// optional bool use_trajectory_builder_3d = 2;
inline void MapBuilderOptions::clear_use_trajectory_builder_3d() {
  use_trajectory_builder_3d_ = false;
}
inline bool MapBuilderOptions::use_trajectory_builder_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_3d)
  return use_trajectory_builder_3d_;
}
inline void MapBuilderOptions::set_use_trajectory_builder_3d(bool value) {
  
  use_trajectory_builder_3d_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.use_trajectory_builder_3d)
}

// optional int32 num_background_threads = 3;
inline void MapBuilderOptions::clear_num_background_threads() {
  num_background_threads_ = 0;
}
inline ::google::protobuf::int32 MapBuilderOptions::num_background_threads() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.num_background_threads)
  return num_background_threads_;
}
inline void MapBuilderOptions::set_num_background_threads(::google::protobuf::int32 value) {
  
  num_background_threads_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.num_background_threads)
}

// optional .cartographer.mapping.proto.PoseGraphOptions pose_graph_options = 4;
inline bool MapBuilderOptions::has_pose_graph_options() const {
  return !_is_default_instance_ && pose_graph_options_ != NULL;
}
inline void MapBuilderOptions::clear_pose_graph_options() {
  if (GetArenaNoVirtual() == NULL && pose_graph_options_ != NULL) delete pose_graph_options_;
  pose_graph_options_ = NULL;
}
inline const ::cartographer::mapping::proto::PoseGraphOptions& MapBuilderOptions::pose_graph_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  return pose_graph_options_ != NULL ? *pose_graph_options_ : *default_instance_->pose_graph_options_;
}
inline ::cartographer::mapping::proto::PoseGraphOptions* MapBuilderOptions::mutable_pose_graph_options() {
  
  if (pose_graph_options_ == NULL) {
    pose_graph_options_ = new ::cartographer::mapping::proto::PoseGraphOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  return pose_graph_options_;
}
inline ::cartographer::mapping::proto::PoseGraphOptions* MapBuilderOptions::release_pose_graph_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
  
  ::cartographer::mapping::proto::PoseGraphOptions* temp = pose_graph_options_;
  pose_graph_options_ = NULL;
  return temp;
}
inline void MapBuilderOptions::set_allocated_pose_graph_options(::cartographer::mapping::proto::PoseGraphOptions* pose_graph_options) {
  delete pose_graph_options_;
  pose_graph_options_ = pose_graph_options;
  if (pose_graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.MapBuilderOptions.pose_graph_options)
}

// optional bool collate_by_trajectory = 5;
inline void MapBuilderOptions::clear_collate_by_trajectory() {
  collate_by_trajectory_ = false;
}
inline bool MapBuilderOptions::collate_by_trajectory() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapBuilderOptions.collate_by_trajectory)
  return collate_by_trajectory_;
}
inline void MapBuilderOptions::set_collate_by_trajectory(bool value) {
  
  collate_by_trajectory_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapBuilderOptions.collate_by_trajectory)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto__INCLUDED
