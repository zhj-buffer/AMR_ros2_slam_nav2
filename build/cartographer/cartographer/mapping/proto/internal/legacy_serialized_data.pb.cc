// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_serialized_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/internal/legacy_serialized_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LegacySerializedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegacySerializedData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/internal/legacy_serialized_data.proto");
  GOOGLE_CHECK(file != NULL);
  LegacySerializedData_descriptor_ = file->message_type(0);
  static const int LegacySerializedData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, submap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, imu_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, odometry_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, fixed_frame_pose_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, trajectory_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, landmark_data_),
  };
  LegacySerializedData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LegacySerializedData_descriptor_,
      LegacySerializedData::default_instance_,
      LegacySerializedData_offsets_,
      -1,
      -1,
      -1,
      sizeof(LegacySerializedData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacySerializedData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LegacySerializedData_descriptor_, &LegacySerializedData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
  delete LegacySerializedData::default_instance_;
  delete LegacySerializedData_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fserialization_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n@cartographer/mapping/proto/internal/le"
    "gacy_serialized_data.proto\022\032cartographer"
    ".mapping.proto\032.cartographer/mapping/pro"
    "to/serialization.proto\"\307\003\n\024LegacySeriali"
    "zedData\0222\n\006submap\030\001 \001(\0132\".cartographer.m"
    "apping.proto.Submap\022.\n\004node\030\002 \001(\0132 .cart"
    "ographer.mapping.proto.Node\0225\n\010imu_data\030"
    "\003 \001(\0132#.cartographer.mapping.proto.ImuDa"
    "ta\022\?\n\rodometry_data\030\004 \001(\0132(.cartographer"
    ".mapping.proto.OdometryData\022M\n\025fixed_fra"
    "me_pose_data\030\005 \001(\0132..cartographer.mappin"
    "g.proto.FixedFramePoseData\022C\n\017trajectory"
    "_data\030\006 \001(\0132*.cartographer.mapping.proto"
    ".TrajectoryData\022\?\n\rlandmark_data\030\007 \001(\0132("
    ".cartographer.mapping.proto.LandmarkData"
    "b\006proto3", 608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/internal/legacy_serialized_data.proto", &protobuf_RegisterTypes);
  LegacySerializedData::default_instance_ = new LegacySerializedData();
  LegacySerializedData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySerializedData::kSubmapFieldNumber;
const int LegacySerializedData::kNodeFieldNumber;
const int LegacySerializedData::kImuDataFieldNumber;
const int LegacySerializedData::kOdometryDataFieldNumber;
const int LegacySerializedData::kFixedFramePoseDataFieldNumber;
const int LegacySerializedData::kTrajectoryDataFieldNumber;
const int LegacySerializedData::kLandmarkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySerializedData::LegacySerializedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySerializedData)
}

void LegacySerializedData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  submap_ = const_cast< ::cartographer::mapping::proto::Submap*>(&::cartographer::mapping::proto::Submap::default_instance());
  node_ = const_cast< ::cartographer::mapping::proto::Node*>(&::cartographer::mapping::proto::Node::default_instance());
  imu_data_ = const_cast< ::cartographer::mapping::proto::ImuData*>(&::cartographer::mapping::proto::ImuData::default_instance());
  odometry_data_ = const_cast< ::cartographer::mapping::proto::OdometryData*>(&::cartographer::mapping::proto::OdometryData::default_instance());
  fixed_frame_pose_data_ = const_cast< ::cartographer::mapping::proto::FixedFramePoseData*>(&::cartographer::mapping::proto::FixedFramePoseData::default_instance());
  trajectory_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryData*>(&::cartographer::mapping::proto::TrajectoryData::default_instance());
  landmark_data_ = const_cast< ::cartographer::mapping::proto::LandmarkData*>(&::cartographer::mapping::proto::LandmarkData::default_instance());
}

LegacySerializedData::LegacySerializedData(const LegacySerializedData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySerializedData)
}

void LegacySerializedData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  submap_ = NULL;
  node_ = NULL;
  imu_data_ = NULL;
  odometry_data_ = NULL;
  fixed_frame_pose_data_ = NULL;
  trajectory_data_ = NULL;
  landmark_data_ = NULL;
}

LegacySerializedData::~LegacySerializedData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySerializedData)
  SharedDtor();
}

void LegacySerializedData::SharedDtor() {
  if (this != default_instance_) {
    delete submap_;
    delete node_;
    delete imu_data_;
    delete odometry_data_;
    delete fixed_frame_pose_data_;
    delete trajectory_data_;
    delete landmark_data_;
  }
}

void LegacySerializedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegacySerializedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegacySerializedData_descriptor_;
}

const LegacySerializedData& LegacySerializedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();
  return *default_instance_;
}

LegacySerializedData* LegacySerializedData::default_instance_ = NULL;

LegacySerializedData* LegacySerializedData::New(::google::protobuf::Arena* arena) const {
  LegacySerializedData* n = new LegacySerializedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LegacySerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySerializedData)
  if (GetArenaNoVirtual() == NULL && submap_ != NULL) delete submap_;
  submap_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && trajectory_data_ != NULL) delete trajectory_data_;
  trajectory_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) delete landmark_data_;
  landmark_data_ = NULL;
}

bool LegacySerializedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySerializedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.Submap submap = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // optional .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imu_data;
        break;
      }

      // optional .cartographer.mapping.proto.ImuData imu_data = 3;
      case 3: {
        if (tag == 26) {
         parse_imu_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_odometry_data;
        break;
      }

      // optional .cartographer.mapping.proto.OdometryData odometry_data = 4;
      case 4: {
        if (tag == 34) {
         parse_odometry_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fixed_frame_pose_data;
        break;
      }

      // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (tag == 42) {
         parse_fixed_frame_pose_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_trajectory_data;
        break;
      }

      // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
      case 6: {
        if (tag == 50) {
         parse_trajectory_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_landmark_data;
        break;
      }

      // optional .cartographer.mapping.proto.LandmarkData landmark_data = 7;
      case 7: {
        if (tag == 58) {
         parse_landmark_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySerializedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySerializedData)
  return false;
#undef DO_
}

void LegacySerializedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySerializedData)
  // optional .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_, output);
  }

  // optional .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  // optional .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imu_data_, output);
  }

  // optional .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->odometry_data_, output);
  }

  // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fixed_frame_pose_data_, output);
  }

  // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->trajectory_data_, output);
  }

  // optional .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->landmark_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySerializedData)
}

::google::protobuf::uint8* LegacySerializedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySerializedData)
  // optional .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_, false, target);
  }

  // optional .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_, false, target);
  }

  // optional .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imu_data_, false, target);
  }

  // optional .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->odometry_data_, false, target);
  }

  // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->fixed_frame_pose_data_, false, target);
  }

  // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->trajectory_data_, false, target);
  }

  // optional .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->landmark_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySerializedData)
  return target;
}

int LegacySerializedData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySerializedData)
  int total_size = 0;

  // optional .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_);
  }

  // optional .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // optional .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imu_data_);
  }

  // optional .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->odometry_data_);
  }

  // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fixed_frame_pose_data_);
  }

  // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_data_);
  }

  // optional .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->landmark_data_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegacySerializedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LegacySerializedData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LegacySerializedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySerializedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySerializedData)
    MergeFrom(*source);
  }
}

void LegacySerializedData::MergeFrom(const LegacySerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_submap()) {
    mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from.submap());
  }
  if (from.has_node()) {
    mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from.node());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from.imu_data());
  }
  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from.odometry_data());
  }
  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
  if (from.has_trajectory_data()) {
    mutable_trajectory_data()->::cartographer::mapping::proto::TrajectoryData::MergeFrom(from.trajectory_data());
  }
  if (from.has_landmark_data()) {
    mutable_landmark_data()->::cartographer::mapping::proto::LandmarkData::MergeFrom(from.landmark_data());
  }
}

void LegacySerializedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySerializedData::CopyFrom(const LegacySerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySerializedData::IsInitialized() const {

  return true;
}

void LegacySerializedData::Swap(LegacySerializedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySerializedData::InternalSwap(LegacySerializedData* other) {
  std::swap(submap_, other->submap_);
  std::swap(node_, other->node_);
  std::swap(imu_data_, other->imu_data_);
  std::swap(odometry_data_, other->odometry_data_);
  std::swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  std::swap(trajectory_data_, other->trajectory_data_);
  std::swap(landmark_data_, other->landmark_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LegacySerializedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegacySerializedData_descriptor_;
  metadata.reflection = LegacySerializedData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LegacySerializedData

// optional .cartographer.mapping.proto.Submap submap = 1;
bool LegacySerializedData::has_submap() const {
  return !_is_default_instance_ && submap_ != NULL;
}
void LegacySerializedData::clear_submap() {
  if (GetArenaNoVirtual() == NULL && submap_ != NULL) delete submap_;
  submap_ = NULL;
}
const ::cartographer::mapping::proto::Submap& LegacySerializedData::submap() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.submap)
  return submap_ != NULL ? *submap_ : *default_instance_->submap_;
}
::cartographer::mapping::proto::Submap* LegacySerializedData::mutable_submap() {
  
  if (submap_ == NULL) {
    submap_ = new ::cartographer::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.submap)
  return submap_;
}
::cartographer::mapping::proto::Submap* LegacySerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.submap)
  
  ::cartographer::mapping::proto::Submap* temp = submap_;
  submap_ = NULL;
  return temp;
}
void LegacySerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  delete submap_;
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.submap)
}

// optional .cartographer.mapping.proto.Node node = 2;
bool LegacySerializedData::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
void LegacySerializedData::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::cartographer::mapping::proto::Node& LegacySerializedData::node() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::cartographer::mapping::proto::Node* LegacySerializedData::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::cartographer::mapping::proto::Node;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.node)
  return node_;
}
::cartographer::mapping::proto::Node* LegacySerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.node)
  
  ::cartographer::mapping::proto::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void LegacySerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.node)
}

// optional .cartographer.mapping.proto.ImuData imu_data = 3;
bool LegacySerializedData::has_imu_data() const {
  return !_is_default_instance_ && imu_data_ != NULL;
}
void LegacySerializedData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
const ::cartographer::mapping::proto::ImuData& LegacySerializedData::imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.imu_data)
  return imu_data_ != NULL ? *imu_data_ : *default_instance_->imu_data_;
}
::cartographer::mapping::proto::ImuData* LegacySerializedData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.imu_data)
  return imu_data_;
}
::cartographer::mapping::proto::ImuData* LegacySerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.imu_data)
  
  ::cartographer::mapping::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
void LegacySerializedData::set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.imu_data)
}

// optional .cartographer.mapping.proto.OdometryData odometry_data = 4;
bool LegacySerializedData::has_odometry_data() const {
  return !_is_default_instance_ && odometry_data_ != NULL;
}
void LegacySerializedData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
const ::cartographer::mapping::proto::OdometryData& LegacySerializedData::odometry_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  return odometry_data_ != NULL ? *odometry_data_ : *default_instance_->odometry_data_;
}
::cartographer::mapping::proto::OdometryData* LegacySerializedData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  return odometry_data_;
}
::cartographer::mapping::proto::OdometryData* LegacySerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  
  ::cartographer::mapping::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
void LegacySerializedData::set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.odometry_data)
}

// optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
bool LegacySerializedData::has_fixed_frame_pose_data() const {
  return !_is_default_instance_ && fixed_frame_pose_data_ != NULL;
}
void LegacySerializedData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
const ::cartographer::mapping::proto::FixedFramePoseData& LegacySerializedData::fixed_frame_pose_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  return fixed_frame_pose_data_ != NULL ? *fixed_frame_pose_data_ : *default_instance_->fixed_frame_pose_data_;
}
::cartographer::mapping::proto::FixedFramePoseData* LegacySerializedData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
::cartographer::mapping::proto::FixedFramePoseData* LegacySerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  
  ::cartographer::mapping::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
void LegacySerializedData::set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
}

// optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
bool LegacySerializedData::has_trajectory_data() const {
  return !_is_default_instance_ && trajectory_data_ != NULL;
}
void LegacySerializedData::clear_trajectory_data() {
  if (GetArenaNoVirtual() == NULL && trajectory_data_ != NULL) delete trajectory_data_;
  trajectory_data_ = NULL;
}
const ::cartographer::mapping::proto::TrajectoryData& LegacySerializedData::trajectory_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  return trajectory_data_ != NULL ? *trajectory_data_ : *default_instance_->trajectory_data_;
}
::cartographer::mapping::proto::TrajectoryData* LegacySerializedData::mutable_trajectory_data() {
  
  if (trajectory_data_ == NULL) {
    trajectory_data_ = new ::cartographer::mapping::proto::TrajectoryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  return trajectory_data_;
}
::cartographer::mapping::proto::TrajectoryData* LegacySerializedData::release_trajectory_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  
  ::cartographer::mapping::proto::TrajectoryData* temp = trajectory_data_;
  trajectory_data_ = NULL;
  return temp;
}
void LegacySerializedData::set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data) {
  delete trajectory_data_;
  trajectory_data_ = trajectory_data;
  if (trajectory_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
}

// optional .cartographer.mapping.proto.LandmarkData landmark_data = 7;
bool LegacySerializedData::has_landmark_data() const {
  return !_is_default_instance_ && landmark_data_ != NULL;
}
void LegacySerializedData::clear_landmark_data() {
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) delete landmark_data_;
  landmark_data_ = NULL;
}
const ::cartographer::mapping::proto::LandmarkData& LegacySerializedData::landmark_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  return landmark_data_ != NULL ? *landmark_data_ : *default_instance_->landmark_data_;
}
::cartographer::mapping::proto::LandmarkData* LegacySerializedData::mutable_landmark_data() {
  
  if (landmark_data_ == NULL) {
    landmark_data_ = new ::cartographer::mapping::proto::LandmarkData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  return landmark_data_;
}
::cartographer::mapping::proto::LandmarkData* LegacySerializedData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  
  ::cartographer::mapping::proto::LandmarkData* temp = landmark_data_;
  landmark_data_ = NULL;
  return temp;
}
void LegacySerializedData::set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data) {
  delete landmark_data_;
  landmark_data_ = landmark_data;
  if (landmark_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.landmark_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
