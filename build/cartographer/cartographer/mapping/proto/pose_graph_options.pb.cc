// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/pose_graph_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PoseGraphOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoseGraphOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/pose_graph_options.proto");
  GOOGLE_CHECK(file != NULL);
  PoseGraphOptions_descriptor_ = file->message_type(0);
  static const int PoseGraphOptions_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, optimize_every_n_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, constraint_builder_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, matcher_translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, matcher_rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, optimization_problem_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, max_num_final_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, global_sampling_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, log_residual_histograms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, global_constraint_search_after_n_seconds_),
  };
  PoseGraphOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoseGraphOptions_descriptor_,
      PoseGraphOptions::default_instance_,
      PoseGraphOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(PoseGraphOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraphOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoseGraphOptions_descriptor_, &PoseGraphOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() {
  delete PoseGraphOptions::default_instance_;
  delete PoseGraphOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::constraints::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto();
  ::cartographer::mapping::optimization::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3cartographer/mapping/proto/pose_graph_"
    "options.proto\022\032cartographer.mapping.prot"
    "o\032Fcartographer/mapping/proto/pose_graph"
    "/constraint_builder_options.proto\032Hcarto"
    "grapher/mapping/proto/pose_graph/optimiz"
    "ation_problem_options.proto\"\334\003\n\020PoseGrap"
    "hOptions\022\036\n\026optimize_every_n_nodes\030\001 \001(\005"
    "\022d\n\032constraint_builder_options\030\003 \001(\0132@.c"
    "artographer.mapping.constraints.proto.Co"
    "nstraintBuilderOptions\022\"\n\032matcher_transl"
    "ation_weight\030\007 \001(\001\022\037\n\027matcher_rotation_w"
    "eight\030\010 \001(\001\022i\n\034optimization_problem_opti"
    "ons\030\004 \001(\0132C.cartographer.mapping.optimiz"
    "ation.proto.OptimizationProblemOptions\022 "
    "\n\030max_num_final_iterations\030\006 \001(\005\022\035\n\025glob"
    "al_sampling_ratio\030\005 \001(\001\022\037\n\027log_residual_"
    "histograms\030\t \001(\010\0220\n(global_constraint_se"
    "arch_after_n_seconds\030\n \001(\001b\006proto3", 714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/pose_graph_options.proto", &protobuf_RegisterTypes);
  PoseGraphOptions::default_instance_ = new PoseGraphOptions();
  PoseGraphOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraphOptions::kOptimizeEveryNNodesFieldNumber;
const int PoseGraphOptions::kConstraintBuilderOptionsFieldNumber;
const int PoseGraphOptions::kMatcherTranslationWeightFieldNumber;
const int PoseGraphOptions::kMatcherRotationWeightFieldNumber;
const int PoseGraphOptions::kOptimizationProblemOptionsFieldNumber;
const int PoseGraphOptions::kMaxNumFinalIterationsFieldNumber;
const int PoseGraphOptions::kGlobalSamplingRatioFieldNumber;
const int PoseGraphOptions::kLogResidualHistogramsFieldNumber;
const int PoseGraphOptions::kGlobalConstraintSearchAfterNSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraphOptions::PoseGraphOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraphOptions)
}

void PoseGraphOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  constraint_builder_options_ = const_cast< ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions*>(&::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::default_instance());
  optimization_problem_options_ = const_cast< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions*>(&::cartographer::mapping::optimization::proto::OptimizationProblemOptions::default_instance());
}

PoseGraphOptions::PoseGraphOptions(const PoseGraphOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraphOptions)
}

void PoseGraphOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  optimize_every_n_nodes_ = 0;
  constraint_builder_options_ = NULL;
  matcher_translation_weight_ = 0;
  matcher_rotation_weight_ = 0;
  optimization_problem_options_ = NULL;
  max_num_final_iterations_ = 0;
  global_sampling_ratio_ = 0;
  log_residual_histograms_ = false;
  global_constraint_search_after_n_seconds_ = 0;
}

PoseGraphOptions::~PoseGraphOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraphOptions)
  SharedDtor();
}

void PoseGraphOptions::SharedDtor() {
  if (this != default_instance_) {
    delete constraint_builder_options_;
    delete optimization_problem_options_;
  }
}

void PoseGraphOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseGraphOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoseGraphOptions_descriptor_;
}

const PoseGraphOptions& PoseGraphOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto();
  return *default_instance_;
}

PoseGraphOptions* PoseGraphOptions::default_instance_ = NULL;

PoseGraphOptions* PoseGraphOptions::New(::google::protobuf::Arena* arena) const {
  PoseGraphOptions* n = new PoseGraphOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseGraphOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraphOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PoseGraphOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PoseGraphOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(matcher_translation_weight_, matcher_rotation_weight_);
  if (GetArenaNoVirtual() == NULL && constraint_builder_options_ != NULL) delete constraint_builder_options_;
  constraint_builder_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && optimization_problem_options_ != NULL) delete optimization_problem_options_;
  optimization_problem_options_ = NULL;
  global_sampling_ratio_ = 0;
  log_residual_histograms_ = false;
  global_constraint_search_after_n_seconds_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool PoseGraphOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraphOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 optimize_every_n_nodes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optimize_every_n_nodes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_constraint_builder_options;
        break;
      }

      // optional .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
      case 3: {
        if (tag == 26) {
         parse_constraint_builder_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constraint_builder_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_optimization_problem_options;
        break;
      }

      // optional .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
      case 4: {
        if (tag == 34) {
         parse_optimization_problem_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimization_problem_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_global_sampling_ratio;
        break;
      }

      // optional double global_sampling_ratio = 5;
      case 5: {
        if (tag == 41) {
         parse_global_sampling_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_sampling_ratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_num_final_iterations;
        break;
      }

      // optional int32 max_num_final_iterations = 6;
      case 6: {
        if (tag == 48) {
         parse_max_num_final_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_final_iterations_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_matcher_translation_weight;
        break;
      }

      // optional double matcher_translation_weight = 7;
      case 7: {
        if (tag == 57) {
         parse_matcher_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matcher_translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_matcher_rotation_weight;
        break;
      }

      // optional double matcher_rotation_weight = 8;
      case 8: {
        if (tag == 65) {
         parse_matcher_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matcher_rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_log_residual_histograms;
        break;
      }

      // optional bool log_residual_histograms = 9;
      case 9: {
        if (tag == 72) {
         parse_log_residual_histograms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_residual_histograms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_global_constraint_search_after_n_seconds;
        break;
      }

      // optional double global_constraint_search_after_n_seconds = 10;
      case 10: {
        if (tag == 81) {
         parse_global_constraint_search_after_n_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_constraint_search_after_n_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraphOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraphOptions)
  return false;
#undef DO_
}

void PoseGraphOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraphOptions)
  // optional int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optimize_every_n_nodes(), output);
  }

  // optional .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->constraint_builder_options_, output);
  }

  // optional .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->optimization_problem_options_, output);
  }

  // optional double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->global_sampling_ratio(), output);
  }

  // optional int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_num_final_iterations(), output);
  }

  // optional double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->matcher_translation_weight(), output);
  }

  // optional double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->matcher_rotation_weight(), output);
  }

  // optional bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->log_residual_histograms(), output);
  }

  // optional double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->global_constraint_search_after_n_seconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraphOptions)
}

::google::protobuf::uint8* PoseGraphOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraphOptions)
  // optional int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optimize_every_n_nodes(), target);
  }

  // optional .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->constraint_builder_options_, false, target);
  }

  // optional .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->optimization_problem_options_, false, target);
  }

  // optional double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->global_sampling_ratio(), target);
  }

  // optional int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_num_final_iterations(), target);
  }

  // optional double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->matcher_translation_weight(), target);
  }

  // optional double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->matcher_rotation_weight(), target);
  }

  // optional bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->log_residual_histograms(), target);
  }

  // optional double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->global_constraint_search_after_n_seconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraphOptions)
  return target;
}

int PoseGraphOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraphOptions)
  int total_size = 0;

  // optional int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optimize_every_n_nodes());
  }

  // optional .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->constraint_builder_options_);
  }

  // optional double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->optimization_problem_options_);
  }

  // optional int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_num_final_iterations());
  }

  // optional double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    total_size += 1 + 8;
  }

  // optional bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    total_size += 1 + 1;
  }

  // optional double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseGraphOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PoseGraphOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseGraphOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraphOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraphOptions)
    MergeFrom(*source);
  }
}

void PoseGraphOptions::MergeFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.optimize_every_n_nodes() != 0) {
    set_optimize_every_n_nodes(from.optimize_every_n_nodes());
  }
  if (from.has_constraint_builder_options()) {
    mutable_constraint_builder_options()->::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::MergeFrom(from.constraint_builder_options());
  }
  if (from.matcher_translation_weight() != 0) {
    set_matcher_translation_weight(from.matcher_translation_weight());
  }
  if (from.matcher_rotation_weight() != 0) {
    set_matcher_rotation_weight(from.matcher_rotation_weight());
  }
  if (from.has_optimization_problem_options()) {
    mutable_optimization_problem_options()->::cartographer::mapping::optimization::proto::OptimizationProblemOptions::MergeFrom(from.optimization_problem_options());
  }
  if (from.max_num_final_iterations() != 0) {
    set_max_num_final_iterations(from.max_num_final_iterations());
  }
  if (from.global_sampling_ratio() != 0) {
    set_global_sampling_ratio(from.global_sampling_ratio());
  }
  if (from.log_residual_histograms() != 0) {
    set_log_residual_histograms(from.log_residual_histograms());
  }
  if (from.global_constraint_search_after_n_seconds() != 0) {
    set_global_constraint_search_after_n_seconds(from.global_constraint_search_after_n_seconds());
  }
}

void PoseGraphOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraphOptions::CopyFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraphOptions::IsInitialized() const {

  return true;
}

void PoseGraphOptions::Swap(PoseGraphOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraphOptions::InternalSwap(PoseGraphOptions* other) {
  std::swap(optimize_every_n_nodes_, other->optimize_every_n_nodes_);
  std::swap(constraint_builder_options_, other->constraint_builder_options_);
  std::swap(matcher_translation_weight_, other->matcher_translation_weight_);
  std::swap(matcher_rotation_weight_, other->matcher_rotation_weight_);
  std::swap(optimization_problem_options_, other->optimization_problem_options_);
  std::swap(max_num_final_iterations_, other->max_num_final_iterations_);
  std::swap(global_sampling_ratio_, other->global_sampling_ratio_);
  std::swap(log_residual_histograms_, other->log_residual_histograms_);
  std::swap(global_constraint_search_after_n_seconds_, other->global_constraint_search_after_n_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseGraphOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoseGraphOptions_descriptor_;
  metadata.reflection = PoseGraphOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoseGraphOptions

// optional int32 optimize_every_n_nodes = 1;
void PoseGraphOptions::clear_optimize_every_n_nodes() {
  optimize_every_n_nodes_ = 0;
}
 ::google::protobuf::int32 PoseGraphOptions::optimize_every_n_nodes() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.optimize_every_n_nodes)
  return optimize_every_n_nodes_;
}
 void PoseGraphOptions::set_optimize_every_n_nodes(::google::protobuf::int32 value) {
  
  optimize_every_n_nodes_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.optimize_every_n_nodes)
}

// optional .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
bool PoseGraphOptions::has_constraint_builder_options() const {
  return !_is_default_instance_ && constraint_builder_options_ != NULL;
}
void PoseGraphOptions::clear_constraint_builder_options() {
  if (GetArenaNoVirtual() == NULL && constraint_builder_options_ != NULL) delete constraint_builder_options_;
  constraint_builder_options_ = NULL;
}
const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& PoseGraphOptions::constraint_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  return constraint_builder_options_ != NULL ? *constraint_builder_options_ : *default_instance_->constraint_builder_options_;
}
::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::mutable_constraint_builder_options() {
  
  if (constraint_builder_options_ == NULL) {
    constraint_builder_options_ = new ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  return constraint_builder_options_;
}
::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::release_constraint_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* temp = constraint_builder_options_;
  constraint_builder_options_ = NULL;
  return temp;
}
void PoseGraphOptions::set_allocated_constraint_builder_options(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options) {
  delete constraint_builder_options_;
  constraint_builder_options_ = constraint_builder_options;
  if (constraint_builder_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
}

// optional double matcher_translation_weight = 7;
void PoseGraphOptions::clear_matcher_translation_weight() {
  matcher_translation_weight_ = 0;
}
 double PoseGraphOptions::matcher_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.matcher_translation_weight)
  return matcher_translation_weight_;
}
 void PoseGraphOptions::set_matcher_translation_weight(double value) {
  
  matcher_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.matcher_translation_weight)
}

// optional double matcher_rotation_weight = 8;
void PoseGraphOptions::clear_matcher_rotation_weight() {
  matcher_rotation_weight_ = 0;
}
 double PoseGraphOptions::matcher_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.matcher_rotation_weight)
  return matcher_rotation_weight_;
}
 void PoseGraphOptions::set_matcher_rotation_weight(double value) {
  
  matcher_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.matcher_rotation_weight)
}

// optional .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
bool PoseGraphOptions::has_optimization_problem_options() const {
  return !_is_default_instance_ && optimization_problem_options_ != NULL;
}
void PoseGraphOptions::clear_optimization_problem_options() {
  if (GetArenaNoVirtual() == NULL && optimization_problem_options_ != NULL) delete optimization_problem_options_;
  optimization_problem_options_ = NULL;
}
const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& PoseGraphOptions::optimization_problem_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  return optimization_problem_options_ != NULL ? *optimization_problem_options_ : *default_instance_->optimization_problem_options_;
}
::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::mutable_optimization_problem_options() {
  
  if (optimization_problem_options_ == NULL) {
    optimization_problem_options_ = new ::cartographer::mapping::optimization::proto::OptimizationProblemOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  return optimization_problem_options_;
}
::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::release_optimization_problem_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* temp = optimization_problem_options_;
  optimization_problem_options_ = NULL;
  return temp;
}
void PoseGraphOptions::set_allocated_optimization_problem_options(::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options) {
  delete optimization_problem_options_;
  optimization_problem_options_ = optimization_problem_options;
  if (optimization_problem_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
}

// optional int32 max_num_final_iterations = 6;
void PoseGraphOptions::clear_max_num_final_iterations() {
  max_num_final_iterations_ = 0;
}
 ::google::protobuf::int32 PoseGraphOptions::max_num_final_iterations() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.max_num_final_iterations)
  return max_num_final_iterations_;
}
 void PoseGraphOptions::set_max_num_final_iterations(::google::protobuf::int32 value) {
  
  max_num_final_iterations_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.max_num_final_iterations)
}

// optional double global_sampling_ratio = 5;
void PoseGraphOptions::clear_global_sampling_ratio() {
  global_sampling_ratio_ = 0;
}
 double PoseGraphOptions::global_sampling_ratio() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.global_sampling_ratio)
  return global_sampling_ratio_;
}
 void PoseGraphOptions::set_global_sampling_ratio(double value) {
  
  global_sampling_ratio_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.global_sampling_ratio)
}

// optional bool log_residual_histograms = 9;
void PoseGraphOptions::clear_log_residual_histograms() {
  log_residual_histograms_ = false;
}
 bool PoseGraphOptions::log_residual_histograms() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.log_residual_histograms)
  return log_residual_histograms_;
}
 void PoseGraphOptions::set_log_residual_histograms(bool value) {
  
  log_residual_histograms_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.log_residual_histograms)
}

// optional double global_constraint_search_after_n_seconds = 10;
void PoseGraphOptions::clear_global_constraint_search_after_n_seconds() {
  global_constraint_search_after_n_seconds_ = 0;
}
 double PoseGraphOptions::global_constraint_search_after_n_seconds() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.global_constraint_search_after_n_seconds)
  return global_constraint_search_after_n_seconds_;
}
 void PoseGraphOptions::set_global_constraint_search_after_n_seconds(double value) {
  
  global_constraint_search_after_n_seconds_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.global_constraint_search_after_n_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
