// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/grid_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/2d/grid_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Grid2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grid2D_reflection_ = NULL;
struct Grid2DOneofInstance {
  const ::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d_;
}* Grid2D_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Grid2D_CellBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grid2D_CellBox_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/2d/grid_2d.proto");
  GOOGLE_CHECK(file != NULL);
  Grid2D_descriptor_ = file->message_type(0);
  static const int Grid2D_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, limits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, known_cells_box_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Grid2D_default_oneof_instance_, probability_grid_2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, min_correspondence_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, max_correspondence_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, grid_),
  };
  Grid2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Grid2D_descriptor_,
      Grid2D::default_instance_,
      Grid2D_offsets_,
      -1,
      -1,
      -1,
      Grid2D_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, _oneof_case_[0]),
      sizeof(Grid2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D, _is_default_instance_));
  Grid2D_CellBox_descriptor_ = Grid2D_descriptor_->nested_type(0);
  static const int Grid2D_CellBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D_CellBox, max_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D_CellBox, max_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D_CellBox, min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D_CellBox, min_y_),
  };
  Grid2D_CellBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Grid2D_CellBox_descriptor_,
      Grid2D_CellBox::default_instance_,
      Grid2D_CellBox_offsets_,
      -1,
      -1,
      -1,
      sizeof(Grid2D_CellBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D_CellBox, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid2D_CellBox, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Grid2D_descriptor_, &Grid2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Grid2D_CellBox_descriptor_, &Grid2D_CellBox::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
  delete Grid2D::default_instance_;
  delete Grid2D_default_oneof_instance_;
  delete Grid2D_reflection_;
  delete Grid2D_CellBox::default_instance_;
  delete Grid2D_CellBox_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+cartographer/mapping/proto/2d/grid_2d."
    "proto\022\032cartographer.mapping.proto\032.carto"
    "grapher/mapping/proto/2d/map_limits.prot"
    "o\0324cartographer/mapping/proto/2d/probabi"
    "lity_grid.proto\"\360\002\n\006Grid2D\0225\n\006limits\030\001 \001"
    "(\0132%.cartographer.mapping.proto.MapLimit"
    "s\022\r\n\005cells\030\002 \003(\005\022C\n\017known_cells_box\030\003 \001("
    "\0132*.cartographer.mapping.proto.Grid2D.Ce"
    "llBox\022J\n\023probability_grid_2d\030\004 \001(\0132+.car"
    "tographer.mapping.proto.ProbabilityGridH"
    "\000\022\037\n\027min_correspondence_cost\030\006 \001(\002\022\037\n\027ma"
    "x_correspondence_cost\030\007 \001(\002\032E\n\007CellBox\022\r"
    "\n\005max_x\030\001 \001(\005\022\r\n\005max_y\030\002 \001(\005\022\r\n\005min_x\030\003 "
    "\001(\005\022\r\n\005min_y\030\004 \001(\005B\006\n\004gridb\006proto3", 554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/grid_2d.proto", &protobuf_RegisterTypes);
  Grid2D::default_instance_ = new Grid2D();
  Grid2D_default_oneof_instance_ = new Grid2DOneofInstance();
  Grid2D_CellBox::default_instance_ = new Grid2D_CellBox();
  Grid2D::default_instance_->InitAsDefaultInstance();
  Grid2D_CellBox::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid2D_CellBox::kMaxXFieldNumber;
const int Grid2D_CellBox::kMaxYFieldNumber;
const int Grid2D_CellBox::kMinXFieldNumber;
const int Grid2D_CellBox::kMinYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid2D_CellBox::Grid2D_CellBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Grid2D.CellBox)
}

void Grid2D_CellBox::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Grid2D_CellBox::Grid2D_CellBox(const Grid2D_CellBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Grid2D.CellBox)
}

void Grid2D_CellBox::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  max_x_ = 0;
  max_y_ = 0;
  min_x_ = 0;
  min_y_ = 0;
}

Grid2D_CellBox::~Grid2D_CellBox() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Grid2D.CellBox)
  SharedDtor();
}

void Grid2D_CellBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Grid2D_CellBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grid2D_CellBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grid2D_CellBox_descriptor_;
}

const Grid2D_CellBox& Grid2D_CellBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto();
  return *default_instance_;
}

Grid2D_CellBox* Grid2D_CellBox::default_instance_ = NULL;

Grid2D_CellBox* Grid2D_CellBox::New(::google::protobuf::Arena* arena) const {
  Grid2D_CellBox* n = new Grid2D_CellBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grid2D_CellBox::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Grid2D.CellBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Grid2D_CellBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Grid2D_CellBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_x_, min_y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Grid2D_CellBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Grid2D.CellBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_y;
        break;
      }

      // optional int32 max_y = 2;
      case 2: {
        if (tag == 16) {
         parse_max_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_x;
        break;
      }

      // optional int32 min_x = 3;
      case 3: {
        if (tag == 24) {
         parse_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_y;
        break;
      }

      // optional int32 min_y = 4;
      case 4: {
        if (tag == 32) {
         parse_min_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Grid2D.CellBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Grid2D.CellBox)
  return false;
#undef DO_
}

void Grid2D_CellBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Grid2D.CellBox)
  // optional int32 max_x = 1;
  if (this->max_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_x(), output);
  }

  // optional int32 max_y = 2;
  if (this->max_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_y(), output);
  }

  // optional int32 min_x = 3;
  if (this->min_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_x(), output);
  }

  // optional int32 min_y = 4;
  if (this->min_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_y(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Grid2D.CellBox)
}

::google::protobuf::uint8* Grid2D_CellBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Grid2D.CellBox)
  // optional int32 max_x = 1;
  if (this->max_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_x(), target);
  }

  // optional int32 max_y = 2;
  if (this->max_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_y(), target);
  }

  // optional int32 min_x = 3;
  if (this->min_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_x(), target);
  }

  // optional int32 min_y = 4;
  if (this->min_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Grid2D.CellBox)
  return target;
}

int Grid2D_CellBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Grid2D.CellBox)
  int total_size = 0;

  // optional int32 max_x = 1;
  if (this->max_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_x());
  }

  // optional int32 max_y = 2;
  if (this->max_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_y());
  }

  // optional int32 min_x = 3;
  if (this->min_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_x());
  }

  // optional int32 min_y = 4;
  if (this->min_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid2D_CellBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Grid2D_CellBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Grid2D_CellBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Grid2D.CellBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Grid2D.CellBox)
    MergeFrom(*source);
  }
}

void Grid2D_CellBox::MergeFrom(const Grid2D_CellBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.max_x() != 0) {
    set_max_x(from.max_x());
  }
  if (from.max_y() != 0) {
    set_max_y(from.max_y());
  }
  if (from.min_x() != 0) {
    set_min_x(from.min_x());
  }
  if (from.min_y() != 0) {
    set_min_y(from.min_y());
  }
}

void Grid2D_CellBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid2D_CellBox::CopyFrom(const Grid2D_CellBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D_CellBox::IsInitialized() const {

  return true;
}

void Grid2D_CellBox::Swap(Grid2D_CellBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid2D_CellBox::InternalSwap(Grid2D_CellBox* other) {
  std::swap(max_x_, other->max_x_);
  std::swap(max_y_, other->max_y_);
  std::swap(min_x_, other->min_x_);
  std::swap(min_y_, other->min_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grid2D_CellBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grid2D_CellBox_descriptor_;
  metadata.reflection = Grid2D_CellBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid2D::kLimitsFieldNumber;
const int Grid2D::kCellsFieldNumber;
const int Grid2D::kKnownCellsBoxFieldNumber;
const int Grid2D::kProbabilityGrid2DFieldNumber;
const int Grid2D::kMinCorrespondenceCostFieldNumber;
const int Grid2D::kMaxCorrespondenceCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid2D::Grid2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Grid2D)
}

void Grid2D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  limits_ = const_cast< ::cartographer::mapping::proto::MapLimits*>(&::cartographer::mapping::proto::MapLimits::default_instance());
  known_cells_box_ = const_cast< ::cartographer::mapping::proto::Grid2D_CellBox*>(&::cartographer::mapping::proto::Grid2D_CellBox::default_instance());
  Grid2D_default_oneof_instance_->probability_grid_2d_ = const_cast< ::cartographer::mapping::proto::ProbabilityGrid*>(&::cartographer::mapping::proto::ProbabilityGrid::default_instance());
}

Grid2D::Grid2D(const Grid2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Grid2D)
}

void Grid2D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  limits_ = NULL;
  known_cells_box_ = NULL;
  min_correspondence_cost_ = 0;
  max_correspondence_cost_ = 0;
  clear_has_grid();
}

Grid2D::~Grid2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Grid2D)
  SharedDtor();
}

void Grid2D::SharedDtor() {
  if (has_grid()) {
    clear_grid();
  }
  if (this != default_instance_) {
    delete limits_;
    delete known_cells_box_;
  }
}

void Grid2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grid2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grid2D_descriptor_;
}

const Grid2D& Grid2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto();
  return *default_instance_;
}

Grid2D* Grid2D::default_instance_ = NULL;

Grid2D* Grid2D::New(::google::protobuf::Arena* arena) const {
  Grid2D* n = new Grid2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grid2D::clear_grid() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.mapping.proto.Grid2D)
  switch(grid_case()) {
    case kProbabilityGrid2D: {
      delete grid_.probability_grid_2d_;
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GRID_NOT_SET;
}


void Grid2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Grid2D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Grid2D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Grid2D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_correspondence_cost_, max_correspondence_cost_);
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) delete limits_;
  limits_ = NULL;
  if (GetArenaNoVirtual() == NULL && known_cells_box_ != NULL) delete known_cells_box_;
  known_cells_box_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  cells_.Clear();
  clear_grid();
}

bool Grid2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Grid2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.MapLimits limits = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cells;
        break;
      }

      // repeated int32 cells = 2;
      case 2: {
        if (tag == 18) {
         parse_cells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cells())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_cells())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_known_cells_box;
        break;
      }

      // optional .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
      case 3: {
        if (tag == 26) {
         parse_known_cells_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_known_cells_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_probability_grid_2d;
        break;
      }

      // optional .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
      case 4: {
        if (tag == 34) {
         parse_probability_grid_2d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_probability_grid_2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_min_correspondence_cost;
        break;
      }

      // optional float min_correspondence_cost = 6;
      case 6: {
        if (tag == 53) {
         parse_min_correspondence_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_correspondence_cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_max_correspondence_cost;
        break;
      }

      // optional float max_correspondence_cost = 7;
      case 7: {
        if (tag == 61) {
         parse_max_correspondence_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_correspondence_cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Grid2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Grid2D)
  return false;
#undef DO_
}

void Grid2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Grid2D)
  // optional .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->limits_, output);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cells_cached_byte_size_);
  }
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cells(i), output);
  }

  // optional .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->known_cells_box_, output);
  }

  // optional .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
  if (has_probability_grid_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *grid_.probability_grid_2d_, output);
  }

  // optional float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min_correspondence_cost(), output);
  }

  // optional float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_correspondence_cost(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Grid2D)
}

::google::protobuf::uint8* Grid2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Grid2D)
  // optional .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->limits_, false, target);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cells_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cells(i), target);
  }

  // optional .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->known_cells_box_, false, target);
  }

  // optional .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
  if (has_probability_grid_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *grid_.probability_grid_2d_, false, target);
  }

  // optional float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min_correspondence_cost(), target);
  }

  // optional float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_correspondence_cost(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Grid2D)
  return target;
}

int Grid2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Grid2D)
  int total_size = 0;

  // optional .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->limits_);
  }

  // optional .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->known_cells_box_);
  }

  // optional float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    total_size += 1 + 4;
  }

  // optional float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    total_size += 1 + 4;
  }

  // repeated int32 cells = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cells_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cells(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cells_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (grid_case()) {
    // optional .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
    case kProbabilityGrid2D: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *grid_.probability_grid_2d_);
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Grid2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Grid2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Grid2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Grid2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Grid2D)
    MergeFrom(*source);
  }
}

void Grid2D::MergeFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Grid2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cells_.MergeFrom(from.cells_);
  switch (from.grid_case()) {
    case kProbabilityGrid2D: {
      mutable_probability_grid_2d()->::cartographer::mapping::proto::ProbabilityGrid::MergeFrom(from.probability_grid_2d());
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  if (from.has_limits()) {
    mutable_limits()->::cartographer::mapping::proto::MapLimits::MergeFrom(from.limits());
  }
  if (from.has_known_cells_box()) {
    mutable_known_cells_box()->::cartographer::mapping::proto::Grid2D_CellBox::MergeFrom(from.known_cells_box());
  }
  if (from.min_correspondence_cost() != 0) {
    set_min_correspondence_cost(from.min_correspondence_cost());
  }
  if (from.max_correspondence_cost() != 0) {
    set_max_correspondence_cost(from.max_correspondence_cost());
  }
}

void Grid2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid2D::CopyFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D::IsInitialized() const {

  return true;
}

void Grid2D::Swap(Grid2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid2D::InternalSwap(Grid2D* other) {
  std::swap(limits_, other->limits_);
  cells_.UnsafeArenaSwap(&other->cells_);
  std::swap(known_cells_box_, other->known_cells_box_);
  std::swap(min_correspondence_cost_, other->min_correspondence_cost_);
  std::swap(max_correspondence_cost_, other->max_correspondence_cost_);
  std::swap(grid_, other->grid_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grid2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grid2D_descriptor_;
  metadata.reflection = Grid2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grid2D_CellBox

// optional int32 max_x = 1;
void Grid2D_CellBox::clear_max_x() {
  max_x_ = 0;
}
 ::google::protobuf::int32 Grid2D_CellBox::max_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.max_x)
  return max_x_;
}
 void Grid2D_CellBox::set_max_x(::google::protobuf::int32 value) {
  
  max_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.max_x)
}

// optional int32 max_y = 2;
void Grid2D_CellBox::clear_max_y() {
  max_y_ = 0;
}
 ::google::protobuf::int32 Grid2D_CellBox::max_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.max_y)
  return max_y_;
}
 void Grid2D_CellBox::set_max_y(::google::protobuf::int32 value) {
  
  max_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.max_y)
}

// optional int32 min_x = 3;
void Grid2D_CellBox::clear_min_x() {
  min_x_ = 0;
}
 ::google::protobuf::int32 Grid2D_CellBox::min_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.min_x)
  return min_x_;
}
 void Grid2D_CellBox::set_min_x(::google::protobuf::int32 value) {
  
  min_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.min_x)
}

// optional int32 min_y = 4;
void Grid2D_CellBox::clear_min_y() {
  min_y_ = 0;
}
 ::google::protobuf::int32 Grid2D_CellBox::min_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.CellBox.min_y)
  return min_y_;
}
 void Grid2D_CellBox::set_min_y(::google::protobuf::int32 value) {
  
  min_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.CellBox.min_y)
}

// -------------------------------------------------------------------

// Grid2D

// optional .cartographer.mapping.proto.MapLimits limits = 1;
bool Grid2D::has_limits() const {
  return !_is_default_instance_ && limits_ != NULL;
}
void Grid2D::clear_limits() {
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) delete limits_;
  limits_ = NULL;
}
const ::cartographer::mapping::proto::MapLimits& Grid2D::limits() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.limits)
  return limits_ != NULL ? *limits_ : *default_instance_->limits_;
}
::cartographer::mapping::proto::MapLimits* Grid2D::mutable_limits() {
  
  if (limits_ == NULL) {
    limits_ = new ::cartographer::mapping::proto::MapLimits;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Grid2D.limits)
  return limits_;
}
::cartographer::mapping::proto::MapLimits* Grid2D::release_limits() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Grid2D.limits)
  
  ::cartographer::mapping::proto::MapLimits* temp = limits_;
  limits_ = NULL;
  return temp;
}
void Grid2D::set_allocated_limits(::cartographer::mapping::proto::MapLimits* limits) {
  delete limits_;
  limits_ = limits;
  if (limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.limits)
}

// repeated int32 cells = 2;
int Grid2D::cells_size() const {
  return cells_.size();
}
void Grid2D::clear_cells() {
  cells_.Clear();
}
 ::google::protobuf::int32 Grid2D::cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.cells)
  return cells_.Get(index);
}
 void Grid2D::set_cells(int index, ::google::protobuf::int32 value) {
  cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.cells)
}
 void Grid2D::add_cells(::google::protobuf::int32 value) {
  cells_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Grid2D.cells)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Grid2D::cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Grid2D.cells)
  return cells_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Grid2D::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Grid2D.cells)
  return &cells_;
}

// optional .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
bool Grid2D::has_known_cells_box() const {
  return !_is_default_instance_ && known_cells_box_ != NULL;
}
void Grid2D::clear_known_cells_box() {
  if (GetArenaNoVirtual() == NULL && known_cells_box_ != NULL) delete known_cells_box_;
  known_cells_box_ = NULL;
}
const ::cartographer::mapping::proto::Grid2D_CellBox& Grid2D::known_cells_box() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.known_cells_box)
  return known_cells_box_ != NULL ? *known_cells_box_ : *default_instance_->known_cells_box_;
}
::cartographer::mapping::proto::Grid2D_CellBox* Grid2D::mutable_known_cells_box() {
  
  if (known_cells_box_ == NULL) {
    known_cells_box_ = new ::cartographer::mapping::proto::Grid2D_CellBox;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Grid2D.known_cells_box)
  return known_cells_box_;
}
::cartographer::mapping::proto::Grid2D_CellBox* Grid2D::release_known_cells_box() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Grid2D.known_cells_box)
  
  ::cartographer::mapping::proto::Grid2D_CellBox* temp = known_cells_box_;
  known_cells_box_ = NULL;
  return temp;
}
void Grid2D::set_allocated_known_cells_box(::cartographer::mapping::proto::Grid2D_CellBox* known_cells_box) {
  delete known_cells_box_;
  known_cells_box_ = known_cells_box;
  if (known_cells_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.known_cells_box)
}

// optional .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
bool Grid2D::has_probability_grid_2d() const {
  return grid_case() == kProbabilityGrid2D;
}
void Grid2D::set_has_probability_grid_2d() {
  _oneof_case_[0] = kProbabilityGrid2D;
}
void Grid2D::clear_probability_grid_2d() {
  if (has_probability_grid_2d()) {
    delete grid_.probability_grid_2d_;
    clear_has_grid();
  }
}
 const ::cartographer::mapping::proto::ProbabilityGrid& Grid2D::probability_grid_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.probability_grid_2d)
  return has_probability_grid_2d()
      ? *grid_.probability_grid_2d_
      : ::cartographer::mapping::proto::ProbabilityGrid::default_instance();
}
::cartographer::mapping::proto::ProbabilityGrid* Grid2D::mutable_probability_grid_2d() {
  if (!has_probability_grid_2d()) {
    clear_grid();
    set_has_probability_grid_2d();
    grid_.probability_grid_2d_ = new ::cartographer::mapping::proto::ProbabilityGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Grid2D.probability_grid_2d)
  return grid_.probability_grid_2d_;
}
::cartographer::mapping::proto::ProbabilityGrid* Grid2D::release_probability_grid_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Grid2D.probability_grid_2d)
  if (has_probability_grid_2d()) {
    clear_has_grid();
    ::cartographer::mapping::proto::ProbabilityGrid* temp = grid_.probability_grid_2d_;
    grid_.probability_grid_2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Grid2D::set_allocated_probability_grid_2d(::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d) {
  clear_grid();
  if (probability_grid_2d) {
    set_has_probability_grid_2d();
    grid_.probability_grid_2d_ = probability_grid_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.probability_grid_2d)
}

// optional float min_correspondence_cost = 6;
void Grid2D::clear_min_correspondence_cost() {
  min_correspondence_cost_ = 0;
}
 float Grid2D::min_correspondence_cost() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.min_correspondence_cost)
  return min_correspondence_cost_;
}
 void Grid2D::set_min_correspondence_cost(float value) {
  
  min_correspondence_cost_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.min_correspondence_cost)
}

// optional float max_correspondence_cost = 7;
void Grid2D::clear_max_correspondence_cost() {
  max_correspondence_cost_ = 0;
}
 float Grid2D::max_correspondence_cost() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Grid2D.max_correspondence_cost)
  return max_correspondence_cost_;
}
 void Grid2D::set_max_correspondence_cost(float value) {
  
  max_correspondence_cost_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Grid2D.max_correspondence_cost)
}

bool Grid2D::has_grid() const {
  return grid_case() != GRID_NOT_SET;
}
void Grid2D::clear_has_grid() {
  _oneof_case_[0] = GRID_NOT_SET;
}
Grid2D::GridCase Grid2D::grid_case() const {
  return Grid2D::GridCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
