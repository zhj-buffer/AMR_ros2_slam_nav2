// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/map_limits.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/2d/map_limits.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MapLimits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapLimits_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/2d/map_limits.proto");
  GOOGLE_CHECK(file != NULL);
  MapLimits_descriptor_ = file->message_type(0);
  static const int MapLimits_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, cell_limits_),
  };
  MapLimits_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapLimits_descriptor_,
      MapLimits::default_instance_,
      MapLimits_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapLimits),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLimits, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapLimits_descriptor_, &MapLimits::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() {
  delete MapLimits::default_instance_;
  delete MapLimits_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fcell_5flimits_2eproto();
  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.cartographer/mapping/proto/2d/map_limi"
    "ts.proto\022\032cartographer.mapping.proto\032/ca"
    "rtographer/mapping/proto/2d/cell_limits."
    "proto\032,cartographer/transform/proto/tran"
    "sform.proto\"\221\001\n\tMapLimits\022\022\n\nresolution\030"
    "\001 \001(\001\0223\n\003max\030\002 \001(\0132&.cartographer.transf"
    "orm.proto.Vector2d\022;\n\013cell_limits\030\003 \001(\0132"
    "&.cartographer.mapping.proto.CellLimitsb"
    "\006proto3", 327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/map_limits.proto", &protobuf_RegisterTypes);
  MapLimits::default_instance_ = new MapLimits();
  MapLimits::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapLimits::kResolutionFieldNumber;
const int MapLimits::kMaxFieldNumber;
const int MapLimits::kCellLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapLimits::MapLimits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.MapLimits)
}

void MapLimits::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  max_ = const_cast< ::cartographer::transform::proto::Vector2d*>(&::cartographer::transform::proto::Vector2d::default_instance());
  cell_limits_ = const_cast< ::cartographer::mapping::proto::CellLimits*>(&::cartographer::mapping::proto::CellLimits::default_instance());
}

MapLimits::MapLimits(const MapLimits& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MapLimits)
}

void MapLimits::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  resolution_ = 0;
  max_ = NULL;
  cell_limits_ = NULL;
}

MapLimits::~MapLimits() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MapLimits)
  SharedDtor();
}

void MapLimits::SharedDtor() {
  if (this != default_instance_) {
    delete max_;
    delete cell_limits_;
  }
}

void MapLimits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapLimits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapLimits_descriptor_;
}

const MapLimits& MapLimits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto();
  return *default_instance_;
}

MapLimits* MapLimits::default_instance_ = NULL;

MapLimits* MapLimits::New(::google::protobuf::Arena* arena) const {
  MapLimits* n = new MapLimits;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MapLimits)
  resolution_ = 0;
  if (GetArenaNoVirtual() == NULL && max_ != NULL) delete max_;
  max_ = NULL;
  if (GetArenaNoVirtual() == NULL && cell_limits_ != NULL) delete cell_limits_;
  cell_limits_ = NULL;
}

bool MapLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.MapLimits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double resolution = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_max;
        break;
      }

      // optional .cartographer.transform.proto.Vector2d max = 2;
      case 2: {
        if (tag == 18) {
         parse_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cell_limits;
        break;
      }

      // optional .cartographer.mapping.proto.CellLimits cell_limits = 3;
      case 3: {
        if (tag == 26) {
         parse_cell_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_limits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.MapLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.MapLimits)
  return false;
#undef DO_
}

void MapLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.MapLimits)
  // optional double resolution = 1;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->resolution(), output);
  }

  // optional .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->max_, output);
  }

  // optional .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cell_limits_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.MapLimits)
}

::google::protobuf::uint8* MapLimits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MapLimits)
  // optional double resolution = 1;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->resolution(), target);
  }

  // optional .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->max_, false, target);
  }

  // optional .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cell_limits_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MapLimits)
  return target;
}

int MapLimits::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MapLimits)
  int total_size = 0;

  // optional double resolution = 1;
  if (this->resolution() != 0) {
    total_size += 1 + 8;
  }

  // optional .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_);
  }

  // optional .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cell_limits_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapLimits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.MapLimits)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapLimits* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapLimits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.MapLimits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.MapLimits)
    MergeFrom(*source);
  }
}

void MapLimits::MergeFrom(const MapLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MapLimits)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.has_max()) {
    mutable_max()->::cartographer::transform::proto::Vector2d::MergeFrom(from.max());
  }
  if (from.has_cell_limits()) {
    mutable_cell_limits()->::cartographer::mapping::proto::CellLimits::MergeFrom(from.cell_limits());
  }
}

void MapLimits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.MapLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLimits::CopyFrom(const MapLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MapLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLimits::IsInitialized() const {

  return true;
}

void MapLimits::Swap(MapLimits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapLimits::InternalSwap(MapLimits* other) {
  std::swap(resolution_, other->resolution_);
  std::swap(max_, other->max_);
  std::swap(cell_limits_, other->cell_limits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapLimits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapLimits_descriptor_;
  metadata.reflection = MapLimits_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapLimits

// optional double resolution = 1;
void MapLimits::clear_resolution() {
  resolution_ = 0;
}
 double MapLimits::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapLimits.resolution)
  return resolution_;
}
 void MapLimits::set_resolution(double value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.MapLimits.resolution)
}

// optional .cartographer.transform.proto.Vector2d max = 2;
bool MapLimits::has_max() const {
  return !_is_default_instance_ && max_ != NULL;
}
void MapLimits::clear_max() {
  if (GetArenaNoVirtual() == NULL && max_ != NULL) delete max_;
  max_ = NULL;
}
const ::cartographer::transform::proto::Vector2d& MapLimits::max() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapLimits.max)
  return max_ != NULL ? *max_ : *default_instance_->max_;
}
::cartographer::transform::proto::Vector2d* MapLimits::mutable_max() {
  
  if (max_ == NULL) {
    max_ = new ::cartographer::transform::proto::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.MapLimits.max)
  return max_;
}
::cartographer::transform::proto::Vector2d* MapLimits::release_max() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.MapLimits.max)
  
  ::cartographer::transform::proto::Vector2d* temp = max_;
  max_ = NULL;
  return temp;
}
void MapLimits::set_allocated_max(::cartographer::transform::proto::Vector2d* max) {
  delete max_;
  max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.MapLimits.max)
}

// optional .cartographer.mapping.proto.CellLimits cell_limits = 3;
bool MapLimits::has_cell_limits() const {
  return !_is_default_instance_ && cell_limits_ != NULL;
}
void MapLimits::clear_cell_limits() {
  if (GetArenaNoVirtual() == NULL && cell_limits_ != NULL) delete cell_limits_;
  cell_limits_ = NULL;
}
const ::cartographer::mapping::proto::CellLimits& MapLimits::cell_limits() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.MapLimits.cell_limits)
  return cell_limits_ != NULL ? *cell_limits_ : *default_instance_->cell_limits_;
}
::cartographer::mapping::proto::CellLimits* MapLimits::mutable_cell_limits() {
  
  if (cell_limits_ == NULL) {
    cell_limits_ = new ::cartographer::mapping::proto::CellLimits;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.MapLimits.cell_limits)
  return cell_limits_;
}
::cartographer::mapping::proto::CellLimits* MapLimits::release_cell_limits() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.MapLimits.cell_limits)
  
  ::cartographer::mapping::proto::CellLimits* temp = cell_limits_;
  cell_limits_ = NULL;
  return temp;
}
void MapLimits::set_allocated_cell_limits(::cartographer::mapping::proto::CellLimits* cell_limits) {
  delete cell_limits_;
  cell_limits_ = cell_limits;
  if (cell_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.MapLimits.cell_limits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
