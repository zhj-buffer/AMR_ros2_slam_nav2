// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/submaps_options_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/2d/submaps_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SubmapsOptions2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapsOptions2D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/2d/submaps_options_2d.proto");
  GOOGLE_CHECK(file != NULL);
  SubmapsOptions2D_descriptor_ = file->message_type(0);
  static const int SubmapsOptions2D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapsOptions2D, num_range_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapsOptions2D, grid_options_2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapsOptions2D, range_data_inserter_options_),
  };
  SubmapsOptions2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapsOptions2D_descriptor_,
      SubmapsOptions2D::default_instance_,
      SubmapsOptions2D_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapsOptions2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapsOptions2D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapsOptions2D, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapsOptions2D_descriptor_, &SubmapsOptions2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto() {
  delete SubmapsOptions2D::default_instance_;
  delete SubmapsOptions2D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n6cartographer/mapping/proto/2d/submaps_"
    "options_2d.proto\022\032cartographer.mapping.p"
    "roto\0323cartographer/mapping/proto/2d/grid"
    "_2d_options.proto\032<cartographer/mapping/"
    "proto/range_data_inserter_options.proto\""
    "\311\001\n\020SubmapsOptions2D\022\026\n\016num_range_data\030\001"
    " \001(\005\022B\n\017grid_options_2d\030\002 \001(\0132).cartogra"
    "pher.mapping.proto.GridOptions2D\022Y\n\033rang"
    "e_data_inserter_options\030\003 \001(\01324.cartogra"
    "pher.mapping.proto.RangeDataInserterOpti"
    "onsb\006proto3", 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/submaps_options_2d.proto", &protobuf_RegisterTypes);
  SubmapsOptions2D::default_instance_ = new SubmapsOptions2D();
  SubmapsOptions2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapsOptions2D::kNumRangeDataFieldNumber;
const int SubmapsOptions2D::kGridOptions2DFieldNumber;
const int SubmapsOptions2D::kRangeDataInserterOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapsOptions2D::SubmapsOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapsOptions2D)
}

void SubmapsOptions2D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  grid_options_2d_ = const_cast< ::cartographer::mapping::proto::GridOptions2D*>(&::cartographer::mapping::proto::GridOptions2D::default_instance());
  range_data_inserter_options_ = const_cast< ::cartographer::mapping::proto::RangeDataInserterOptions*>(&::cartographer::mapping::proto::RangeDataInserterOptions::default_instance());
}

SubmapsOptions2D::SubmapsOptions2D(const SubmapsOptions2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapsOptions2D)
}

void SubmapsOptions2D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_range_data_ = 0;
  grid_options_2d_ = NULL;
  range_data_inserter_options_ = NULL;
}

SubmapsOptions2D::~SubmapsOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapsOptions2D)
  SharedDtor();
}

void SubmapsOptions2D::SharedDtor() {
  if (this != default_instance_) {
    delete grid_options_2d_;
    delete range_data_inserter_options_;
  }
}

void SubmapsOptions2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapsOptions2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapsOptions2D_descriptor_;
}

const SubmapsOptions2D& SubmapsOptions2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto();
  return *default_instance_;
}

SubmapsOptions2D* SubmapsOptions2D::default_instance_ = NULL;

SubmapsOptions2D* SubmapsOptions2D::New(::google::protobuf::Arena* arena) const {
  SubmapsOptions2D* n = new SubmapsOptions2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapsOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapsOptions2D)
  num_range_data_ = 0;
  if (GetArenaNoVirtual() == NULL && grid_options_2d_ != NULL) delete grid_options_2d_;
  grid_options_2d_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_data_inserter_options_ != NULL) delete range_data_inserter_options_;
  range_data_inserter_options_ = NULL;
}

bool SubmapsOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapsOptions2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_range_data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_grid_options_2d;
        break;
      }

      // optional .cartographer.mapping.proto.GridOptions2D grid_options_2d = 2;
      case 2: {
        if (tag == 18) {
         parse_grid_options_2d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid_options_2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_range_data_inserter_options;
        break;
      }

      // optional .cartographer.mapping.proto.RangeDataInserterOptions range_data_inserter_options = 3;
      case 3: {
        if (tag == 26) {
         parse_range_data_inserter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_data_inserter_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapsOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapsOptions2D)
  return false;
#undef DO_
}

void SubmapsOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapsOptions2D)
  // optional int32 num_range_data = 1;
  if (this->num_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_range_data(), output);
  }

  // optional .cartographer.mapping.proto.GridOptions2D grid_options_2d = 2;
  if (this->has_grid_options_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->grid_options_2d_, output);
  }

  // optional .cartographer.mapping.proto.RangeDataInserterOptions range_data_inserter_options = 3;
  if (this->has_range_data_inserter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_data_inserter_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapsOptions2D)
}

::google::protobuf::uint8* SubmapsOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapsOptions2D)
  // optional int32 num_range_data = 1;
  if (this->num_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_range_data(), target);
  }

  // optional .cartographer.mapping.proto.GridOptions2D grid_options_2d = 2;
  if (this->has_grid_options_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->grid_options_2d_, false, target);
  }

  // optional .cartographer.mapping.proto.RangeDataInserterOptions range_data_inserter_options = 3;
  if (this->has_range_data_inserter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->range_data_inserter_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapsOptions2D)
  return target;
}

int SubmapsOptions2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapsOptions2D)
  int total_size = 0;

  // optional int32 num_range_data = 1;
  if (this->num_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_range_data());
  }

  // optional .cartographer.mapping.proto.GridOptions2D grid_options_2d = 2;
  if (this->has_grid_options_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->grid_options_2d_);
  }

  // optional .cartographer.mapping.proto.RangeDataInserterOptions range_data_inserter_options = 3;
  if (this->has_range_data_inserter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_data_inserter_options_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapsOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapsOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapsOptions2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapsOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapsOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapsOptions2D)
    MergeFrom(*source);
  }
}

void SubmapsOptions2D::MergeFrom(const SubmapsOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapsOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_range_data() != 0) {
    set_num_range_data(from.num_range_data());
  }
  if (from.has_grid_options_2d()) {
    mutable_grid_options_2d()->::cartographer::mapping::proto::GridOptions2D::MergeFrom(from.grid_options_2d());
  }
  if (from.has_range_data_inserter_options()) {
    mutable_range_data_inserter_options()->::cartographer::mapping::proto::RangeDataInserterOptions::MergeFrom(from.range_data_inserter_options());
  }
}

void SubmapsOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapsOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapsOptions2D::CopyFrom(const SubmapsOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapsOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapsOptions2D::IsInitialized() const {

  return true;
}

void SubmapsOptions2D::Swap(SubmapsOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapsOptions2D::InternalSwap(SubmapsOptions2D* other) {
  std::swap(num_range_data_, other->num_range_data_);
  std::swap(grid_options_2d_, other->grid_options_2d_);
  std::swap(range_data_inserter_options_, other->range_data_inserter_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapsOptions2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapsOptions2D_descriptor_;
  metadata.reflection = SubmapsOptions2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapsOptions2D

// optional int32 num_range_data = 1;
void SubmapsOptions2D::clear_num_range_data() {
  num_range_data_ = 0;
}
 ::google::protobuf::int32 SubmapsOptions2D::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapsOptions2D.num_range_data)
  return num_range_data_;
}
 void SubmapsOptions2D::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapsOptions2D.num_range_data)
}

// optional .cartographer.mapping.proto.GridOptions2D grid_options_2d = 2;
bool SubmapsOptions2D::has_grid_options_2d() const {
  return !_is_default_instance_ && grid_options_2d_ != NULL;
}
void SubmapsOptions2D::clear_grid_options_2d() {
  if (GetArenaNoVirtual() == NULL && grid_options_2d_ != NULL) delete grid_options_2d_;
  grid_options_2d_ = NULL;
}
const ::cartographer::mapping::proto::GridOptions2D& SubmapsOptions2D::grid_options_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapsOptions2D.grid_options_2d)
  return grid_options_2d_ != NULL ? *grid_options_2d_ : *default_instance_->grid_options_2d_;
}
::cartographer::mapping::proto::GridOptions2D* SubmapsOptions2D::mutable_grid_options_2d() {
  
  if (grid_options_2d_ == NULL) {
    grid_options_2d_ = new ::cartographer::mapping::proto::GridOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapsOptions2D.grid_options_2d)
  return grid_options_2d_;
}
::cartographer::mapping::proto::GridOptions2D* SubmapsOptions2D::release_grid_options_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapsOptions2D.grid_options_2d)
  
  ::cartographer::mapping::proto::GridOptions2D* temp = grid_options_2d_;
  grid_options_2d_ = NULL;
  return temp;
}
void SubmapsOptions2D::set_allocated_grid_options_2d(::cartographer::mapping::proto::GridOptions2D* grid_options_2d) {
  delete grid_options_2d_;
  grid_options_2d_ = grid_options_2d;
  if (grid_options_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapsOptions2D.grid_options_2d)
}

// optional .cartographer.mapping.proto.RangeDataInserterOptions range_data_inserter_options = 3;
bool SubmapsOptions2D::has_range_data_inserter_options() const {
  return !_is_default_instance_ && range_data_inserter_options_ != NULL;
}
void SubmapsOptions2D::clear_range_data_inserter_options() {
  if (GetArenaNoVirtual() == NULL && range_data_inserter_options_ != NULL) delete range_data_inserter_options_;
  range_data_inserter_options_ = NULL;
}
const ::cartographer::mapping::proto::RangeDataInserterOptions& SubmapsOptions2D::range_data_inserter_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapsOptions2D.range_data_inserter_options)
  return range_data_inserter_options_ != NULL ? *range_data_inserter_options_ : *default_instance_->range_data_inserter_options_;
}
::cartographer::mapping::proto::RangeDataInserterOptions* SubmapsOptions2D::mutable_range_data_inserter_options() {
  
  if (range_data_inserter_options_ == NULL) {
    range_data_inserter_options_ = new ::cartographer::mapping::proto::RangeDataInserterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapsOptions2D.range_data_inserter_options)
  return range_data_inserter_options_;
}
::cartographer::mapping::proto::RangeDataInserterOptions* SubmapsOptions2D::release_range_data_inserter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapsOptions2D.range_data_inserter_options)
  
  ::cartographer::mapping::proto::RangeDataInserterOptions* temp = range_data_inserter_options_;
  range_data_inserter_options_ = NULL;
  return temp;
}
void SubmapsOptions2D::set_allocated_range_data_inserter_options(::cartographer::mapping::proto::RangeDataInserterOptions* range_data_inserter_options) {
  delete range_data_inserter_options_;
  range_data_inserter_options_ = range_data_inserter_options;
  if (range_data_inserter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapsOptions2D.range_data_inserter_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
