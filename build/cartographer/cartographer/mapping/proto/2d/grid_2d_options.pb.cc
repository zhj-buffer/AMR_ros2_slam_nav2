// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/grid_2d_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/2d/grid_2d_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* GridOptions2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridOptions2D_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GridOptions2D_GridType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/2d/grid_2d_options.proto");
  GOOGLE_CHECK(file != NULL);
  GridOptions2D_descriptor_ = file->message_type(0);
  static const int GridOptions2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridOptions2D, grid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridOptions2D, resolution_),
  };
  GridOptions2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GridOptions2D_descriptor_,
      GridOptions2D::default_instance_,
      GridOptions2D_offsets_,
      -1,
      -1,
      -1,
      sizeof(GridOptions2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridOptions2D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridOptions2D, _is_default_instance_));
  GridOptions2D_GridType_descriptor_ = GridOptions2D_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GridOptions2D_descriptor_, &GridOptions2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto() {
  delete GridOptions2D::default_instance_;
  delete GridOptions2D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3cartographer/mapping/proto/2d/grid_2d_"
    "options.proto\022\032cartographer.mapping.prot"
    "o\"\236\001\n\rGridOptions2D\022E\n\tgrid_type\030\001 \001(\01622"
    ".cartographer.mapping.proto.GridOptions2"
    "D.GridType\022\022\n\nresolution\030\002 \001(\002\"2\n\010GridTy"
    "pe\022\020\n\014INVALID_GRID\020\000\022\024\n\020PROBABILITY_GRID"
    "\020\001b\006proto3", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/grid_2d_options.proto", &protobuf_RegisterTypes);
  GridOptions2D::default_instance_ = new GridOptions2D();
  GridOptions2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GridOptions2D_GridType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridOptions2D_GridType_descriptor_;
}
bool GridOptions2D_GridType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GridOptions2D_GridType GridOptions2D::INVALID_GRID;
const GridOptions2D_GridType GridOptions2D::PROBABILITY_GRID;
const GridOptions2D_GridType GridOptions2D::GridType_MIN;
const GridOptions2D_GridType GridOptions2D::GridType_MAX;
const int GridOptions2D::GridType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridOptions2D::kGridTypeFieldNumber;
const int GridOptions2D::kResolutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridOptions2D::GridOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.GridOptions2D)
}

void GridOptions2D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GridOptions2D::GridOptions2D(const GridOptions2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.GridOptions2D)
}

void GridOptions2D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  grid_type_ = 0;
  resolution_ = 0;
}

GridOptions2D::~GridOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.GridOptions2D)
  SharedDtor();
}

void GridOptions2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridOptions2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridOptions2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridOptions2D_descriptor_;
}

const GridOptions2D& GridOptions2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_5foptions_2eproto();
  return *default_instance_;
}

GridOptions2D* GridOptions2D::default_instance_ = NULL;

GridOptions2D* GridOptions2D::New(::google::protobuf::Arena* arena) const {
  GridOptions2D* n = new GridOptions2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.GridOptions2D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GridOptions2D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GridOptions2D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(grid_type_, resolution_);

#undef ZR_HELPER_
#undef ZR_

}

bool GridOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.GridOptions2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.GridOptions2D.GridType grid_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_grid_type(static_cast< ::cartographer::mapping::proto::GridOptions2D_GridType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_resolution;
        break;
      }

      // optional float resolution = 2;
      case 2: {
        if (tag == 21) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resolution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.GridOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.GridOptions2D)
  return false;
#undef DO_
}

void GridOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.GridOptions2D)
  // optional .cartographer.mapping.proto.GridOptions2D.GridType grid_type = 1;
  if (this->grid_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->grid_type(), output);
  }

  // optional float resolution = 2;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->resolution(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.GridOptions2D)
}

::google::protobuf::uint8* GridOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.GridOptions2D)
  // optional .cartographer.mapping.proto.GridOptions2D.GridType grid_type = 1;
  if (this->grid_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->grid_type(), target);
  }

  // optional float resolution = 2;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->resolution(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.GridOptions2D)
  return target;
}

int GridOptions2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.GridOptions2D)
  int total_size = 0;

  // optional .cartographer.mapping.proto.GridOptions2D.GridType grid_type = 1;
  if (this->grid_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->grid_type());
  }

  // optional float resolution = 2;
  if (this->resolution() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.GridOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GridOptions2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GridOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.GridOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.GridOptions2D)
    MergeFrom(*source);
  }
}

void GridOptions2D::MergeFrom(const GridOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.GridOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.grid_type() != 0) {
    set_grid_type(from.grid_type());
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
}

void GridOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.GridOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridOptions2D::CopyFrom(const GridOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.GridOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridOptions2D::IsInitialized() const {

  return true;
}

void GridOptions2D::Swap(GridOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridOptions2D::InternalSwap(GridOptions2D* other) {
  std::swap(grid_type_, other->grid_type_);
  std::swap(resolution_, other->resolution_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GridOptions2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridOptions2D_descriptor_;
  metadata.reflection = GridOptions2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GridOptions2D

// optional .cartographer.mapping.proto.GridOptions2D.GridType grid_type = 1;
void GridOptions2D::clear_grid_type() {
  grid_type_ = 0;
}
 ::cartographer::mapping::proto::GridOptions2D_GridType GridOptions2D::grid_type() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GridOptions2D.grid_type)
  return static_cast< ::cartographer::mapping::proto::GridOptions2D_GridType >(grid_type_);
}
 void GridOptions2D::set_grid_type(::cartographer::mapping::proto::GridOptions2D_GridType value) {
  
  grid_type_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GridOptions2D.grid_type)
}

// optional float resolution = 2;
void GridOptions2D::clear_resolution() {
  resolution_ = 0;
}
 float GridOptions2D::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.GridOptions2D.resolution)
  return resolution_;
}
 void GridOptions2D::set_resolution(float value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.GridOptions2D.resolution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
