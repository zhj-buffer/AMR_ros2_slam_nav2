// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/probability_grid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/2d/probability_grid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ProbabilityGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProbabilityGrid_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/2d/probability_grid.proto");
  GOOGLE_CHECK(file != NULL);
  ProbabilityGrid_descriptor_ = file->message_type(0);
  static const int ProbabilityGrid_offsets_[1] = {
  };
  ProbabilityGrid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProbabilityGrid_descriptor_,
      ProbabilityGrid::default_instance_,
      ProbabilityGrid_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProbabilityGrid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProbabilityGrid_descriptor_, &ProbabilityGrid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto() {
  delete ProbabilityGrid::default_instance_;
  delete ProbabilityGrid_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n4cartographer/mapping/proto/2d/probabil"
    "ity_grid.proto\022\032cartographer.mapping.pro"
    "to\"\021\n\017ProbabilityGridb\006proto3", 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/probability_grid.proto", &protobuf_RegisterTypes);
  ProbabilityGrid::default_instance_ = new ProbabilityGrid();
  ProbabilityGrid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbabilityGrid::ProbabilityGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ProbabilityGrid)
}

void ProbabilityGrid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProbabilityGrid::ProbabilityGrid(const ProbabilityGrid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ProbabilityGrid)
}

void ProbabilityGrid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ProbabilityGrid::~ProbabilityGrid() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ProbabilityGrid)
  SharedDtor();
}

void ProbabilityGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProbabilityGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbabilityGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProbabilityGrid_descriptor_;
}

const ProbabilityGrid& ProbabilityGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto();
  return *default_instance_;
}

ProbabilityGrid* ProbabilityGrid::default_instance_ = NULL;

ProbabilityGrid* ProbabilityGrid::New(::google::protobuf::Arena* arena) const {
  ProbabilityGrid* n = new ProbabilityGrid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbabilityGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ProbabilityGrid)
}

bool ProbabilityGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.ProbabilityGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.ProbabilityGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.ProbabilityGrid)
  return false;
#undef DO_
}

void ProbabilityGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.ProbabilityGrid)
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.ProbabilityGrid)
}

::google::protobuf::uint8* ProbabilityGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ProbabilityGrid)
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ProbabilityGrid)
  return target;
}

int ProbabilityGrid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ProbabilityGrid)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbabilityGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ProbabilityGrid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProbabilityGrid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProbabilityGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ProbabilityGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ProbabilityGrid)
    MergeFrom(*source);
  }
}

void ProbabilityGrid::MergeFrom(const ProbabilityGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ProbabilityGrid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ProbabilityGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ProbabilityGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbabilityGrid::CopyFrom(const ProbabilityGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ProbabilityGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbabilityGrid::IsInitialized() const {

  return true;
}

void ProbabilityGrid::Swap(ProbabilityGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbabilityGrid::InternalSwap(ProbabilityGrid* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProbabilityGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProbabilityGrid_descriptor_;
  metadata.reflection = ProbabilityGrid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbabilityGrid

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
