// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalTrajectoryBuilderOptions2D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.proto");
  GOOGLE_CHECK(file != NULL);
  LocalTrajectoryBuilderOptions2D_descriptor_ = file->message_type(0);
  static const int LocalTrajectoryBuilderOptions2D_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, min_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, max_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, min_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, max_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, missing_data_ray_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, num_accumulated_range_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, voxel_filter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, adaptive_voxel_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, loop_closure_adaptive_voxel_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, use_online_correlative_scan_matching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, real_time_correlative_scan_matcher_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, ceres_scan_matcher_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, motion_filter_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, imu_gravity_time_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, submaps_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, use_imu_data_),
  };
  LocalTrajectoryBuilderOptions2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalTrajectoryBuilderOptions2D_descriptor_,
      LocalTrajectoryBuilderOptions2D::default_instance_,
      LocalTrajectoryBuilderOptions2D_offsets_,
      -1,
      -1,
      -1,
      sizeof(LocalTrajectoryBuilderOptions2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalTrajectoryBuilderOptions2D_descriptor_, &LocalTrajectoryBuilderOptions2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto() {
  delete LocalTrajectoryBuilderOptions2D::default_instance_;
  delete LocalTrajectoryBuilderOptions2D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto();
  ::cartographer::sensor::proto::protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2fsubmaps_5foptions_5f2d_2eproto();
  ::cartographer::mapping::scan_matching::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto();
  ::cartographer::mapping::scan_matching::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nGcartographer/mapping/proto/2d/local_tr"
    "ajectory_builder_options_2d.proto\022\032carto"
    "grapher.mapping.proto\0326cartographer/mapp"
    "ing/proto/motion_filter_options.proto\032=c"
    "artographer/sensor/proto/adaptive_voxel_"
    "filter_options.proto\0326cartographer/mappi"
    "ng/proto/2d/submaps_options_2d.proto\032Lca"
    "rtographer/mapping/proto/scan_matching/c"
    "eres_scan_matcher_options_2d.proto\032Ycart"
    "ographer/mapping/proto/scan_matching/rea"
    "l_time_correlative_scan_matcher_options."
    "proto\"\373\006\n\037LocalTrajectoryBuilderOptions2"
    "D\022\021\n\tmin_range\030\016 \001(\002\022\021\n\tmax_range\030\017 \001(\002\022"
    "\r\n\005min_z\030\001 \001(\002\022\r\n\005max_z\030\002 \001(\002\022\037\n\027missing"
    "_data_ray_length\030\020 \001(\002\022\"\n\032num_accumulate"
    "d_range_data\030\023 \001(\005\022\031\n\021voxel_filter_size\030"
    "\003 \001(\002\022\\\n\035adaptive_voxel_filter_options\030\006"
    " \001(\01325.cartographer.sensor.proto.Adaptiv"
    "eVoxelFilterOptions\022i\n*loop_closure_adap"
    "tive_voxel_filter_options\030\024 \001(\01325.cartog"
    "rapher.sensor.proto.AdaptiveVoxelFilterO"
    "ptions\022,\n$use_online_correlative_scan_ma"
    "tching\030\005 \001(\010\022\203\001\n*real_time_correlative_s"
    "can_matcher_options\030\007 \001(\0132O.cartographer"
    ".mapping.scan_matching.proto.RealTimeCor"
    "relativeScanMatcherOptions\022g\n\032ceres_scan"
    "_matcher_options\030\010 \001(\0132C.cartographer.ma"
    "pping.scan_matching.proto.CeresScanMatch"
    "erOptions2D\022N\n\025motion_filter_options\030\r \001"
    "(\0132/.cartographer.mapping.proto.MotionFi"
    "lterOptions\022!\n\031imu_gravity_time_constant"
    "\030\021 \001(\001\022E\n\017submaps_options\030\013 \001(\0132,.cartog"
    "rapher.mapping.proto.SubmapsOptions2D\022\024\n"
    "\014use_imu_data\030\014 \001(\010b\006proto3", 1347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.proto", &protobuf_RegisterTypes);
  LocalTrajectoryBuilderOptions2D::default_instance_ = new LocalTrajectoryBuilderOptions2D();
  LocalTrajectoryBuilderOptions2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalTrajectoryBuilderOptions2D::kMinRangeFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMaxRangeFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMinZFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMaxZFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMissingDataRayLengthFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kNumAccumulatedRangeDataFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kLoopClosureAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kUseOnlineCorrelativeScanMatchingFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kRealTimeCorrelativeScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kImuGravityTimeConstantFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kSubmapsOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kUseImuDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}

void LocalTrajectoryBuilderOptions2D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(&::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::default_instance());
  loop_closure_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(&::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::default_instance());
  real_time_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(&::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::default_instance());
  ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D*>(&::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::default_instance());
  motion_filter_options_ = const_cast< ::cartographer::mapping::proto::MotionFilterOptions*>(&::cartographer::mapping::proto::MotionFilterOptions::default_instance());
  submaps_options_ = const_cast< ::cartographer::mapping::proto::SubmapsOptions2D*>(&::cartographer::mapping::proto::SubmapsOptions2D::default_instance());
}

LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D(const LocalTrajectoryBuilderOptions2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}

void LocalTrajectoryBuilderOptions2D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  min_range_ = 0;
  max_range_ = 0;
  min_z_ = 0;
  max_z_ = 0;
  missing_data_ray_length_ = 0;
  num_accumulated_range_data_ = 0;
  voxel_filter_size_ = 0;
  adaptive_voxel_filter_options_ = NULL;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
  use_online_correlative_scan_matching_ = false;
  real_time_correlative_scan_matcher_options_ = NULL;
  ceres_scan_matcher_options_ = NULL;
  motion_filter_options_ = NULL;
  imu_gravity_time_constant_ = 0;
  submaps_options_ = NULL;
  use_imu_data_ = false;
}

LocalTrajectoryBuilderOptions2D::~LocalTrajectoryBuilderOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions2D::SharedDtor() {
  if (this != default_instance_) {
    delete adaptive_voxel_filter_options_;
    delete loop_closure_adaptive_voxel_filter_options_;
    delete real_time_correlative_scan_matcher_options_;
    delete ceres_scan_matcher_options_;
    delete motion_filter_options_;
    delete submaps_options_;
  }
}

void LocalTrajectoryBuilderOptions2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalTrajectoryBuilderOptions2D_descriptor_;
}

const LocalTrajectoryBuilderOptions2D& LocalTrajectoryBuilderOptions2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto();
  return *default_instance_;
}

LocalTrajectoryBuilderOptions2D* LocalTrajectoryBuilderOptions2D::default_instance_ = NULL;

LocalTrajectoryBuilderOptions2D* LocalTrajectoryBuilderOptions2D::New(::google::protobuf::Arena* arena) const {
  LocalTrajectoryBuilderOptions2D* n = new LocalTrajectoryBuilderOptions2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalTrajectoryBuilderOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LocalTrajectoryBuilderOptions2D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LocalTrajectoryBuilderOptions2D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_range_, num_accumulated_range_data_);
  voxel_filter_size_ = 0;
  if (GetArenaNoVirtual() == NULL && adaptive_voxel_filter_options_ != NULL) delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
  ZR_(use_online_correlative_scan_matching_, use_imu_data_);
  if (GetArenaNoVirtual() == NULL && loop_closure_adaptive_voxel_filter_options_ != NULL) delete loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) delete motion_filter_options_;
  motion_filter_options_ = NULL;
  imu_gravity_time_constant_ = 0;
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) delete submaps_options_;
  submaps_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool LocalTrajectoryBuilderOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_z = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max_z;
        break;
      }

      // optional float max_z = 2;
      case 2: {
        if (tag == 21) {
         parse_max_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_voxel_filter_size;
        break;
      }

      // optional float voxel_filter_size = 3;
      case 3: {
        if (tag == 29) {
         parse_voxel_filter_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voxel_filter_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_online_correlative_scan_matching;
        break;
      }

      // optional bool use_online_correlative_scan_matching = 5;
      case 5: {
        if (tag == 40) {
         parse_use_online_correlative_scan_matching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_correlative_scan_matching_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adaptive_voxel_filter_options;
        break;
      }

      // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
      case 6: {
        if (tag == 50) {
         parse_adaptive_voxel_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_real_time_correlative_scan_matcher_options;
        break;
      }

      // optional .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
      case 7: {
        if (tag == 58) {
         parse_real_time_correlative_scan_matcher_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ceres_scan_matcher_options;
        break;
      }

      // optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
      case 8: {
        if (tag == 66) {
         parse_ceres_scan_matcher_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_submaps_options;
        break;
      }

      // optional .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
      case 11: {
        if (tag == 90) {
         parse_submaps_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submaps_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_use_imu_data;
        break;
      }

      // optional bool use_imu_data = 12;
      case 12: {
        if (tag == 96) {
         parse_use_imu_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_imu_data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_motion_filter_options;
        break;
      }

      // optional .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
      case 13: {
        if (tag == 106) {
         parse_motion_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_min_range;
        break;
      }

      // optional float min_range = 14;
      case 14: {
        if (tag == 117) {
         parse_min_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_max_range;
        break;
      }

      // optional float max_range = 15;
      case 15: {
        if (tag == 125) {
         parse_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_missing_data_ray_length;
        break;
      }

      // optional float missing_data_ray_length = 16;
      case 16: {
        if (tag == 133) {
         parse_missing_data_ray_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &missing_data_ray_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_imu_gravity_time_constant;
        break;
      }

      // optional double imu_gravity_time_constant = 17;
      case 17: {
        if (tag == 137) {
         parse_imu_gravity_time_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_num_accumulated_range_data;
        break;
      }

      // optional int32 num_accumulated_range_data = 19;
      case 19: {
        if (tag == 152) {
         parse_num_accumulated_range_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_accumulated_range_data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_closure_adaptive_voxel_filter_options;
        break;
      }

      // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
      case 20: {
        if (tag == 162) {
         parse_loop_closure_adaptive_voxel_filter_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_closure_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return false;
#undef DO_
}

void LocalTrajectoryBuilderOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  // optional float min_z = 1;
  if (this->min_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_z(), output);
  }

  // optional float max_z = 2;
  if (this->max_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_z(), output);
  }

  // optional float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->voxel_filter_size(), output);
  }

  // optional bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_online_correlative_scan_matching(), output);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->adaptive_voxel_filter_options_, output);
  }

  // optional .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->real_time_correlative_scan_matcher_options_, output);
  }

  // optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ceres_scan_matcher_options_, output);
  }

  // optional .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->submaps_options_, output);
  }

  // optional bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_imu_data(), output);
  }

  // optional .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->motion_filter_options_, output);
  }

  // optional float min_range = 14;
  if (this->min_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->min_range(), output);
  }

  // optional float max_range = 15;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->max_range(), output);
  }

  // optional float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->missing_data_ray_length(), output);
  }

  // optional double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->imu_gravity_time_constant(), output);
  }

  // optional int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_accumulated_range_data(), output);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->loop_closure_adaptive_voxel_filter_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  // optional float min_z = 1;
  if (this->min_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_z(), target);
  }

  // optional float max_z = 2;
  if (this->max_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_z(), target);
  }

  // optional float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->voxel_filter_size(), target);
  }

  // optional bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_online_correlative_scan_matching(), target);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->adaptive_voxel_filter_options_, false, target);
  }

  // optional .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->real_time_correlative_scan_matcher_options_, false, target);
  }

  // optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ceres_scan_matcher_options_, false, target);
  }

  // optional .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->submaps_options_, false, target);
  }

  // optional bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_imu_data(), target);
  }

  // optional .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->motion_filter_options_, false, target);
  }

  // optional float min_range = 14;
  if (this->min_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->min_range(), target);
  }

  // optional float max_range = 15;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->max_range(), target);
  }

  // optional float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->missing_data_ray_length(), target);
  }

  // optional double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->imu_gravity_time_constant(), target);
  }

  // optional int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->num_accumulated_range_data(), target);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->loop_closure_adaptive_voxel_filter_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return target;
}

int LocalTrajectoryBuilderOptions2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  int total_size = 0;

  // optional float min_range = 14;
  if (this->min_range() != 0) {
    total_size += 1 + 4;
  }

  // optional float max_range = 15;
  if (this->max_range() != 0) {
    total_size += 1 + 4;
  }

  // optional float min_z = 1;
  if (this->min_z() != 0) {
    total_size += 1 + 4;
  }

  // optional float max_z = 2;
  if (this->max_z() != 0) {
    total_size += 1 + 4;
  }

  // optional float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    total_size += 2 + 4;
  }

  // optional int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_accumulated_range_data());
  }

  // optional float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    total_size += 1 + 4;
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adaptive_voxel_filter_options_);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loop_closure_adaptive_voxel_filter_options_);
  }

  // optional bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // optional .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->real_time_correlative_scan_matcher_options_);
  }

  // optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ceres_scan_matcher_options_);
  }

  // optional .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motion_filter_options_);
  }

  // optional double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    total_size += 2 + 8;
  }

  // optional .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submaps_options_);
  }

  // optional bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalTrajectoryBuilderOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalTrajectoryBuilderOptions2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalTrajectoryBuilderOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions2D::MergeFrom(const LocalTrajectoryBuilderOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.min_range() != 0) {
    set_min_range(from.min_range());
  }
  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
  if (from.min_z() != 0) {
    set_min_z(from.min_z());
  }
  if (from.max_z() != 0) {
    set_max_z(from.max_z());
  }
  if (from.missing_data_ray_length() != 0) {
    set_missing_data_ray_length(from.missing_data_ray_length());
  }
  if (from.num_accumulated_range_data() != 0) {
    set_num_accumulated_range_data(from.num_accumulated_range_data());
  }
  if (from.voxel_filter_size() != 0) {
    set_voxel_filter_size(from.voxel_filter_size());
  }
  if (from.has_adaptive_voxel_filter_options()) {
    mutable_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.adaptive_voxel_filter_options());
  }
  if (from.has_loop_closure_adaptive_voxel_filter_options()) {
    mutable_loop_closure_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.loop_closure_adaptive_voxel_filter_options());
  }
  if (from.use_online_correlative_scan_matching() != 0) {
    set_use_online_correlative_scan_matching(from.use_online_correlative_scan_matching());
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from.real_time_correlative_scan_matcher_options());
  }
  if (from.has_ceres_scan_matcher_options()) {
    mutable_ceres_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::MergeFrom(from.ceres_scan_matcher_options());
  }
  if (from.has_motion_filter_options()) {
    mutable_motion_filter_options()->::cartographer::mapping::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
  }
  if (from.imu_gravity_time_constant() != 0) {
    set_imu_gravity_time_constant(from.imu_gravity_time_constant());
  }
  if (from.has_submaps_options()) {
    mutable_submaps_options()->::cartographer::mapping::proto::SubmapsOptions2D::MergeFrom(from.submaps_options());
  }
  if (from.use_imu_data() != 0) {
    set_use_imu_data(from.use_imu_data());
  }
}

void LocalTrajectoryBuilderOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions2D::CopyFrom(const LocalTrajectoryBuilderOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions2D::IsInitialized() const {

  return true;
}

void LocalTrajectoryBuilderOptions2D::Swap(LocalTrajectoryBuilderOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalTrajectoryBuilderOptions2D::InternalSwap(LocalTrajectoryBuilderOptions2D* other) {
  std::swap(min_range_, other->min_range_);
  std::swap(max_range_, other->max_range_);
  std::swap(min_z_, other->min_z_);
  std::swap(max_z_, other->max_z_);
  std::swap(missing_data_ray_length_, other->missing_data_ray_length_);
  std::swap(num_accumulated_range_data_, other->num_accumulated_range_data_);
  std::swap(voxel_filter_size_, other->voxel_filter_size_);
  std::swap(adaptive_voxel_filter_options_, other->adaptive_voxel_filter_options_);
  std::swap(loop_closure_adaptive_voxel_filter_options_, other->loop_closure_adaptive_voxel_filter_options_);
  std::swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
  std::swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
  std::swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  std::swap(motion_filter_options_, other->motion_filter_options_);
  std::swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  std::swap(submaps_options_, other->submaps_options_);
  std::swap(use_imu_data_, other->use_imu_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalTrajectoryBuilderOptions2D_descriptor_;
  metadata.reflection = LocalTrajectoryBuilderOptions2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalTrajectoryBuilderOptions2D

// optional float min_range = 14;
void LocalTrajectoryBuilderOptions2D::clear_min_range() {
  min_range_ = 0;
}
 float LocalTrajectoryBuilderOptions2D::min_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_range)
  return min_range_;
}
 void LocalTrajectoryBuilderOptions2D::set_min_range(float value) {
  
  min_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_range)
}

// optional float max_range = 15;
void LocalTrajectoryBuilderOptions2D::clear_max_range() {
  max_range_ = 0;
}
 float LocalTrajectoryBuilderOptions2D::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_range)
  return max_range_;
}
 void LocalTrajectoryBuilderOptions2D::set_max_range(float value) {
  
  max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_range)
}

// optional float min_z = 1;
void LocalTrajectoryBuilderOptions2D::clear_min_z() {
  min_z_ = 0;
}
 float LocalTrajectoryBuilderOptions2D::min_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_z)
  return min_z_;
}
 void LocalTrajectoryBuilderOptions2D::set_min_z(float value) {
  
  min_z_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_z)
}

// optional float max_z = 2;
void LocalTrajectoryBuilderOptions2D::clear_max_z() {
  max_z_ = 0;
}
 float LocalTrajectoryBuilderOptions2D::max_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_z)
  return max_z_;
}
 void LocalTrajectoryBuilderOptions2D::set_max_z(float value) {
  
  max_z_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_z)
}

// optional float missing_data_ray_length = 16;
void LocalTrajectoryBuilderOptions2D::clear_missing_data_ray_length() {
  missing_data_ray_length_ = 0;
}
 float LocalTrajectoryBuilderOptions2D::missing_data_ray_length() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.missing_data_ray_length)
  return missing_data_ray_length_;
}
 void LocalTrajectoryBuilderOptions2D::set_missing_data_ray_length(float value) {
  
  missing_data_ray_length_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.missing_data_ray_length)
}

// optional int32 num_accumulated_range_data = 19;
void LocalTrajectoryBuilderOptions2D::clear_num_accumulated_range_data() {
  num_accumulated_range_data_ = 0;
}
 ::google::protobuf::int32 LocalTrajectoryBuilderOptions2D::num_accumulated_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.num_accumulated_range_data)
  return num_accumulated_range_data_;
}
 void LocalTrajectoryBuilderOptions2D::set_num_accumulated_range_data(::google::protobuf::int32 value) {
  
  num_accumulated_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.num_accumulated_range_data)
}

// optional float voxel_filter_size = 3;
void LocalTrajectoryBuilderOptions2D::clear_voxel_filter_size() {
  voxel_filter_size_ = 0;
}
 float LocalTrajectoryBuilderOptions2D::voxel_filter_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.voxel_filter_size)
  return voxel_filter_size_;
}
 void LocalTrajectoryBuilderOptions2D::set_voxel_filter_size(float value) {
  
  voxel_filter_size_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.voxel_filter_size)
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
bool LocalTrajectoryBuilderOptions2D::has_adaptive_voxel_filter_options() const {
  return !_is_default_instance_ && adaptive_voxel_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && adaptive_voxel_filter_options_ != NULL) delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::adaptive_voxel_filter_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  return adaptive_voxel_filter_options_ != NULL ? *adaptive_voxel_filter_options_ : *default_instance_->adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_adaptive_voxel_filter_options() {
  
  if (adaptive_voxel_filter_options_ == NULL) {
    adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  return adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::release_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options) {
  delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = adaptive_voxel_filter_options;
  if (adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
bool LocalTrajectoryBuilderOptions2D::has_loop_closure_adaptive_voxel_filter_options() const {
  return !_is_default_instance_ && loop_closure_adaptive_voxel_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_loop_closure_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && loop_closure_adaptive_voxel_filter_options_ != NULL) delete loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::loop_closure_adaptive_voxel_filter_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  return loop_closure_adaptive_voxel_filter_options_ != NULL ? *loop_closure_adaptive_voxel_filter_options_ : *default_instance_->loop_closure_adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_loop_closure_adaptive_voxel_filter_options() {
  
  if (loop_closure_adaptive_voxel_filter_options_ == NULL) {
    loop_closure_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  return loop_closure_adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::release_loop_closure_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_loop_closure_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options) {
  delete loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = loop_closure_adaptive_voxel_filter_options;
  if (loop_closure_adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
}

// optional bool use_online_correlative_scan_matching = 5;
void LocalTrajectoryBuilderOptions2D::clear_use_online_correlative_scan_matching() {
  use_online_correlative_scan_matching_ = false;
}
 bool LocalTrajectoryBuilderOptions2D::use_online_correlative_scan_matching() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_online_correlative_scan_matching)
  return use_online_correlative_scan_matching_;
}
 void LocalTrajectoryBuilderOptions2D::set_use_online_correlative_scan_matching(bool value) {
  
  use_online_correlative_scan_matching_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_online_correlative_scan_matching)
}

// optional .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
bool LocalTrajectoryBuilderOptions2D::has_real_time_correlative_scan_matcher_options() const {
  return !_is_default_instance_ && real_time_correlative_scan_matcher_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
}
const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions2D::real_time_correlative_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_ != NULL ? *real_time_correlative_scan_matcher_options_ : *default_instance_->real_time_correlative_scan_matcher_options_;
}
::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::mutable_real_time_correlative_scan_matcher_options() {
  
  if (real_time_correlative_scan_matcher_options_ == NULL) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_;
}
::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::release_real_time_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
}

// optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
bool LocalTrajectoryBuilderOptions2D::has_ceres_scan_matcher_options() const {
  return !_is_default_instance_ && ceres_scan_matcher_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
}
const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& LocalTrajectoryBuilderOptions2D::ceres_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_ != NULL ? *ceres_scan_matcher_options_ : *default_instance_->ceres_scan_matcher_options_;
}
::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::mutable_ceres_scan_matcher_options() {
  
  if (ceres_scan_matcher_options_ == NULL) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_;
}
::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_ceres_scan_matcher_options(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
}

// optional .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
bool LocalTrajectoryBuilderOptions2D::has_motion_filter_options() const {
  return !_is_default_instance_ && motion_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_motion_filter_options() {
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) delete motion_filter_options_;
  motion_filter_options_ = NULL;
}
const ::cartographer::mapping::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions2D::motion_filter_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  return motion_filter_options_ != NULL ? *motion_filter_options_ : *default_instance_->motion_filter_options_;
}
::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_motion_filter_options() {
  
  if (motion_filter_options_ == NULL) {
    motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  return motion_filter_options_;
}
::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::release_motion_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  
  ::cartographer::mapping::proto::MotionFilterOptions* temp = motion_filter_options_;
  motion_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_motion_filter_options(::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options) {
  delete motion_filter_options_;
  motion_filter_options_ = motion_filter_options;
  if (motion_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
}

// optional double imu_gravity_time_constant = 17;
void LocalTrajectoryBuilderOptions2D::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
}
 double LocalTrajectoryBuilderOptions2D::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.imu_gravity_time_constant)
  return imu_gravity_time_constant_;
}
 void LocalTrajectoryBuilderOptions2D::set_imu_gravity_time_constant(double value) {
  
  imu_gravity_time_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.imu_gravity_time_constant)
}

// optional .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
bool LocalTrajectoryBuilderOptions2D::has_submaps_options() const {
  return !_is_default_instance_ && submaps_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_submaps_options() {
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) delete submaps_options_;
  submaps_options_ = NULL;
}
const ::cartographer::mapping::proto::SubmapsOptions2D& LocalTrajectoryBuilderOptions2D::submaps_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  return submaps_options_ != NULL ? *submaps_options_ : *default_instance_->submaps_options_;
}
::cartographer::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::mutable_submaps_options() {
  
  if (submaps_options_ == NULL) {
    submaps_options_ = new ::cartographer::mapping::proto::SubmapsOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  return submaps_options_;
}
::cartographer::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::release_submaps_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  
  ::cartographer::mapping::proto::SubmapsOptions2D* temp = submaps_options_;
  submaps_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_submaps_options(::cartographer::mapping::proto::SubmapsOptions2D* submaps_options) {
  delete submaps_options_;
  submaps_options_ = submaps_options;
  if (submaps_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
}

// optional bool use_imu_data = 12;
void LocalTrajectoryBuilderOptions2D::clear_use_imu_data() {
  use_imu_data_ = false;
}
 bool LocalTrajectoryBuilderOptions2D::use_imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_imu_data)
  return use_imu_data_;
}
 void LocalTrajectoryBuilderOptions2D::set_use_imu_data(bool value) {
  
  use_imu_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_imu_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
