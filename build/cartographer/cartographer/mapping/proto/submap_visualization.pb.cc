// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/submap_visualization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* SubmapList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapList_SubmapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapList_SubmapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapList_TrajectorySubmapList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapList_TrajectorySubmapList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapQuery_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapQuery_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapQuery_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapQuery_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmapQuery_Response_SubmapTexture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmapQuery_Response_SubmapTexture_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/submap_visualization.proto");
  GOOGLE_CHECK(file != NULL);
  SubmapList_descriptor_ = file->message_type(0);
  static const int SubmapList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, trajectory_),
  };
  SubmapList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapList_descriptor_,
      SubmapList::default_instance_,
      SubmapList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, _is_default_instance_));
  SubmapList_SubmapEntry_descriptor_ = SubmapList_descriptor_->nested_type(0);
  static const int SubmapList_SubmapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, submap_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, pose_),
  };
  SubmapList_SubmapEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapList_SubmapEntry_descriptor_,
      SubmapList_SubmapEntry::default_instance_,
      SubmapList_SubmapEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapList_SubmapEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, _is_default_instance_));
  SubmapList_TrajectorySubmapList_descriptor_ = SubmapList_descriptor_->nested_type(1);
  static const int SubmapList_TrajectorySubmapList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, submap_),
  };
  SubmapList_TrajectorySubmapList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapList_TrajectorySubmapList_descriptor_,
      SubmapList_TrajectorySubmapList::default_instance_,
      SubmapList_TrajectorySubmapList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapList_TrajectorySubmapList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, _is_default_instance_));
  SubmapQuery_descriptor_ = file->message_type(1);
  static const int SubmapQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, response_),
  };
  SubmapQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapQuery_descriptor_,
      SubmapQuery::default_instance_,
      SubmapQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, _is_default_instance_));
  SubmapQuery_Request_descriptor_ = SubmapQuery_descriptor_->nested_type(0);
  static const int SubmapQuery_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, submap_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, trajectory_id_),
  };
  SubmapQuery_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapQuery_Request_descriptor_,
      SubmapQuery_Request::default_instance_,
      SubmapQuery_Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapQuery_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, _is_default_instance_));
  SubmapQuery_Response_descriptor_ = SubmapQuery_descriptor_->nested_type(1);
  static const int SubmapQuery_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, submap_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, textures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, error_message_),
  };
  SubmapQuery_Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapQuery_Response_descriptor_,
      SubmapQuery_Response::default_instance_,
      SubmapQuery_Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapQuery_Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, _is_default_instance_));
  SubmapQuery_Response_SubmapTexture_descriptor_ = SubmapQuery_Response_descriptor_->nested_type(0);
  static const int SubmapQuery_Response_SubmapTexture_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, slice_pose_),
  };
  SubmapQuery_Response_SubmapTexture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubmapQuery_Response_SubmapTexture_descriptor_,
      SubmapQuery_Response_SubmapTexture::default_instance_,
      SubmapQuery_Response_SubmapTexture_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubmapQuery_Response_SubmapTexture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapList_descriptor_, &SubmapList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapList_SubmapEntry_descriptor_, &SubmapList_SubmapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapList_TrajectorySubmapList_descriptor_, &SubmapList_TrajectorySubmapList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapQuery_descriptor_, &SubmapQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapQuery_Request_descriptor_, &SubmapQuery_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapQuery_Response_descriptor_, &SubmapQuery_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubmapQuery_Response_SubmapTexture_descriptor_, &SubmapQuery_Response_SubmapTexture::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  delete SubmapList::default_instance_;
  delete SubmapList_reflection_;
  delete SubmapList_SubmapEntry::default_instance_;
  delete SubmapList_SubmapEntry_reflection_;
  delete SubmapList_TrajectorySubmapList::default_instance_;
  delete SubmapList_TrajectorySubmapList_reflection_;
  delete SubmapQuery::default_instance_;
  delete SubmapQuery_reflection_;
  delete SubmapQuery_Request::default_instance_;
  delete SubmapQuery_Request_reflection_;
  delete SubmapQuery_Response::default_instance_;
  delete SubmapQuery_Response_reflection_;
  delete SubmapQuery_Response_SubmapTexture::default_instance_;
  delete SubmapQuery_Response_SubmapTexture_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5cartographer/mapping/proto/submap_visu"
    "alization.proto\022\032cartographer.mapping.pr"
    "oto\032,cartographer/transform/proto/transf"
    "orm.proto\"\225\002\n\nSubmapList\022O\n\ntrajectory\030\002"
    " \003(\0132;.cartographer.mapping.proto.Submap"
    "List.TrajectorySubmapList\032Z\n\013SubmapEntry"
    "\022\026\n\016submap_version\030\001 \001(\005\0223\n\004pose\030\003 \001(\0132%"
    ".cartographer.transform.proto.Rigid3d\032Z\n"
    "\024TrajectorySubmapList\022B\n\006submap\030\001 \003(\01322."
    "cartographer.mapping.proto.SubmapList.Su"
    "bmapEntry\"\350\003\n\013SubmapQuery\022@\n\007request\030\001 \001"
    "(\0132/.cartographer.mapping.proto.SubmapQu"
    "ery.Request\022B\n\010response\030\002 \001(\01320.cartogra"
    "pher.mapping.proto.SubmapQuery.Response\032"
    "6\n\007Request\022\024\n\014submap_index\030\001 \001(\005\022\025\n\rtraj"
    "ectory_id\030\002 \001(\005\032\232\002\n\010Response\022\026\n\016submap_v"
    "ersion\030\002 \001(\005\022P\n\010textures\030\n \003(\0132>.cartogr"
    "apher.mapping.proto.SubmapQuery.Response"
    ".SubmapTexture\022\025\n\rerror_message\030\010 \001(\t\032\214\001"
    "\n\rSubmapTexture\022\r\n\005cells\030\001 \001(\014\022\r\n\005width\030"
    "\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\022\n\nresolution\030\004 \001("
    "\001\0229\n\nslice_pose\030\005 \001(\0132%.cartographer.tra"
    "nsform.proto.Rigid3db\006proto3", 908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/submap_visualization.proto", &protobuf_RegisterTypes);
  SubmapList::default_instance_ = new SubmapList();
  SubmapList_SubmapEntry::default_instance_ = new SubmapList_SubmapEntry();
  SubmapList_TrajectorySubmapList::default_instance_ = new SubmapList_TrajectorySubmapList();
  SubmapQuery::default_instance_ = new SubmapQuery();
  SubmapQuery_Request::default_instance_ = new SubmapQuery_Request();
  SubmapQuery_Response::default_instance_ = new SubmapQuery_Response();
  SubmapQuery_Response_SubmapTexture::default_instance_ = new SubmapQuery_Response_SubmapTexture();
  SubmapList::default_instance_->InitAsDefaultInstance();
  SubmapList_SubmapEntry::default_instance_->InitAsDefaultInstance();
  SubmapList_TrajectorySubmapList::default_instance_->InitAsDefaultInstance();
  SubmapQuery::default_instance_->InitAsDefaultInstance();
  SubmapQuery_Request::default_instance_->InitAsDefaultInstance();
  SubmapQuery_Response::default_instance_->InitAsDefaultInstance();
  SubmapQuery_Response_SubmapTexture::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapList_SubmapEntry::kSubmapVersionFieldNumber;
const int SubmapList_SubmapEntry::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapList_SubmapEntry::SubmapList_SubmapEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}

void SubmapList_SubmapEntry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

SubmapList_SubmapEntry::SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}

void SubmapList_SubmapEntry::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  submap_version_ = 0;
  pose_ = NULL;
}

SubmapList_SubmapEntry::~SubmapList_SubmapEntry() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
  SharedDtor();
}

void SubmapList_SubmapEntry::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void SubmapList_SubmapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList_SubmapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapList_SubmapEntry_descriptor_;
}

const SubmapList_SubmapEntry& SubmapList_SubmapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapList_SubmapEntry* SubmapList_SubmapEntry::default_instance_ = NULL;

SubmapList_SubmapEntry* SubmapList_SubmapEntry::New(::google::protobuf::Arena* arena) const {
  SubmapList_SubmapEntry* n = new SubmapList_SubmapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapList_SubmapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  submap_version_ = 0;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}

bool SubmapList_SubmapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 submap_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 3;
      case 3: {
        if (tag == 26) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return false;
#undef DO_
}

void SubmapList_SubmapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  // optional int32 submap_version = 1;
  if (this->submap_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->submap_version(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapList.SubmapEntry)
}

::google::protobuf::uint8* SubmapList_SubmapEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  // optional int32 submap_version = 1;
  if (this->submap_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->submap_version(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pose_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return target;
}

int SubmapList_SubmapEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  int total_size = 0;

  // optional int32 submap_version = 1;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_version());
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList_SubmapEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapList_SubmapEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapList_SubmapEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList.SubmapEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList.SubmapEntry)
    MergeFrom(*source);
  }
}

void SubmapList_SubmapEntry::MergeFrom(const SubmapList_SubmapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.submap_version() != 0) {
    set_submap_version(from.submap_version());
  }
  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
}

void SubmapList_SubmapEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_SubmapEntry::CopyFrom(const SubmapList_SubmapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_SubmapEntry::IsInitialized() const {

  return true;
}

void SubmapList_SubmapEntry::Swap(SubmapList_SubmapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapList_SubmapEntry::InternalSwap(SubmapList_SubmapEntry* other) {
  std::swap(submap_version_, other->submap_version_);
  std::swap(pose_, other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapList_SubmapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapList_SubmapEntry_descriptor_;
  metadata.reflection = SubmapList_SubmapEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapList_TrajectorySubmapList::kSubmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}

void SubmapList_TrajectorySubmapList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}

void SubmapList_TrajectorySubmapList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SubmapList_TrajectorySubmapList::~SubmapList_TrajectorySubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  SharedDtor();
}

void SubmapList_TrajectorySubmapList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmapList_TrajectorySubmapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList_TrajectorySubmapList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapList_TrajectorySubmapList_descriptor_;
}

const SubmapList_TrajectorySubmapList& SubmapList_TrajectorySubmapList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapList_TrajectorySubmapList* SubmapList_TrajectorySubmapList::default_instance_ = NULL;

SubmapList_TrajectorySubmapList* SubmapList_TrajectorySubmapList::New(::google::protobuf::Arena* arena) const {
  SubmapList_TrajectorySubmapList* n = new SubmapList_TrajectorySubmapList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapList_TrajectorySubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  submap_.Clear();
}

bool SubmapList_TrajectorySubmapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_submap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_submap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_submap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return false;
#undef DO_
}

void SubmapList_TrajectorySubmapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (unsigned int i = 0, n = this->submap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->submap(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}

::google::protobuf::uint8* SubmapList_TrajectorySubmapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (unsigned int i = 0, n = this->submap_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->submap(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return target;
}

int SubmapList_TrajectorySubmapList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  int total_size = 0;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  total_size += 1 * this->submap_size();
  for (int i = 0; i < this->submap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->submap(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList_TrajectorySubmapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapList_TrajectorySubmapList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapList_TrajectorySubmapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
    MergeFrom(*source);
  }
}

void SubmapList_TrajectorySubmapList::MergeFrom(const SubmapList_TrajectorySubmapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  submap_.MergeFrom(from.submap_);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const SubmapList_TrajectorySubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_TrajectorySubmapList::IsInitialized() const {

  return true;
}

void SubmapList_TrajectorySubmapList::Swap(SubmapList_TrajectorySubmapList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapList_TrajectorySubmapList::InternalSwap(SubmapList_TrajectorySubmapList* other) {
  submap_.UnsafeArenaSwap(&other->submap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapList_TrajectorySubmapList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapList_TrajectorySubmapList_descriptor_;
  metadata.reflection = SubmapList_TrajectorySubmapList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapList::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapList::SubmapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList)
}

void SubmapList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SubmapList::SubmapList(const SubmapList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList)
}

void SubmapList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SubmapList::~SubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList)
  SharedDtor();
}

void SubmapList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapList_descriptor_;
}

const SubmapList& SubmapList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapList* SubmapList::default_instance_ = NULL;

SubmapList* SubmapList::New(::google::protobuf::Arena* arena) const {
  SubmapList* n = new SubmapList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList)
  trajectory_.Clear();
}

bool SubmapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_trajectory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapList)
  return false;
#undef DO_
}

void SubmapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapList)
  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapList)
}

::google::protobuf::uint8* SubmapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList)
  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trajectory(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList)
  return target;
}

int SubmapList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList)
  int total_size = 0;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  total_size += 1 * this->trajectory_size();
  for (int i = 0; i < this->trajectory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList)
    MergeFrom(*source);
  }
}

void SubmapList::MergeFrom(const SubmapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  trajectory_.MergeFrom(from.trajectory_);
}

void SubmapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList::CopyFrom(const SubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList::IsInitialized() const {

  return true;
}

void SubmapList::Swap(SubmapList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapList::InternalSwap(SubmapList* other) {
  trajectory_.UnsafeArenaSwap(&other->trajectory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapList_descriptor_;
  metadata.reflection = SubmapList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapList_SubmapEntry

// optional int32 submap_version = 1;
void SubmapList_SubmapEntry::clear_submap_version() {
  submap_version_ = 0;
}
 ::google::protobuf::int32 SubmapList_SubmapEntry::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
  return submap_version_;
}
 void SubmapList_SubmapEntry::set_submap_version(::google::protobuf::int32 value) {
  
  submap_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
}

// optional .cartographer.transform.proto.Rigid3d pose = 3;
bool SubmapList_SubmapEntry::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void SubmapList_SubmapEntry::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& SubmapList_SubmapEntry::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void SubmapList_SubmapEntry::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
}

// -------------------------------------------------------------------

// SubmapList_TrajectorySubmapList

// repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
int SubmapList_TrajectorySubmapList::submap_size() const {
  return submap_.size();
}
void SubmapList_TrajectorySubmapList::clear_submap() {
  submap_.Clear();
}
const ::cartographer::mapping::proto::SubmapList_SubmapEntry& SubmapList_TrajectorySubmapList::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Get(index);
}
::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Mutable(index);
}
::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >*
SubmapList_TrajectorySubmapList::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return &submap_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >&
SubmapList_TrajectorySubmapList::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_;
}

// -------------------------------------------------------------------

// SubmapList

// repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
int SubmapList::trajectory_size() const {
  return trajectory_.size();
}
void SubmapList::clear_trajectory() {
  trajectory_.Clear();
}
const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& SubmapList::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Get(index);
}
::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Mutable(index);
}
::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::add_trajectory() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >*
SubmapList::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >&
SubmapList::trajectory() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery_Request::kSubmapIndexFieldNumber;
const int SubmapQuery_Request::kTrajectoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery_Request::SubmapQuery_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Request)
}

void SubmapQuery_Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SubmapQuery_Request::SubmapQuery_Request(const SubmapQuery_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Request)
}

void SubmapQuery_Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  submap_index_ = 0;
  trajectory_id_ = 0;
}

SubmapQuery_Request::~SubmapQuery_Request() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Request)
  SharedDtor();
}

void SubmapQuery_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmapQuery_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapQuery_Request_descriptor_;
}

const SubmapQuery_Request& SubmapQuery_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapQuery_Request* SubmapQuery_Request::default_instance_ = NULL;

SubmapQuery_Request* SubmapQuery_Request::New(::google::protobuf::Arena* arena) const {
  SubmapQuery_Request* n = new SubmapQuery_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubmapQuery_Request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubmapQuery_Request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(submap_index_, trajectory_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool SubmapQuery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 submap_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trajectory_id;
        break;
      }

      // optional int32 trajectory_id = 2;
      case 2: {
        if (tag == 16) {
         parse_trajectory_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery.Request)
  return false;
#undef DO_
}

void SubmapQuery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery.Request)
  // optional int32 submap_index = 1;
  if (this->submap_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->submap_index(), output);
  }

  // optional int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trajectory_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery.Request)
}

::google::protobuf::uint8* SubmapQuery_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Request)
  // optional int32 submap_index = 1;
  if (this->submap_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->submap_index(), target);
  }

  // optional int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trajectory_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Request)
  return target;
}

int SubmapQuery_Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Request)
  int total_size = 0;

  // optional int32 submap_index = 1;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_index());
  }

  // optional int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapQuery_Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Request)
    MergeFrom(*source);
  }
}

void SubmapQuery_Request::MergeFrom(const SubmapQuery_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.submap_index() != 0) {
    set_submap_index(from.submap_index());
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void SubmapQuery_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Request::CopyFrom(const SubmapQuery_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Request::IsInitialized() const {

  return true;
}

void SubmapQuery_Request::Swap(SubmapQuery_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery_Request::InternalSwap(SubmapQuery_Request* other) {
  std::swap(submap_index_, other->submap_index_);
  std::swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapQuery_Request_descriptor_;
  metadata.reflection = SubmapQuery_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery_Response_SubmapTexture::kCellsFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kWidthFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kHeightFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kResolutionFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kSlicePoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}

void SubmapQuery_Response_SubmapTexture::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  slice_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture(const SubmapQuery_Response_SubmapTexture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}

void SubmapQuery_Response_SubmapTexture::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cells_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  resolution_ = 0;
  slice_pose_ = NULL;
}

SubmapQuery_Response_SubmapTexture::~SubmapQuery_Response_SubmapTexture() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  SharedDtor();
}

void SubmapQuery_Response_SubmapTexture::SharedDtor() {
  cells_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete slice_pose_;
  }
}

void SubmapQuery_Response_SubmapTexture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Response_SubmapTexture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapQuery_Response_SubmapTexture_descriptor_;
}

const SubmapQuery_Response_SubmapTexture& SubmapQuery_Response_SubmapTexture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapQuery_Response_SubmapTexture* SubmapQuery_Response_SubmapTexture::default_instance_ = NULL;

SubmapQuery_Response_SubmapTexture* SubmapQuery_Response_SubmapTexture::New(::google::protobuf::Arena* arena) const {
  SubmapQuery_Response_SubmapTexture* n = new SubmapQuery_Response_SubmapTexture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery_Response_SubmapTexture::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SubmapQuery_Response_SubmapTexture, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubmapQuery_Response_SubmapTexture*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, resolution_);
  cells_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && slice_pose_ != NULL) delete slice_pose_;
  slice_pose_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SubmapQuery_Response_SubmapTexture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cells = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_resolution;
        break;
      }

      // optional double resolution = 4;
      case 4: {
        if (tag == 33) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_slice_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d slice_pose = 5;
      case 5: {
        if (tag == 42) {
         parse_slice_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return false;
#undef DO_
}

void SubmapQuery_Response_SubmapTexture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  // optional bytes cells = 1;
  if (this->cells().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cells(), output);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional double resolution = 4;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->resolution(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->slice_pose_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}

::google::protobuf::uint8* SubmapQuery_Response_SubmapTexture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  // optional bytes cells = 1;
  if (this->cells().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cells(), target);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional double resolution = 4;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->resolution(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->slice_pose_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return target;
}

int SubmapQuery_Response_SubmapTexture::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  int total_size = 0;

  // optional bytes cells = 1;
  if (this->cells().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cells());
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional double resolution = 4;
  if (this->resolution() != 0) {
    total_size += 1 + 8;
  }

  // optional .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slice_pose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Response_SubmapTexture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapQuery_Response_SubmapTexture* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery_Response_SubmapTexture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
    MergeFrom(*source);
  }
}

void SubmapQuery_Response_SubmapTexture::MergeFrom(const SubmapQuery_Response_SubmapTexture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cells().size() > 0) {

    cells_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cells_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.has_slice_pose()) {
    mutable_slice_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.slice_pose());
  }
}

void SubmapQuery_Response_SubmapTexture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Response_SubmapTexture::CopyFrom(const SubmapQuery_Response_SubmapTexture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response_SubmapTexture::IsInitialized() const {

  return true;
}

void SubmapQuery_Response_SubmapTexture::Swap(SubmapQuery_Response_SubmapTexture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery_Response_SubmapTexture::InternalSwap(SubmapQuery_Response_SubmapTexture* other) {
  cells_.Swap(&other->cells_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(resolution_, other->resolution_);
  std::swap(slice_pose_, other->slice_pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery_Response_SubmapTexture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapQuery_Response_SubmapTexture_descriptor_;
  metadata.reflection = SubmapQuery_Response_SubmapTexture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery_Response::kSubmapVersionFieldNumber;
const int SubmapQuery_Response::kTexturesFieldNumber;
const int SubmapQuery_Response::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery_Response::SubmapQuery_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Response)
}

void SubmapQuery_Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SubmapQuery_Response::SubmapQuery_Response(const SubmapQuery_Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response)
}

void SubmapQuery_Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  submap_version_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SubmapQuery_Response::~SubmapQuery_Response() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response)
  SharedDtor();
}

void SubmapQuery_Response::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SubmapQuery_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapQuery_Response_descriptor_;
}

const SubmapQuery_Response& SubmapQuery_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapQuery_Response* SubmapQuery_Response::default_instance_ = NULL;

SubmapQuery_Response* SubmapQuery_Response::New(::google::protobuf::Arena* arena) const {
  SubmapQuery_Response* n = new SubmapQuery_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response)
  submap_version_ = 0;
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  textures_.Clear();
}

bool SubmapQuery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 submap_version = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_error_message;
        break;
      }

      // optional string error_message = 8;
      case 8: {
        if (tag == 66) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.mapping.proto.SubmapQuery.Response.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_textures;
        break;
      }

      // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
      case 10: {
        if (tag == 82) {
         parse_textures:
          DO_(input->IncrementRecursionDepth());
         parse_loop_textures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_textures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_textures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery.Response)
  return false;
#undef DO_
}

void SubmapQuery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery.Response)
  // optional int32 submap_version = 2;
  if (this->submap_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_version(), output);
  }

  // optional string error_message = 8;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SubmapQuery.Response.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->error_message(), output);
  }

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  for (unsigned int i = 0, n = this->textures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->textures(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery.Response)
}

::google::protobuf::uint8* SubmapQuery_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response)
  // optional int32 submap_version = 2;
  if (this->submap_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_version(), target);
  }

  // optional string error_message = 8;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SubmapQuery.Response.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->error_message(), target);
  }

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  for (unsigned int i = 0, n = this->textures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->textures(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response)
  return target;
}

int SubmapQuery_Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response)
  int total_size = 0;

  // optional int32 submap_version = 2;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_version());
  }

  // optional string error_message = 8;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  total_size += 1 * this->textures_size();
  for (int i = 0; i < this->textures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->textures(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapQuery_Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Response)
    MergeFrom(*source);
  }
}

void SubmapQuery_Response::MergeFrom(const SubmapQuery_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  textures_.MergeFrom(from.textures_);
  if (from.submap_version() != 0) {
    set_submap_version(from.submap_version());
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
}

void SubmapQuery_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Response::CopyFrom(const SubmapQuery_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response::IsInitialized() const {

  return true;
}

void SubmapQuery_Response::Swap(SubmapQuery_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery_Response::InternalSwap(SubmapQuery_Response* other) {
  std::swap(submap_version_, other->submap_version_);
  textures_.UnsafeArenaSwap(&other->textures_);
  error_message_.Swap(&other->error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapQuery_Response_descriptor_;
  metadata.reflection = SubmapQuery_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery::kRequestFieldNumber;
const int SubmapQuery::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery::SubmapQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery)
}

void SubmapQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  request_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Request*>(&::cartographer::mapping::proto::SubmapQuery_Request::default_instance());
  response_ = const_cast< ::cartographer::mapping::proto::SubmapQuery_Response*>(&::cartographer::mapping::proto::SubmapQuery_Response::default_instance());
}

SubmapQuery::SubmapQuery(const SubmapQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery)
}

void SubmapQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
}

SubmapQuery::~SubmapQuery() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery)
  SharedDtor();
}

void SubmapQuery::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void SubmapQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmapQuery_descriptor_;
}

const SubmapQuery& SubmapQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto();
  return *default_instance_;
}

SubmapQuery* SubmapQuery::default_instance_ = NULL;

SubmapQuery* SubmapQuery::New(::google::protobuf::Arena* arena) const {
  SubmapQuery* n = new SubmapQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery)
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}

bool SubmapQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery)
  return false;
#undef DO_
}

void SubmapQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery)
  // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery)
}

::google::protobuf::uint8* SubmapQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery)
  // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, false, target);
  }

  // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery)
  return target;
}

int SubmapQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery)
  int total_size = 0;

  // optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  // optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubmapQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery)
    MergeFrom(*source);
  }
}

void SubmapQuery::MergeFrom(const SubmapQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_request()) {
    mutable_request()->::cartographer::mapping::proto::SubmapQuery_Request::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::cartographer::mapping::proto::SubmapQuery_Response::MergeFrom(from.response());
  }
}

void SubmapQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery::CopyFrom(const SubmapQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery::IsInitialized() const {

  return true;
}

void SubmapQuery::Swap(SubmapQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery::InternalSwap(SubmapQuery* other) {
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmapQuery_descriptor_;
  metadata.reflection = SubmapQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapQuery_Request

// optional int32 submap_index = 1;
void SubmapQuery_Request::clear_submap_index() {
  submap_index_ = 0;
}
 ::google::protobuf::int32 SubmapQuery_Request::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
  return submap_index_;
}
 void SubmapQuery_Request::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
}

// optional int32 trajectory_id = 2;
void SubmapQuery_Request::clear_trajectory_id() {
  trajectory_id_ = 0;
}
 ::google::protobuf::int32 SubmapQuery_Request::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
  return trajectory_id_;
}
 void SubmapQuery_Request::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
}

// -------------------------------------------------------------------

// SubmapQuery_Response_SubmapTexture

// optional bytes cells = 1;
void SubmapQuery_Response_SubmapTexture::clear_cells() {
  cells_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SubmapQuery_Response_SubmapTexture::cells() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return cells_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubmapQuery_Response_SubmapTexture::set_cells(const ::std::string& value) {
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
 void SubmapQuery_Response_SubmapTexture::set_cells(const char* value) {
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
 void SubmapQuery_Response_SubmapTexture::set_cells(const void* value, size_t size) {
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
 ::std::string* SubmapQuery_Response_SubmapTexture::mutable_cells() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return cells_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubmapQuery_Response_SubmapTexture::release_cells() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  
  return cells_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubmapQuery_Response_SubmapTexture::set_allocated_cells(::std::string* cells) {
  if (cells != NULL) {
    
  } else {
    
  }
  cells_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cells);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}

// optional int32 width = 2;
void SubmapQuery_Response_SubmapTexture::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::width() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
  return width_;
}
 void SubmapQuery_Response_SubmapTexture::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
}

// optional int32 height = 3;
void SubmapQuery_Response_SubmapTexture::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::height() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
  return height_;
}
 void SubmapQuery_Response_SubmapTexture::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
}

// optional double resolution = 4;
void SubmapQuery_Response_SubmapTexture::clear_resolution() {
  resolution_ = 0;
}
 double SubmapQuery_Response_SubmapTexture::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
  return resolution_;
}
 void SubmapQuery_Response_SubmapTexture::set_resolution(double value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
}

// optional .cartographer.transform.proto.Rigid3d slice_pose = 5;
bool SubmapQuery_Response_SubmapTexture::has_slice_pose() const {
  return !_is_default_instance_ && slice_pose_ != NULL;
}
void SubmapQuery_Response_SubmapTexture::clear_slice_pose() {
  if (GetArenaNoVirtual() == NULL && slice_pose_ != NULL) delete slice_pose_;
  slice_pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& SubmapQuery_Response_SubmapTexture::slice_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return slice_pose_ != NULL ? *slice_pose_ : *default_instance_->slice_pose_;
}
::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::mutable_slice_pose() {
  
  if (slice_pose_ == NULL) {
    slice_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return slice_pose_;
}
::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::release_slice_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = slice_pose_;
  slice_pose_ = NULL;
  return temp;
}
void SubmapQuery_Response_SubmapTexture::set_allocated_slice_pose(::cartographer::transform::proto::Rigid3d* slice_pose) {
  delete slice_pose_;
  slice_pose_ = slice_pose;
  if (slice_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
}

// -------------------------------------------------------------------

// SubmapQuery_Response

// optional int32 submap_version = 2;
void SubmapQuery_Response::clear_submap_version() {
  submap_version_ = 0;
}
 ::google::protobuf::int32 SubmapQuery_Response::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
  return submap_version_;
}
 void SubmapQuery_Response::set_submap_version(::google::protobuf::int32 value) {
  
  submap_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
}

// repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
int SubmapQuery_Response::textures_size() const {
  return textures_.size();
}
void SubmapQuery_Response::clear_textures() {
  textures_.Clear();
}
const ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture& SubmapQuery_Response::textures(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Get(index);
}
::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Mutable(index);
}
::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::add_textures() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >*
SubmapQuery_Response::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return &textures_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >&
SubmapQuery_Response::textures() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_;
}

// optional string error_message = 8;
void SubmapQuery_Response::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SubmapQuery_Response::error_message() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubmapQuery_Response::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
 void SubmapQuery_Response::set_error_message(const char* value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
 void SubmapQuery_Response::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
 ::std::string* SubmapQuery_Response::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubmapQuery_Response::release_error_message() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubmapQuery_Response::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}

// -------------------------------------------------------------------

// SubmapQuery

// optional .cartographer.mapping.proto.SubmapQuery.Request request = 1;
bool SubmapQuery::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void SubmapQuery::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::cartographer::mapping::proto::SubmapQuery_Request& SubmapQuery::request() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::cartographer::mapping::proto::SubmapQuery_Request;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.request)
  return request_;
}
::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::release_request() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.request)
  
  ::cartographer::mapping::proto::SubmapQuery_Request* temp = request_;
  request_ = NULL;
  return temp;
}
void SubmapQuery::set_allocated_request(::cartographer::mapping::proto::SubmapQuery_Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.request)
}

// optional .cartographer.mapping.proto.SubmapQuery.Response response = 2;
bool SubmapQuery::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
void SubmapQuery::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::cartographer::mapping::proto::SubmapQuery_Response& SubmapQuery::response() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::cartographer::mapping::proto::SubmapQuery_Response;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.response)
  return response_;
}
::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::release_response() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.response)
  
  ::cartographer::mapping::proto::SubmapQuery_Response* temp = response_;
  response_ = NULL;
  return temp;
}
void SubmapQuery::set_allocated_response(::cartographer::mapping::proto::SubmapQuery_Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
