// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/common/proto/ceres_solver_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/common/proto/ceres_solver_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace common {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* CeresSolverOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CeresSolverOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/common/proto/ceres_solver_options.proto");
  GOOGLE_CHECK(file != NULL);
  CeresSolverOptions_descriptor_ = file->message_type(0);
  static const int CeresSolverOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresSolverOptions, use_nonmonotonic_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresSolverOptions, max_num_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresSolverOptions, num_threads_),
  };
  CeresSolverOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CeresSolverOptions_descriptor_,
      CeresSolverOptions::default_instance_,
      CeresSolverOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(CeresSolverOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresSolverOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresSolverOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CeresSolverOptions_descriptor_, &CeresSolverOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto() {
  delete CeresSolverOptions::default_instance_;
  delete CeresSolverOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n4cartographer/common/proto/ceres_solver"
    "_options.proto\022\031cartographer.common.prot"
    "o\"e\n\022CeresSolverOptions\022\036\n\026use_nonmonoto"
    "nic_steps\030\001 \001(\010\022\032\n\022max_num_iterations\030\002 "
    "\001(\005\022\023\n\013num_threads\030\003 \001(\005b\006proto3", 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/common/proto/ceres_solver_options.proto", &protobuf_RegisterTypes);
  CeresSolverOptions::default_instance_ = new CeresSolverOptions();
  CeresSolverOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CeresSolverOptions::kUseNonmonotonicStepsFieldNumber;
const int CeresSolverOptions::kMaxNumIterationsFieldNumber;
const int CeresSolverOptions::kNumThreadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CeresSolverOptions::CeresSolverOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.common.proto.CeresSolverOptions)
}

void CeresSolverOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CeresSolverOptions::CeresSolverOptions(const CeresSolverOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.common.proto.CeresSolverOptions)
}

void CeresSolverOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  use_nonmonotonic_steps_ = false;
  max_num_iterations_ = 0;
  num_threads_ = 0;
}

CeresSolverOptions::~CeresSolverOptions() {
  // @@protoc_insertion_point(destructor:cartographer.common.proto.CeresSolverOptions)
  SharedDtor();
}

void CeresSolverOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CeresSolverOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CeresSolverOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CeresSolverOptions_descriptor_;
}

const CeresSolverOptions& CeresSolverOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  return *default_instance_;
}

CeresSolverOptions* CeresSolverOptions::default_instance_ = NULL;

CeresSolverOptions* CeresSolverOptions::New(::google::protobuf::Arena* arena) const {
  CeresSolverOptions* n = new CeresSolverOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CeresSolverOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.common.proto.CeresSolverOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CeresSolverOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CeresSolverOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(use_nonmonotonic_steps_, num_threads_);

#undef ZR_HELPER_
#undef ZR_

}

bool CeresSolverOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.common.proto.CeresSolverOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_nonmonotonic_steps = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_nonmonotonic_steps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_num_iterations;
        break;
      }

      // optional int32 max_num_iterations = 2;
      case 2: {
        if (tag == 16) {
         parse_max_num_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_iterations_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_threads;
        break;
      }

      // optional int32 num_threads = 3;
      case 3: {
        if (tag == 24) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.common.proto.CeresSolverOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.common.proto.CeresSolverOptions)
  return false;
#undef DO_
}

void CeresSolverOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.common.proto.CeresSolverOptions)
  // optional bool use_nonmonotonic_steps = 1;
  if (this->use_nonmonotonic_steps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_nonmonotonic_steps(), output);
  }

  // optional int32 max_num_iterations = 2;
  if (this->max_num_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_num_iterations(), output);
  }

  // optional int32 num_threads = 3;
  if (this->num_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_threads(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.common.proto.CeresSolverOptions)
}

::google::protobuf::uint8* CeresSolverOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.common.proto.CeresSolverOptions)
  // optional bool use_nonmonotonic_steps = 1;
  if (this->use_nonmonotonic_steps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_nonmonotonic_steps(), target);
  }

  // optional int32 max_num_iterations = 2;
  if (this->max_num_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_num_iterations(), target);
  }

  // optional int32 num_threads = 3;
  if (this->num_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_threads(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.common.proto.CeresSolverOptions)
  return target;
}

int CeresSolverOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.common.proto.CeresSolverOptions)
  int total_size = 0;

  // optional bool use_nonmonotonic_steps = 1;
  if (this->use_nonmonotonic_steps() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 max_num_iterations = 2;
  if (this->max_num_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_num_iterations());
  }

  // optional int32 num_threads = 3;
  if (this->num_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_threads());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CeresSolverOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.common.proto.CeresSolverOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CeresSolverOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CeresSolverOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.common.proto.CeresSolverOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.common.proto.CeresSolverOptions)
    MergeFrom(*source);
  }
}

void CeresSolverOptions::MergeFrom(const CeresSolverOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.common.proto.CeresSolverOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.use_nonmonotonic_steps() != 0) {
    set_use_nonmonotonic_steps(from.use_nonmonotonic_steps());
  }
  if (from.max_num_iterations() != 0) {
    set_max_num_iterations(from.max_num_iterations());
  }
  if (from.num_threads() != 0) {
    set_num_threads(from.num_threads());
  }
}

void CeresSolverOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.common.proto.CeresSolverOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CeresSolverOptions::CopyFrom(const CeresSolverOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.common.proto.CeresSolverOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CeresSolverOptions::IsInitialized() const {

  return true;
}

void CeresSolverOptions::Swap(CeresSolverOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CeresSolverOptions::InternalSwap(CeresSolverOptions* other) {
  std::swap(use_nonmonotonic_steps_, other->use_nonmonotonic_steps_);
  std::swap(max_num_iterations_, other->max_num_iterations_);
  std::swap(num_threads_, other->num_threads_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CeresSolverOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CeresSolverOptions_descriptor_;
  metadata.reflection = CeresSolverOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CeresSolverOptions

// optional bool use_nonmonotonic_steps = 1;
void CeresSolverOptions::clear_use_nonmonotonic_steps() {
  use_nonmonotonic_steps_ = false;
}
 bool CeresSolverOptions::use_nonmonotonic_steps() const {
  // @@protoc_insertion_point(field_get:cartographer.common.proto.CeresSolverOptions.use_nonmonotonic_steps)
  return use_nonmonotonic_steps_;
}
 void CeresSolverOptions::set_use_nonmonotonic_steps(bool value) {
  
  use_nonmonotonic_steps_ = value;
  // @@protoc_insertion_point(field_set:cartographer.common.proto.CeresSolverOptions.use_nonmonotonic_steps)
}

// optional int32 max_num_iterations = 2;
void CeresSolverOptions::clear_max_num_iterations() {
  max_num_iterations_ = 0;
}
 ::google::protobuf::int32 CeresSolverOptions::max_num_iterations() const {
  // @@protoc_insertion_point(field_get:cartographer.common.proto.CeresSolverOptions.max_num_iterations)
  return max_num_iterations_;
}
 void CeresSolverOptions::set_max_num_iterations(::google::protobuf::int32 value) {
  
  max_num_iterations_ = value;
  // @@protoc_insertion_point(field_set:cartographer.common.proto.CeresSolverOptions.max_num_iterations)
}

// optional int32 num_threads = 3;
void CeresSolverOptions::clear_num_threads() {
  num_threads_ = 0;
}
 ::google::protobuf::int32 CeresSolverOptions::num_threads() const {
  // @@protoc_insertion_point(field_get:cartographer.common.proto.CeresSolverOptions.num_threads)
  return num_threads_;
}
 void CeresSolverOptions::set_num_threads(::google::protobuf::int32 value) {
  
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:cartographer.common.proto.CeresSolverOptions.num_threads)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace common
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
