// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/ground_truth/proto/relations.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/ground_truth/proto/relations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace ground_truth {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroundTruth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroundTruth_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() {
  protobuf_AddDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/ground_truth/proto/relations.proto");
  GOOGLE_CHECK(file != NULL);
  Relation_descriptor_ = file->message_type(0);
  static const int Relation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, timestamp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, timestamp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, expected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, covered_distance_),
  };
  Relation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Relation_descriptor_,
      Relation::default_instance_,
      Relation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Relation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _is_default_instance_));
  GroundTruth_descriptor_ = file->message_type(1);
  static const int GroundTruth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, relation_),
  };
  GroundTruth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroundTruth_descriptor_,
      GroundTruth::default_instance_,
      GroundTruth_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroundTruth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroundTruth, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Relation_descriptor_, &Relation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroundTruth_descriptor_, &GroundTruth::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() {
  delete Relation::default_instance_;
  delete Relation_reflection_;
  delete GroundTruth::default_instance_;
  delete GroundTruth_reflection_;
}

void protobuf_AddDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/cartographer/ground_truth/proto/relati"
    "ons.proto\022\037cartographer.ground_truth.pro"
    "to\032,cartographer/transform/proto/transfo"
    "rm.proto\"\205\001\n\010Relation\022\022\n\ntimestamp1\030\001 \001("
    "\003\022\022\n\ntimestamp2\030\002 \001(\003\0227\n\010expected\030\003 \001(\0132"
    "%.cartographer.transform.proto.Rigid3d\022\030"
    "\n\020covered_distance\030\004 \001(\001\"J\n\013GroundTruth\022"
    ";\n\010relation\030\001 \003(\0132).cartographer.ground_"
    "truth.proto.Relationb\006proto3", 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/ground_truth/proto/relations.proto", &protobuf_RegisterTypes);
  Relation::default_instance_ = new Relation();
  GroundTruth::default_instance_ = new GroundTruth();
  Relation::default_instance_->InitAsDefaultInstance();
  GroundTruth::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto {
  StaticDescriptorInitializer_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto() {
    protobuf_AddDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto();
  }
} static_descriptor_initializer_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Relation::kTimestamp1FieldNumber;
const int Relation::kTimestamp2FieldNumber;
const int Relation::kExpectedFieldNumber;
const int Relation::kCoveredDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Relation::Relation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.ground_truth.proto.Relation)
}

void Relation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  expected_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

Relation::Relation(const Relation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.Relation)
}

void Relation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp1_ = GOOGLE_LONGLONG(0);
  timestamp2_ = GOOGLE_LONGLONG(0);
  expected_ = NULL;
  covered_distance_ = 0;
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.Relation)
  SharedDtor();
}

void Relation::SharedDtor() {
  if (this != default_instance_) {
    delete expected_;
  }
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation_descriptor_;
}

const Relation& Relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto();
  return *default_instance_;
}

Relation* Relation::default_instance_ = NULL;

Relation* Relation::New(::google::protobuf::Arena* arena) const {
  Relation* n = new Relation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.Relation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Relation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Relation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp1_, timestamp2_);
  if (GetArenaNoVirtual() == NULL && expected_ != NULL) delete expected_;
  expected_ = NULL;
  covered_distance_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.ground_truth.proto.Relation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp2;
        break;
      }

      // optional int64 timestamp2 = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_expected;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d expected = 3;
      case 3: {
        if (tag == 26) {
         parse_expected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_covered_distance;
        break;
      }

      // optional double covered_distance = 4;
      case 4: {
        if (tag == 33) {
         parse_covered_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &covered_distance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.ground_truth.proto.Relation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.ground_truth.proto.Relation)
  return false;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.ground_truth.proto.Relation)
  // optional int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp1(), output);
  }

  // optional int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp2(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->expected_, output);
  }

  // optional double covered_distance = 4;
  if (this->covered_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->covered_distance(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.ground_truth.proto.Relation)
}

::google::protobuf::uint8* Relation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.Relation)
  // optional int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp1(), target);
  }

  // optional int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp2(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->expected_, false, target);
  }

  // optional double covered_distance = 4;
  if (this->covered_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->covered_distance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.Relation)
  return target;
}

int Relation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.Relation)
  int total_size = 0;

  // optional int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp1());
  }

  // optional int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp2());
  }

  // optional .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expected_);
  }

  // optional double covered_distance = 4;
  if (this->covered_distance() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.ground_truth.proto.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Relation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Relation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.ground_truth.proto.Relation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.ground_truth.proto.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.timestamp1() != 0) {
    set_timestamp1(from.timestamp1());
  }
  if (from.timestamp2() != 0) {
    set_timestamp2(from.timestamp2());
  }
  if (from.has_expected()) {
    mutable_expected()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.expected());
  }
  if (from.covered_distance() != 0) {
    set_covered_distance(from.covered_distance());
  }
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.ground_truth.proto.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {

  return true;
}

void Relation::Swap(Relation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Relation::InternalSwap(Relation* other) {
  std::swap(timestamp1_, other->timestamp1_);
  std::swap(timestamp2_, other->timestamp2_);
  std::swap(expected_, other->expected_);
  std::swap(covered_distance_, other->covered_distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation_descriptor_;
  metadata.reflection = Relation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Relation

// optional int64 timestamp1 = 1;
void Relation::clear_timestamp1() {
  timestamp1_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Relation::timestamp1() const {
  // @@protoc_insertion_point(field_get:cartographer.ground_truth.proto.Relation.timestamp1)
  return timestamp1_;
}
 void Relation::set_timestamp1(::google::protobuf::int64 value) {
  
  timestamp1_ = value;
  // @@protoc_insertion_point(field_set:cartographer.ground_truth.proto.Relation.timestamp1)
}

// optional int64 timestamp2 = 2;
void Relation::clear_timestamp2() {
  timestamp2_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Relation::timestamp2() const {
  // @@protoc_insertion_point(field_get:cartographer.ground_truth.proto.Relation.timestamp2)
  return timestamp2_;
}
 void Relation::set_timestamp2(::google::protobuf::int64 value) {
  
  timestamp2_ = value;
  // @@protoc_insertion_point(field_set:cartographer.ground_truth.proto.Relation.timestamp2)
}

// optional .cartographer.transform.proto.Rigid3d expected = 3;
bool Relation::has_expected() const {
  return !_is_default_instance_ && expected_ != NULL;
}
void Relation::clear_expected() {
  if (GetArenaNoVirtual() == NULL && expected_ != NULL) delete expected_;
  expected_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& Relation::expected() const {
  // @@protoc_insertion_point(field_get:cartographer.ground_truth.proto.Relation.expected)
  return expected_ != NULL ? *expected_ : *default_instance_->expected_;
}
::cartographer::transform::proto::Rigid3d* Relation::mutable_expected() {
  
  if (expected_ == NULL) {
    expected_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.ground_truth.proto.Relation.expected)
  return expected_;
}
::cartographer::transform::proto::Rigid3d* Relation::release_expected() {
  // @@protoc_insertion_point(field_release:cartographer.ground_truth.proto.Relation.expected)
  
  ::cartographer::transform::proto::Rigid3d* temp = expected_;
  expected_ = NULL;
  return temp;
}
void Relation::set_allocated_expected(::cartographer::transform::proto::Rigid3d* expected) {
  delete expected_;
  expected_ = expected;
  if (expected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.ground_truth.proto.Relation.expected)
}

// optional double covered_distance = 4;
void Relation::clear_covered_distance() {
  covered_distance_ = 0;
}
 double Relation::covered_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.ground_truth.proto.Relation.covered_distance)
  return covered_distance_;
}
 void Relation::set_covered_distance(double value) {
  
  covered_distance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.ground_truth.proto.Relation.covered_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroundTruth::kRelationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroundTruth::GroundTruth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.ground_truth.proto.GroundTruth)
}

void GroundTruth::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroundTruth::GroundTruth(const GroundTruth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.GroundTruth)
}

void GroundTruth::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.GroundTruth)
  SharedDtor();
}

void GroundTruth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroundTruth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundTruth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroundTruth_descriptor_;
}

const GroundTruth& GroundTruth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto();
  return *default_instance_;
}

GroundTruth* GroundTruth::default_instance_ = NULL;

GroundTruth* GroundTruth::New(::google::protobuf::Arena* arena) const {
  GroundTruth* n = new GroundTruth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.GroundTruth)
  relation_.Clear();
}

bool GroundTruth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.ground_truth.proto.GroundTruth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.ground_truth.proto.Relation relation = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_relation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_relation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.ground_truth.proto.GroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.ground_truth.proto.GroundTruth)
  return false;
#undef DO_
}

void GroundTruth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.ground_truth.proto.GroundTruth)
  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  for (unsigned int i = 0, n = this->relation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relation(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.ground_truth.proto.GroundTruth)
}

::google::protobuf::uint8* GroundTruth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.GroundTruth)
  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  for (unsigned int i = 0, n = this->relation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->relation(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.GroundTruth)
  return target;
}

int GroundTruth::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.GroundTruth)
  int total_size = 0;

  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  total_size += 1 * this->relation_size();
  for (int i = 0; i < this->relation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relation(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundTruth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GroundTruth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GroundTruth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.ground_truth.proto.GroundTruth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.ground_truth.proto.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  relation_.MergeFrom(from.relation_);
}

void GroundTruth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {

  return true;
}

void GroundTruth::Swap(GroundTruth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroundTruth::InternalSwap(GroundTruth* other) {
  relation_.UnsafeArenaSwap(&other->relation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroundTruth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroundTruth_descriptor_;
  metadata.reflection = GroundTruth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroundTruth

// repeated .cartographer.ground_truth.proto.Relation relation = 1;
int GroundTruth::relation_size() const {
  return relation_.size();
}
void GroundTruth::clear_relation() {
  relation_.Clear();
}
const ::cartographer::ground_truth::proto::Relation& GroundTruth::relation(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.ground_truth.proto.GroundTruth.relation)
  return relation_.Get(index);
}
::cartographer::ground_truth::proto::Relation* GroundTruth::mutable_relation(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.ground_truth.proto.GroundTruth.relation)
  return relation_.Mutable(index);
}
::cartographer::ground_truth::proto::Relation* GroundTruth::add_relation() {
  // @@protoc_insertion_point(field_add:cartographer.ground_truth.proto.GroundTruth.relation)
  return relation_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::ground_truth::proto::Relation >*
GroundTruth::mutable_relation() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.ground_truth.proto.GroundTruth.relation)
  return &relation_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::ground_truth::proto::Relation >&
GroundTruth::relation() const {
  // @@protoc_insertion_point(field_list:cartographer.ground_truth.proto.GroundTruth.relation)
  return relation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ground_truth
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
