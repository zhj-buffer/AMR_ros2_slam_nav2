// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/adaptive_voxel_filter_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* AdaptiveVoxelFilterOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdaptiveVoxelFilterOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/sensor/proto/adaptive_voxel_filter_options.proto");
  GOOGLE_CHECK(file != NULL);
  AdaptiveVoxelFilterOptions_descriptor_ = file->message_type(0);
  static const int AdaptiveVoxelFilterOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveVoxelFilterOptions, max_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveVoxelFilterOptions, min_num_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveVoxelFilterOptions, max_range_),
  };
  AdaptiveVoxelFilterOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdaptiveVoxelFilterOptions_descriptor_,
      AdaptiveVoxelFilterOptions::default_instance_,
      AdaptiveVoxelFilterOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdaptiveVoxelFilterOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveVoxelFilterOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaptiveVoxelFilterOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdaptiveVoxelFilterOptions_descriptor_, &AdaptiveVoxelFilterOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto() {
  delete AdaptiveVoxelFilterOptions::default_instance_;
  delete AdaptiveVoxelFilterOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n=cartographer/sensor/proto/adaptive_vox"
    "el_filter_options.proto\022\031cartographer.se"
    "nsor.proto\"[\n\032AdaptiveVoxelFilterOptions"
    "\022\022\n\nmax_length\030\001 \001(\002\022\026\n\016min_num_points\030\002"
    " \001(\002\022\021\n\tmax_range\030\003 \001(\002b\006proto3", 191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/sensor/proto/adaptive_voxel_filter_options.proto", &protobuf_RegisterTypes);
  AdaptiveVoxelFilterOptions::default_instance_ = new AdaptiveVoxelFilterOptions();
  AdaptiveVoxelFilterOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaptiveVoxelFilterOptions::kMaxLengthFieldNumber;
const int AdaptiveVoxelFilterOptions::kMinNumPointsFieldNumber;
const int AdaptiveVoxelFilterOptions::kMaxRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaptiveVoxelFilterOptions::AdaptiveVoxelFilterOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
}

void AdaptiveVoxelFilterOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AdaptiveVoxelFilterOptions::AdaptiveVoxelFilterOptions(const AdaptiveVoxelFilterOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
}

void AdaptiveVoxelFilterOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  max_length_ = 0;
  min_num_points_ = 0;
  max_range_ = 0;
}

AdaptiveVoxelFilterOptions::~AdaptiveVoxelFilterOptions() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  SharedDtor();
}

void AdaptiveVoxelFilterOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdaptiveVoxelFilterOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaptiveVoxelFilterOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdaptiveVoxelFilterOptions_descriptor_;
}

const AdaptiveVoxelFilterOptions& AdaptiveVoxelFilterOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto();
  return *default_instance_;
}

AdaptiveVoxelFilterOptions* AdaptiveVoxelFilterOptions::default_instance_ = NULL;

AdaptiveVoxelFilterOptions* AdaptiveVoxelFilterOptions::New(::google::protobuf::Arena* arena) const {
  AdaptiveVoxelFilterOptions* n = new AdaptiveVoxelFilterOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaptiveVoxelFilterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AdaptiveVoxelFilterOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AdaptiveVoxelFilterOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_length_, max_range_);

#undef ZR_HELPER_
#undef ZR_

}

bool AdaptiveVoxelFilterOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float max_length = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_min_num_points;
        break;
      }

      // optional float min_num_points = 2;
      case 2: {
        if (tag == 21) {
         parse_min_num_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_num_points_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_max_range;
        break;
      }

      // optional float max_range = 3;
      case 3: {
        if (tag == 29) {
         parse_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  return false;
#undef DO_
}

void AdaptiveVoxelFilterOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  // optional float max_length = 1;
  if (this->max_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_length(), output);
  }

  // optional float min_num_points = 2;
  if (this->min_num_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_num_points(), output);
  }

  // optional float max_range = 3;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_range(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
}

::google::protobuf::uint8* AdaptiveVoxelFilterOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  // optional float max_length = 1;
  if (this->max_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_length(), target);
  }

  // optional float min_num_points = 2;
  if (this->min_num_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_num_points(), target);
  }

  // optional float max_range = 3;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_range(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  return target;
}

int AdaptiveVoxelFilterOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  int total_size = 0;

  // optional float max_length = 1;
  if (this->max_length() != 0) {
    total_size += 1 + 4;
  }

  // optional float min_num_points = 2;
  if (this->min_num_points() != 0) {
    total_size += 1 + 4;
  }

  // optional float max_range = 3;
  if (this->max_range() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaptiveVoxelFilterOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdaptiveVoxelFilterOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdaptiveVoxelFilterOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
    MergeFrom(*source);
  }
}

void AdaptiveVoxelFilterOptions::MergeFrom(const AdaptiveVoxelFilterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.max_length() != 0) {
    set_max_length(from.max_length());
  }
  if (from.min_num_points() != 0) {
    set_min_num_points(from.min_num_points());
  }
  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
}

void AdaptiveVoxelFilterOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptiveVoxelFilterOptions::CopyFrom(const AdaptiveVoxelFilterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveVoxelFilterOptions::IsInitialized() const {

  return true;
}

void AdaptiveVoxelFilterOptions::Swap(AdaptiveVoxelFilterOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaptiveVoxelFilterOptions::InternalSwap(AdaptiveVoxelFilterOptions* other) {
  std::swap(max_length_, other->max_length_);
  std::swap(min_num_points_, other->min_num_points_);
  std::swap(max_range_, other->max_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdaptiveVoxelFilterOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdaptiveVoxelFilterOptions_descriptor_;
  metadata.reflection = AdaptiveVoxelFilterOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaptiveVoxelFilterOptions

// optional float max_length = 1;
void AdaptiveVoxelFilterOptions::clear_max_length() {
  max_length_ = 0;
}
 float AdaptiveVoxelFilterOptions::max_length() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_length)
  return max_length_;
}
 void AdaptiveVoxelFilterOptions::set_max_length(float value) {
  
  max_length_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_length)
}

// optional float min_num_points = 2;
void AdaptiveVoxelFilterOptions::clear_min_num_points() {
  min_num_points_ = 0;
}
 float AdaptiveVoxelFilterOptions::min_num_points() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.min_num_points)
  return min_num_points_;
}
 void AdaptiveVoxelFilterOptions::set_min_num_points(float value) {
  
  min_num_points_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.min_num_points)
}

// optional float max_range = 3;
void AdaptiveVoxelFilterOptions::clear_max_range() {
  max_range_ = 0;
}
 float AdaptiveVoxelFilterOptions::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_range)
  return max_range_;
}
 void AdaptiveVoxelFilterOptions::set_max_range(float value) {
  
  max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
