// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* CompressedPointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedPointCloud_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimedPointCloudData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimedPointCloudData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImuData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImuData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OdometryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OdometryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedFramePoseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedFramePoseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandmarkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandmarkData_LandmarkObservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkData_LandmarkObservation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/sensor/proto/sensor.proto");
  GOOGLE_CHECK(file != NULL);
  CompressedPointCloud_descriptor_ = file->message_type(0);
  static const int CompressedPointCloud_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, num_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, point_data_),
  };
  CompressedPointCloud_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompressedPointCloud_descriptor_,
      CompressedPointCloud::default_instance_,
      CompressedPointCloud_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompressedPointCloud),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _is_default_instance_));
  TimedPointCloudData_descriptor_ = file->message_type(1);
  static const int TimedPointCloudData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, point_data_),
  };
  TimedPointCloudData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimedPointCloudData_descriptor_,
      TimedPointCloudData::default_instance_,
      TimedPointCloudData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimedPointCloudData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, _is_default_instance_));
  RangeData_descriptor_ = file->message_type(2);
  static const int RangeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, returns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, misses_),
  };
  RangeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeData_descriptor_,
      RangeData::default_instance_,
      RangeData_offsets_,
      -1,
      -1,
      -1,
      sizeof(RangeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, _is_default_instance_));
  ImuData_descriptor_ = file->message_type(3);
  static const int ImuData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, angular_velocity_),
  };
  ImuData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImuData_descriptor_,
      ImuData::default_instance_,
      ImuData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImuData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _is_default_instance_));
  OdometryData_descriptor_ = file->message_type(4);
  static const int OdometryData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, pose_),
  };
  OdometryData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OdometryData_descriptor_,
      OdometryData::default_instance_,
      OdometryData_offsets_,
      -1,
      -1,
      -1,
      sizeof(OdometryData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _is_default_instance_));
  FixedFramePoseData_descriptor_ = file->message_type(5);
  static const int FixedFramePoseData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, pose_),
  };
  FixedFramePoseData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FixedFramePoseData_descriptor_,
      FixedFramePoseData::default_instance_,
      FixedFramePoseData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FixedFramePoseData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _is_default_instance_));
  LandmarkData_descriptor_ = file->message_type(6);
  static const int LandmarkData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, landmark_observations_),
  };
  LandmarkData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LandmarkData_descriptor_,
      LandmarkData::default_instance_,
      LandmarkData_offsets_,
      -1,
      -1,
      -1,
      sizeof(LandmarkData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, _is_default_instance_));
  LandmarkData_LandmarkObservation_descriptor_ = LandmarkData_descriptor_->nested_type(0);
  static const int LandmarkData_LandmarkObservation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, landmark_to_tracking_transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, rotation_weight_),
  };
  LandmarkData_LandmarkObservation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LandmarkData_LandmarkObservation_descriptor_,
      LandmarkData_LandmarkObservation::default_instance_,
      LandmarkData_LandmarkObservation_offsets_,
      -1,
      -1,
      -1,
      sizeof(LandmarkData_LandmarkObservation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompressedPointCloud_descriptor_, &CompressedPointCloud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimedPointCloudData_descriptor_, &TimedPointCloudData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeData_descriptor_, &RangeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImuData_descriptor_, &ImuData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OdometryData_descriptor_, &OdometryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FixedFramePoseData_descriptor_, &FixedFramePoseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LandmarkData_descriptor_, &LandmarkData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LandmarkData_LandmarkObservation_descriptor_, &LandmarkData_LandmarkObservation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  delete CompressedPointCloud::default_instance_;
  delete CompressedPointCloud_reflection_;
  delete TimedPointCloudData::default_instance_;
  delete TimedPointCloudData_reflection_;
  delete RangeData::default_instance_;
  delete RangeData_reflection_;
  delete ImuData::default_instance_;
  delete ImuData_reflection_;
  delete OdometryData::default_instance_;
  delete OdometryData_reflection_;
  delete FixedFramePoseData::default_instance_;
  delete FixedFramePoseData_reflection_;
  delete LandmarkData::default_instance_;
  delete LandmarkData_reflection_;
  delete LandmarkData_LandmarkObservation::default_instance_;
  delete LandmarkData_LandmarkObservation_reflection_;
}

void protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&cartographer/sensor/proto/sensor.proto"
    "\022\031cartographer.sensor.proto\032,cartographe"
    "r/transform/proto/transform.proto\">\n\024Com"
    "pressedPointCloud\022\022\n\nnum_points\030\001 \001(\005\022\022\n"
    "\npoint_data\030\003 \003(\005\"\234\001\n\023TimedPointCloudDat"
    "a\022\021\n\ttimestamp\030\001 \001(\003\0226\n\006origin\030\002 \001(\0132&.c"
    "artographer.transform.proto.Vector3f\022:\n\n"
    "point_data\030\003 \003(\0132&.cartographer.transfor"
    "m.proto.Vector4f\"\264\001\n\tRangeData\0226\n\006origin"
    "\030\001 \001(\0132&.cartographer.transform.proto.Ve"
    "ctor3f\0227\n\007returns\030\002 \003(\0132&.cartographer.t"
    "ransform.proto.Vector3f\0226\n\006misses\030\003 \003(\0132"
    "&.cartographer.transform.proto.Vector3f\""
    "\243\001\n\007ImuData\022\021\n\ttimestamp\030\001 \001(\003\022C\n\023linear"
    "_acceleration\030\002 \001(\0132&.cartographer.trans"
    "form.proto.Vector3d\022@\n\020angular_velocity\030"
    "\003 \001(\0132&.cartographer.transform.proto.Vec"
    "tor3d\"V\n\014OdometryData\022\021\n\ttimestamp\030\001 \001(\003"
    "\0223\n\004pose\030\002 \001(\0132%.cartographer.transform."
    "proto.Rigid3d\"\\\n\022FixedFramePoseData\022\021\n\tt"
    "imestamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%.cartograp"
    "her.transform.proto.Rigid3d\"\245\002\n\014Landmark"
    "Data\022\021\n\ttimestamp\030\001 \001(\003\022Z\n\025landmark_obse"
    "rvations\030\002 \003(\0132;.cartographer.sensor.pro"
    "to.LandmarkData.LandmarkObservation\032\245\001\n\023"
    "LandmarkObservation\022\n\n\002id\030\001 \001(\014\022M\n\036landm"
    "ark_to_tracking_transform\030\002 \001(\0132%.cartog"
    "rapher.transform.proto.Rigid3d\022\032\n\022transl"
    "ation_weight\030\003 \001(\001\022\027\n\017rotation_weight\030\004 "
    "\001(\001B\010B\006Sensorb\006proto3", 1181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/sensor/proto/sensor.proto", &protobuf_RegisterTypes);
  CompressedPointCloud::default_instance_ = new CompressedPointCloud();
  TimedPointCloudData::default_instance_ = new TimedPointCloudData();
  RangeData::default_instance_ = new RangeData();
  ImuData::default_instance_ = new ImuData();
  OdometryData::default_instance_ = new OdometryData();
  FixedFramePoseData::default_instance_ = new FixedFramePoseData();
  LandmarkData::default_instance_ = new LandmarkData();
  LandmarkData_LandmarkObservation::default_instance_ = new LandmarkData_LandmarkObservation();
  CompressedPointCloud::default_instance_->InitAsDefaultInstance();
  TimedPointCloudData::default_instance_->InitAsDefaultInstance();
  RangeData::default_instance_->InitAsDefaultInstance();
  ImuData::default_instance_->InitAsDefaultInstance();
  OdometryData::default_instance_->InitAsDefaultInstance();
  FixedFramePoseData::default_instance_->InitAsDefaultInstance();
  LandmarkData::default_instance_->InitAsDefaultInstance();
  LandmarkData_LandmarkObservation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fsensor_2fproto_2fsensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fsensor_2eproto {
  StaticDescriptorInitializer_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
    protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  }
} static_descriptor_initializer_cartographer_2fsensor_2fproto_2fsensor_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedPointCloud::kNumPointsFieldNumber;
const int CompressedPointCloud::kPointDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedPointCloud::CompressedPointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.CompressedPointCloud)
}

void CompressedPointCloud::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedPointCloud)
}

void CompressedPointCloud::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_points_ = 0;
}

CompressedPointCloud::~CompressedPointCloud() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedPointCloud)
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressedPointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedPointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedPointCloud_descriptor_;
}

const CompressedPointCloud& CompressedPointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

CompressedPointCloud* CompressedPointCloud::default_instance_ = NULL;

CompressedPointCloud* CompressedPointCloud::New(::google::protobuf::Arena* arena) const {
  CompressedPointCloud* n = new CompressedPointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedPointCloud)
  num_points_ = 0;
  point_data_.Clear();
}

bool CompressedPointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.CompressedPointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_points = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_points_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_point_data;
        break;
      }

      // repeated int32 point_data = 3;
      case 3: {
        if (tag == 26) {
         parse_point_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_point_data())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_point_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.CompressedPointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.CompressedPointCloud)
  return false;
#undef DO_
}

void CompressedPointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.CompressedPointCloud)
  // optional int32 num_points = 1;
  if (this->num_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_points(), output);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_data_cached_byte_size_);
  }
  for (int i = 0; i < this->point_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->point_data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.CompressedPointCloud)
}

::google::protobuf::uint8* CompressedPointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedPointCloud)
  // optional int32 num_points = 1;
  if (this->num_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_points(), target);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _point_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->point_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->point_data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedPointCloud)
  return target;
}

int CompressedPointCloud::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedPointCloud)
  int total_size = 0;

  // optional int32 num_points = 1;
  if (this->num_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_points());
  }

  // repeated int32 point_data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->point_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->point_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompressedPointCloud* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedPointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.CompressedPointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.CompressedPointCloud)
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_data_.MergeFrom(from.point_data_);
  if (from.num_points() != 0) {
    set_num_points(from.num_points());
  }
}

void CompressedPointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {

  return true;
}

void CompressedPointCloud::Swap(CompressedPointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedPointCloud::InternalSwap(CompressedPointCloud* other) {
  std::swap(num_points_, other->num_points_);
  point_data_.UnsafeArenaSwap(&other->point_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedPointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedPointCloud_descriptor_;
  metadata.reflection = CompressedPointCloud_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedPointCloud

// optional int32 num_points = 1;
void CompressedPointCloud::clear_num_points() {
  num_points_ = 0;
}
 ::google::protobuf::int32 CompressedPointCloud::num_points() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.num_points)
  return num_points_;
}
 void CompressedPointCloud::set_num_points(::google::protobuf::int32 value) {
  
  num_points_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.num_points)
}

// repeated int32 point_data = 3;
int CompressedPointCloud::point_data_size() const {
  return point_data_.size();
}
void CompressedPointCloud::clear_point_data() {
  point_data_.Clear();
}
 ::google::protobuf::int32 CompressedPointCloud::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_.Get(index);
}
 void CompressedPointCloud::set_point_data(int index, ::google::protobuf::int32 value) {
  point_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
 void CompressedPointCloud::add_point_data(::google::protobuf::int32 value) {
  point_data_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompressedPointCloud::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompressedPointCloud::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return &point_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimedPointCloudData::kTimestampFieldNumber;
const int TimedPointCloudData::kOriginFieldNumber;
const int TimedPointCloudData::kPointDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimedPointCloudData::TimedPointCloudData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.TimedPointCloudData)
}

void TimedPointCloudData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(&::cartographer::transform::proto::Vector3f::default_instance());
}

TimedPointCloudData::TimedPointCloudData(const TimedPointCloudData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedPointCloudData)
}

void TimedPointCloudData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  origin_ = NULL;
}

TimedPointCloudData::~TimedPointCloudData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedPointCloudData)
  SharedDtor();
}

void TimedPointCloudData::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void TimedPointCloudData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimedPointCloudData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimedPointCloudData_descriptor_;
}

const TimedPointCloudData& TimedPointCloudData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

TimedPointCloudData* TimedPointCloudData::default_instance_ = NULL;

TimedPointCloudData* TimedPointCloudData::New(::google::protobuf::Arena* arena) const {
  TimedPointCloudData* n = new TimedPointCloudData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimedPointCloudData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedPointCloudData)
  timestamp_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
  point_data_.Clear();
}

bool TimedPointCloudData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.TimedPointCloudData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_origin;
        break;
      }

      // optional .cartographer.transform.proto.Vector3f origin = 2;
      case 2: {
        if (tag == 18) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_point_data;
        break;
      }

      // repeated .cartographer.transform.proto.Vector4f point_data = 3;
      case 3: {
        if (tag == 26) {
         parse_point_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_point_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_point_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.TimedPointCloudData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.TimedPointCloudData)
  return false;
#undef DO_
}

void TimedPointCloudData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.TimedPointCloudData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->origin_, output);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data = 3;
  for (unsigned int i = 0, n = this->point_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point_data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.TimedPointCloudData)
}

::google::protobuf::uint8* TimedPointCloudData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedPointCloudData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->origin_, false, target);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data = 3;
  for (unsigned int i = 0, n = this->point_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->point_data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedPointCloudData)
  return target;
}

int TimedPointCloudData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedPointCloudData)
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->origin_);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data = 3;
  total_size += 1 * this->point_data_size();
  for (int i = 0; i < this->point_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point_data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimedPointCloudData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TimedPointCloudData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimedPointCloudData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.TimedPointCloudData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.TimedPointCloudData)
    MergeFrom(*source);
  }
}

void TimedPointCloudData::MergeFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_data_.MergeFrom(from.point_data_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_origin()) {
    mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from.origin());
  }
}

void TimedPointCloudData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedPointCloudData::CopyFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedPointCloudData::IsInitialized() const {

  return true;
}

void TimedPointCloudData::Swap(TimedPointCloudData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimedPointCloudData::InternalSwap(TimedPointCloudData* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(origin_, other->origin_);
  point_data_.UnsafeArenaSwap(&other->point_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimedPointCloudData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimedPointCloudData_descriptor_;
  metadata.reflection = TimedPointCloudData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimedPointCloudData

// optional int64 timestamp = 1;
void TimedPointCloudData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TimedPointCloudData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.timestamp)
  return timestamp_;
}
 void TimedPointCloudData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.TimedPointCloudData.timestamp)
}

// optional .cartographer.transform.proto.Vector3f origin = 2;
bool TimedPointCloudData::has_origin() const {
  return !_is_default_instance_ && origin_ != NULL;
}
void TimedPointCloudData::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
}
const ::cartographer::transform::proto::Vector3f& TimedPointCloudData::origin() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::cartographer::transform::proto::Vector3f* TimedPointCloudData::mutable_origin() {
  
  if (origin_ == NULL) {
    origin_ = new ::cartographer::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.origin)
  return origin_;
}
::cartographer::transform::proto::Vector3f* TimedPointCloudData::release_origin() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.TimedPointCloudData.origin)
  
  ::cartographer::transform::proto::Vector3f* temp = origin_;
  origin_ = NULL;
  return temp;
}
void TimedPointCloudData::set_allocated_origin(::cartographer::transform::proto::Vector3f* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.TimedPointCloudData.origin)
}

// repeated .cartographer.transform.proto.Vector4f point_data = 3;
int TimedPointCloudData::point_data_size() const {
  return point_data_.size();
}
void TimedPointCloudData::clear_point_data() {
  point_data_.Clear();
}
const ::cartographer::transform::proto::Vector4f& TimedPointCloudData::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_.Get(index);
}
::cartographer::transform::proto::Vector4f* TimedPointCloudData::mutable_point_data(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_.Mutable(index);
}
::cartographer::transform::proto::Vector4f* TimedPointCloudData::add_point_data() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::transform::proto::Vector4f >*
TimedPointCloudData::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return &point_data_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::transform::proto::Vector4f >&
TimedPointCloudData::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeData::kOriginFieldNumber;
const int RangeData::kReturnsFieldNumber;
const int RangeData::kMissesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeData::RangeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.RangeData)
}

void RangeData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(&::cartographer::transform::proto::Vector3f::default_instance());
}

RangeData::RangeData(const RangeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangeData)
}

void RangeData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  origin_ = NULL;
}

RangeData::~RangeData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangeData)
  SharedDtor();
}

void RangeData::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void RangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeData_descriptor_;
}

const RangeData& RangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

RangeData* RangeData::default_instance_ = NULL;

RangeData* RangeData::New(::google::protobuf::Arena* arena) const {
  RangeData* n = new RangeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangeData)
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
  returns_.Clear();
  misses_.Clear();
}

bool RangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.RangeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector3f origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_returns;
        break;
      }

      // repeated .cartographer.transform.proto.Vector3f returns = 2;
      case 2: {
        if (tag == 18) {
         parse_returns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_returns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_returns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_returns;
        if (input->ExpectTag(26)) goto parse_loop_misses;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .cartographer.transform.proto.Vector3f misses = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_misses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_misses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_misses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.RangeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.RangeData)
  return false;
#undef DO_
}

void RangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.RangeData)
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // repeated .cartographer.transform.proto.Vector3f returns = 2;
  for (unsigned int i = 0, n = this->returns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->returns(i), output);
  }

  // repeated .cartographer.transform.proto.Vector3f misses = 3;
  for (unsigned int i = 0, n = this->misses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->misses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.RangeData)
}

::google::protobuf::uint8* RangeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangeData)
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, false, target);
  }

  // repeated .cartographer.transform.proto.Vector3f returns = 2;
  for (unsigned int i = 0, n = this->returns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->returns(i), false, target);
  }

  // repeated .cartographer.transform.proto.Vector3f misses = 3;
  for (unsigned int i = 0, n = this->misses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->misses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangeData)
  return target;
}

int RangeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangeData)
  int total_size = 0;

  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->origin_);
  }

  // repeated .cartographer.transform.proto.Vector3f returns = 2;
  total_size += 1 * this->returns_size();
  for (int i = 0; i < this->returns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->returns(i));
  }

  // repeated .cartographer.transform.proto.Vector3f misses = 3;
  total_size += 1 * this->misses_size();
  for (int i = 0; i < this->misses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->misses(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.RangeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RangeData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.RangeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.RangeData)
    MergeFrom(*source);
  }
}

void RangeData::MergeFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  returns_.MergeFrom(from.returns_);
  misses_.MergeFrom(from.misses_);
  if (from.has_origin()) {
    mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from.origin());
  }
}

void RangeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeData::CopyFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeData::IsInitialized() const {

  return true;
}

void RangeData::Swap(RangeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeData::InternalSwap(RangeData* other) {
  std::swap(origin_, other->origin_);
  returns_.UnsafeArenaSwap(&other->returns_);
  misses_.UnsafeArenaSwap(&other->misses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeData_descriptor_;
  metadata.reflection = RangeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeData

// optional .cartographer.transform.proto.Vector3f origin = 1;
bool RangeData::has_origin() const {
  return !_is_default_instance_ && origin_ != NULL;
}
void RangeData::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
}
const ::cartographer::transform::proto::Vector3f& RangeData::origin() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::cartographer::transform::proto::Vector3f* RangeData::mutable_origin() {
  
  if (origin_ == NULL) {
    origin_ = new ::cartographer::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.origin)
  return origin_;
}
::cartographer::transform::proto::Vector3f* RangeData::release_origin() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.RangeData.origin)
  
  ::cartographer::transform::proto::Vector3f* temp = origin_;
  origin_ = NULL;
  return temp;
}
void RangeData::set_allocated_origin(::cartographer::transform::proto::Vector3f* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.RangeData.origin)
}

// repeated .cartographer.transform.proto.Vector3f returns = 2;
int RangeData::returns_size() const {
  return returns_.size();
}
void RangeData::clear_returns() {
  returns_.Clear();
}
const ::cartographer::transform::proto::Vector3f& RangeData::returns(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.returns)
  return returns_.Get(index);
}
::cartographer::transform::proto::Vector3f* RangeData::mutable_returns(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.returns)
  return returns_.Mutable(index);
}
::cartographer::transform::proto::Vector3f* RangeData::add_returns() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.returns)
  return returns_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >*
RangeData::mutable_returns() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.returns)
  return &returns_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >&
RangeData::returns() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.returns)
  return returns_;
}

// repeated .cartographer.transform.proto.Vector3f misses = 3;
int RangeData::misses_size() const {
  return misses_.size();
}
void RangeData::clear_misses() {
  misses_.Clear();
}
const ::cartographer::transform::proto::Vector3f& RangeData::misses(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.misses)
  return misses_.Get(index);
}
::cartographer::transform::proto::Vector3f* RangeData::mutable_misses(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.misses)
  return misses_.Mutable(index);
}
::cartographer::transform::proto::Vector3f* RangeData::add_misses() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.misses)
  return misses_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >*
RangeData::mutable_misses() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.misses)
  return &misses_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::transform::proto::Vector3f >&
RangeData::misses() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.misses)
  return misses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kTimestampFieldNumber;
const int ImuData::kLinearAccelerationFieldNumber;
const int ImuData::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.ImuData)
}

void ImuData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  linear_acceleration_ = const_cast< ::cartographer::transform::proto::Vector3d*>(&::cartographer::transform::proto::Vector3d::default_instance());
  angular_velocity_ = const_cast< ::cartographer::transform::proto::Vector3d*>(&::cartographer::transform::proto::Vector3d::default_instance());
}

ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.ImuData)
}

void ImuData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  linear_acceleration_ = NULL;
  angular_velocity_ = NULL;
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != default_instance_) {
    delete linear_acceleration_;
    delete angular_velocity_;
  }
}

void ImuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuData_descriptor_;
}

const ImuData& ImuData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

ImuData* ImuData::default_instance_ = NULL;

ImuData* ImuData::New(::google::protobuf::Arena* arena) const {
  ImuData* n = new ImuData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.ImuData)
  timestamp_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.ImuData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linear_acceleration;
        break;
      }

      // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2: {
        if (tag == 18) {
         parse_linear_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_angular_velocity;
        break;
      }

      // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.ImuData)
  return false;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.ImuData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->linear_acceleration_, output);
  }

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angular_velocity_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.ImuData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->linear_acceleration_, false, target);
  }

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angular_velocity_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.ImuData)
  return target;
}

int ImuData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.ImuData)
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.ImuData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImuData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.ImuData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::cartographer::transform::proto::Vector3d::MergeFrom(from.linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::cartographer::transform::proto::Vector3d::MergeFrom(from.angular_velocity());
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {

  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(angular_velocity_, other->angular_velocity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImuData_descriptor_;
  metadata.reflection = ImuData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImuData

// optional int64 timestamp = 1;
void ImuData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ImuData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.timestamp)
  return timestamp_;
}
 void ImuData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.ImuData.timestamp)
}

// optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
bool ImuData::has_linear_acceleration() const {
  return !_is_default_instance_ && linear_acceleration_ != NULL;
}
void ImuData::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
}
const ::cartographer::transform::proto::Vector3d& ImuData::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
::cartographer::transform::proto::Vector3d* ImuData::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::cartographer::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.linear_acceleration)
  return linear_acceleration_;
}
::cartographer::transform::proto::Vector3d* ImuData::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.linear_acceleration)
  
  ::cartographer::transform::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void ImuData::set_allocated_linear_acceleration(::cartographer::transform::proto::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.linear_acceleration)
}

// optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
bool ImuData::has_angular_velocity() const {
  return !_is_default_instance_ && angular_velocity_ != NULL;
}
void ImuData::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::cartographer::transform::proto::Vector3d& ImuData::angular_velocity() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
::cartographer::transform::proto::Vector3d* ImuData::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::cartographer::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.angular_velocity)
  return angular_velocity_;
}
::cartographer::transform::proto::Vector3d* ImuData::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.angular_velocity)
  
  ::cartographer::transform::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void ImuData::set_allocated_angular_velocity(::cartographer::transform::proto::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.angular_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kTimestampFieldNumber;
const int OdometryData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.OdometryData)
}

void OdometryData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.OdometryData)
}

void OdometryData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  pose_ = NULL;
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OdometryData_descriptor_;
}

const OdometryData& OdometryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

OdometryData* OdometryData::default_instance_ = NULL;

OdometryData* OdometryData::New(::google::protobuf::Arena* arena) const {
  OdometryData* n = new OdometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.OdometryData)
  timestamp_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.OdometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.OdometryData)
  return false;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.OdometryData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.OdometryData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.OdometryData)
  return target;
}

int OdometryData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.OdometryData)
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.OdometryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OdometryData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.OdometryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {

  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(pose_, other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OdometryData_descriptor_;
  metadata.reflection = OdometryData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryData

// optional int64 timestamp = 1;
void OdometryData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 OdometryData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.timestamp)
  return timestamp_;
}
 void OdometryData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.OdometryData.timestamp)
}

// optional .cartographer.transform.proto.Rigid3d pose = 2;
bool OdometryData::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void OdometryData::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& OdometryData::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::cartographer::transform::proto::Rigid3d* OdometryData::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.OdometryData.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* OdometryData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.OdometryData.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void OdometryData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.OdometryData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedFramePoseData::kTimestampFieldNumber;
const int FixedFramePoseData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedFramePoseData::FixedFramePoseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.FixedFramePoseData)
}

void FixedFramePoseData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  pose_ = NULL;
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != default_instance_) {
    delete pose_;
  }
}

void FixedFramePoseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedFramePoseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedFramePoseData_descriptor_;
}

const FixedFramePoseData& FixedFramePoseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

FixedFramePoseData* FixedFramePoseData::default_instance_ = NULL;

FixedFramePoseData* FixedFramePoseData::New(::google::protobuf::Arena* arena) const {
  FixedFramePoseData* n = new FixedFramePoseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.FixedFramePoseData)
  timestamp_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}

bool FixedFramePoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.FixedFramePoseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.FixedFramePoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.FixedFramePoseData)
  return false;
#undef DO_
}

void FixedFramePoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.FixedFramePoseData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.FixedFramePoseData)
}

::google::protobuf::uint8* FixedFramePoseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.FixedFramePoseData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.FixedFramePoseData)
  return target;
}

int FixedFramePoseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.FixedFramePoseData)
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FixedFramePoseData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedFramePoseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.FixedFramePoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
}

void FixedFramePoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {

  return true;
}

void FixedFramePoseData::Swap(FixedFramePoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(pose_, other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedFramePoseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedFramePoseData_descriptor_;
  metadata.reflection = FixedFramePoseData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedFramePoseData

// optional int64 timestamp = 1;
void FixedFramePoseData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FixedFramePoseData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.timestamp)
  return timestamp_;
}
 void FixedFramePoseData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.FixedFramePoseData.timestamp)
}

// optional .cartographer.transform.proto.Rigid3d pose = 2;
bool FixedFramePoseData::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
void FixedFramePoseData::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& FixedFramePoseData::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
::cartographer::transform::proto::Rigid3d* FixedFramePoseData::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.FixedFramePoseData.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* FixedFramePoseData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.FixedFramePoseData.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void FixedFramePoseData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.FixedFramePoseData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData_LandmarkObservation::kIdFieldNumber;
const int LandmarkData_LandmarkObservation::kLandmarkToTrackingTransformFieldNumber;
const int LandmarkData_LandmarkObservation::kTranslationWeightFieldNumber;
const int LandmarkData_LandmarkObservation::kRotationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

void LandmarkData_LandmarkObservation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  landmark_to_tracking_transform_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation(const LandmarkData_LandmarkObservation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

void LandmarkData_LandmarkObservation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  landmark_to_tracking_transform_ = NULL;
  translation_weight_ = 0;
  rotation_weight_ = 0;
}

LandmarkData_LandmarkObservation::~LandmarkData_LandmarkObservation() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  SharedDtor();
}

void LandmarkData_LandmarkObservation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete landmark_to_tracking_transform_;
  }
}

void LandmarkData_LandmarkObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkData_LandmarkObservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkData_LandmarkObservation_descriptor_;
}

const LandmarkData_LandmarkObservation& LandmarkData_LandmarkObservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

LandmarkData_LandmarkObservation* LandmarkData_LandmarkObservation::default_instance_ = NULL;

LandmarkData_LandmarkObservation* LandmarkData_LandmarkObservation::New(::google::protobuf::Arena* arena) const {
  LandmarkData_LandmarkObservation* n = new LandmarkData_LandmarkObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkData_LandmarkObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LandmarkData_LandmarkObservation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LandmarkData_LandmarkObservation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(translation_weight_, rotation_weight_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && landmark_to_tracking_transform_ != NULL) delete landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool LandmarkData_LandmarkObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_landmark_to_tracking_transform;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
      case 2: {
        if (tag == 18) {
         parse_landmark_to_tracking_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_to_tracking_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_translation_weight;
        break;
      }

      // optional double translation_weight = 3;
      case 3: {
        if (tag == 25) {
         parse_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rotation_weight;
        break;
      }

      // optional double rotation_weight = 4;
      case 4: {
        if (tag == 33) {
         parse_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return false;
#undef DO_
}

void LandmarkData_LandmarkObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  // optional bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->landmark_to_tracking_transform_, output);
  }

  // optional double translation_weight = 3;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->translation_weight(), output);
  }

  // optional double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rotation_weight(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

::google::protobuf::uint8* LandmarkData_LandmarkObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  // optional bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->landmark_to_tracking_transform_, false, target);
  }

  // optional double translation_weight = 3;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->translation_weight(), target);
  }

  // optional double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rotation_weight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return target;
}

int LandmarkData_LandmarkObservation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  int total_size = 0;

  // optional bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // optional .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->landmark_to_tracking_transform_);
  }

  // optional double translation_weight = 3;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkData_LandmarkObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LandmarkData_LandmarkObservation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkData_LandmarkObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    MergeFrom(*source);
  }
}

void LandmarkData_LandmarkObservation::MergeFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_landmark_to_tracking_transform()) {
    mutable_landmark_to_tracking_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.landmark_to_tracking_transform());
  }
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
}

void LandmarkData_LandmarkObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData_LandmarkObservation::CopyFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData_LandmarkObservation::IsInitialized() const {

  return true;
}

void LandmarkData_LandmarkObservation::Swap(LandmarkData_LandmarkObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData_LandmarkObservation::InternalSwap(LandmarkData_LandmarkObservation* other) {
  id_.Swap(&other->id_);
  std::swap(landmark_to_tracking_transform_, other->landmark_to_tracking_transform_);
  std::swap(translation_weight_, other->translation_weight_);
  std::swap(rotation_weight_, other->rotation_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkData_LandmarkObservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkData_LandmarkObservation_descriptor_;
  metadata.reflection = LandmarkData_LandmarkObservation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData::kTimestampFieldNumber;
const int LandmarkData::kLandmarkObservationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData::LandmarkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData)
}

void LandmarkData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LandmarkData::LandmarkData(const LandmarkData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData)
}

void LandmarkData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData)
  SharedDtor();
}

void LandmarkData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LandmarkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkData_descriptor_;
}

const LandmarkData& LandmarkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  return *default_instance_;
}

LandmarkData* LandmarkData::default_instance_ = NULL;

LandmarkData* LandmarkData::New(::google::protobuf::Arena* arena) const {
  LandmarkData* n = new LandmarkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData)
  timestamp_ = GOOGLE_LONGLONG(0);
  landmark_observations_.Clear();
}

bool LandmarkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_landmark_observations;
        break;
      }

      // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
      case 2: {
        if (tag == 18) {
         parse_landmark_observations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_landmark_observations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_landmark_observations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_landmark_observations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData)
  return false;
#undef DO_
}

void LandmarkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned int i = 0, n = this->landmark_observations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->landmark_observations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData)
}

::google::protobuf::uint8* LandmarkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned int i = 0, n = this->landmark_observations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->landmark_observations(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData)
  return target;
}

int LandmarkData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData)
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  total_size += 1 * this->landmark_observations_size();
  for (int i = 0; i < this->landmark_observations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmark_observations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LandmarkData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData)
    MergeFrom(*source);
  }
}

void LandmarkData::MergeFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  landmark_observations_.MergeFrom(from.landmark_observations_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LandmarkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {

  return true;
}

void LandmarkData::Swap(LandmarkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData::InternalSwap(LandmarkData* other) {
  std::swap(timestamp_, other->timestamp_);
  landmark_observations_.UnsafeArenaSwap(&other->landmark_observations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkData_descriptor_;
  metadata.reflection = LandmarkData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkData_LandmarkObservation

// optional bytes id = 1;
void LandmarkData_LandmarkObservation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LandmarkData_LandmarkObservation::id() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LandmarkData_LandmarkObservation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
 void LandmarkData_LandmarkObservation::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
 void LandmarkData_LandmarkObservation::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
 ::std::string* LandmarkData_LandmarkObservation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LandmarkData_LandmarkObservation::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LandmarkData_LandmarkObservation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}

// optional .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
bool LandmarkData_LandmarkObservation::has_landmark_to_tracking_transform() const {
  return !_is_default_instance_ && landmark_to_tracking_transform_ != NULL;
}
void LandmarkData_LandmarkObservation::clear_landmark_to_tracking_transform() {
  if (GetArenaNoVirtual() == NULL && landmark_to_tracking_transform_ != NULL) delete landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& LandmarkData_LandmarkObservation::landmark_to_tracking_transform() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  return landmark_to_tracking_transform_ != NULL ? *landmark_to_tracking_transform_ : *default_instance_->landmark_to_tracking_transform_;
}
::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::mutable_landmark_to_tracking_transform() {
  
  if (landmark_to_tracking_transform_ == NULL) {
    landmark_to_tracking_transform_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  return landmark_to_tracking_transform_;
}
::cartographer::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::release_landmark_to_tracking_transform() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  
  ::cartographer::transform::proto::Rigid3d* temp = landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = NULL;
  return temp;
}
void LandmarkData_LandmarkObservation::set_allocated_landmark_to_tracking_transform(::cartographer::transform::proto::Rigid3d* landmark_to_tracking_transform) {
  delete landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = landmark_to_tracking_transform;
  if (landmark_to_tracking_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
}

// optional double translation_weight = 3;
void LandmarkData_LandmarkObservation::clear_translation_weight() {
  translation_weight_ = 0;
}
 double LandmarkData_LandmarkObservation::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.translation_weight)
  return translation_weight_;
}
 void LandmarkData_LandmarkObservation::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.translation_weight)
}

// optional double rotation_weight = 4;
void LandmarkData_LandmarkObservation::clear_rotation_weight() {
  rotation_weight_ = 0;
}
 double LandmarkData_LandmarkObservation::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.rotation_weight)
  return rotation_weight_;
}
 void LandmarkData_LandmarkObservation::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.rotation_weight)
}

// -------------------------------------------------------------------

// LandmarkData

// optional int64 timestamp = 1;
void LandmarkData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LandmarkData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.timestamp)
  return timestamp_;
}
 void LandmarkData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.timestamp)
}

// repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
int LandmarkData::landmark_observations_size() const {
  return landmark_observations_.size();
}
void LandmarkData::clear_landmark_observations() {
  landmark_observations_.Clear();
}
const ::cartographer::sensor::proto::LandmarkData_LandmarkObservation& LandmarkData::landmark_observations(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_.Get(index);
}
::cartographer::sensor::proto::LandmarkData_LandmarkObservation* LandmarkData::mutable_landmark_observations(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_.Mutable(index);
}
::cartographer::sensor::proto::LandmarkData_LandmarkObservation* LandmarkData::add_landmark_observations() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >*
LandmarkData::mutable_landmark_observations() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return &landmark_observations_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >&
LandmarkData::landmark_observations() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
