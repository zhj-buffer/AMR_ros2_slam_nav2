// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_serialized_data.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/serialization.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();

class LegacySerializedData;

// ===================================================================

class LegacySerializedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LegacySerializedData) */ {
 public:
  LegacySerializedData();
  virtual ~LegacySerializedData();

  LegacySerializedData(const LegacySerializedData& from);

  inline LegacySerializedData& operator=(const LegacySerializedData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacySerializedData& default_instance();

  void Swap(LegacySerializedData* other);

  // implements Message ----------------------------------------------

  inline LegacySerializedData* New() const { return New(NULL); }

  LegacySerializedData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegacySerializedData& from);
  void MergeFrom(const LegacySerializedData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LegacySerializedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.Submap submap = 1;
  bool has_submap() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 1;
  const ::cartographer::mapping::proto::Submap& submap() const;
  ::cartographer::mapping::proto::Submap* mutable_submap();
  ::cartographer::mapping::proto::Submap* release_submap();
  void set_allocated_submap(::cartographer::mapping::proto::Submap* submap);

  // optional .cartographer.mapping.proto.Node node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::cartographer::mapping::proto::Node& node() const;
  ::cartographer::mapping::proto::Node* mutable_node();
  ::cartographer::mapping::proto::Node* release_node();
  void set_allocated_node(::cartographer::mapping::proto::Node* node);

  // optional .cartographer.mapping.proto.ImuData imu_data = 3;
  bool has_imu_data() const;
  void clear_imu_data();
  static const int kImuDataFieldNumber = 3;
  const ::cartographer::mapping::proto::ImuData& imu_data() const;
  ::cartographer::mapping::proto::ImuData* mutable_imu_data();
  ::cartographer::mapping::proto::ImuData* release_imu_data();
  void set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data);

  // optional .cartographer.mapping.proto.OdometryData odometry_data = 4;
  bool has_odometry_data() const;
  void clear_odometry_data();
  static const int kOdometryDataFieldNumber = 4;
  const ::cartographer::mapping::proto::OdometryData& odometry_data() const;
  ::cartographer::mapping::proto::OdometryData* mutable_odometry_data();
  ::cartographer::mapping::proto::OdometryData* release_odometry_data();
  void set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data);

  // optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  bool has_fixed_frame_pose_data() const;
  void clear_fixed_frame_pose_data();
  static const int kFixedFramePoseDataFieldNumber = 5;
  const ::cartographer::mapping::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  ::cartographer::mapping::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  ::cartographer::mapping::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data);

  // optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  bool has_trajectory_data() const;
  void clear_trajectory_data();
  static const int kTrajectoryDataFieldNumber = 6;
  const ::cartographer::mapping::proto::TrajectoryData& trajectory_data() const;
  ::cartographer::mapping::proto::TrajectoryData* mutable_trajectory_data();
  ::cartographer::mapping::proto::TrajectoryData* release_trajectory_data();
  void set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data);

  // optional .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  bool has_landmark_data() const;
  void clear_landmark_data();
  static const int kLandmarkDataFieldNumber = 7;
  const ::cartographer::mapping::proto::LandmarkData& landmark_data() const;
  ::cartographer::mapping::proto::LandmarkData* mutable_landmark_data();
  ::cartographer::mapping::proto::LandmarkData* release_landmark_data();
  void set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LegacySerializedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::mapping::proto::Submap* submap_;
  ::cartographer::mapping::proto::Node* node_;
  ::cartographer::mapping::proto::ImuData* imu_data_;
  ::cartographer::mapping::proto::OdometryData* odometry_data_;
  ::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data_;
  ::cartographer::mapping::proto::TrajectoryData* trajectory_data_;
  ::cartographer::mapping::proto::LandmarkData* landmark_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto();

  void InitAsDefaultInstance();
  static LegacySerializedData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LegacySerializedData

// optional .cartographer.mapping.proto.Submap submap = 1;
inline bool LegacySerializedData::has_submap() const {
  return !_is_default_instance_ && submap_ != NULL;
}
inline void LegacySerializedData::clear_submap() {
  if (GetArenaNoVirtual() == NULL && submap_ != NULL) delete submap_;
  submap_ = NULL;
}
inline const ::cartographer::mapping::proto::Submap& LegacySerializedData::submap() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.submap)
  return submap_ != NULL ? *submap_ : *default_instance_->submap_;
}
inline ::cartographer::mapping::proto::Submap* LegacySerializedData::mutable_submap() {
  
  if (submap_ == NULL) {
    submap_ = new ::cartographer::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.submap)
  return submap_;
}
inline ::cartographer::mapping::proto::Submap* LegacySerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.submap)
  
  ::cartographer::mapping::proto::Submap* temp = submap_;
  submap_ = NULL;
  return temp;
}
inline void LegacySerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  delete submap_;
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.submap)
}

// optional .cartographer.mapping.proto.Node node = 2;
inline bool LegacySerializedData::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
inline void LegacySerializedData::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::cartographer::mapping::proto::Node& LegacySerializedData::node() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::cartographer::mapping::proto::Node* LegacySerializedData::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::cartographer::mapping::proto::Node;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.node)
  return node_;
}
inline ::cartographer::mapping::proto::Node* LegacySerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.node)
  
  ::cartographer::mapping::proto::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void LegacySerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.node)
}

// optional .cartographer.mapping.proto.ImuData imu_data = 3;
inline bool LegacySerializedData::has_imu_data() const {
  return !_is_default_instance_ && imu_data_ != NULL;
}
inline void LegacySerializedData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
inline const ::cartographer::mapping::proto::ImuData& LegacySerializedData::imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.imu_data)
  return imu_data_ != NULL ? *imu_data_ : *default_instance_->imu_data_;
}
inline ::cartographer::mapping::proto::ImuData* LegacySerializedData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.imu_data)
  return imu_data_;
}
inline ::cartographer::mapping::proto::ImuData* LegacySerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.imu_data)
  
  ::cartographer::mapping::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
inline void LegacySerializedData::set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.imu_data)
}

// optional .cartographer.mapping.proto.OdometryData odometry_data = 4;
inline bool LegacySerializedData::has_odometry_data() const {
  return !_is_default_instance_ && odometry_data_ != NULL;
}
inline void LegacySerializedData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
inline const ::cartographer::mapping::proto::OdometryData& LegacySerializedData::odometry_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  return odometry_data_ != NULL ? *odometry_data_ : *default_instance_->odometry_data_;
}
inline ::cartographer::mapping::proto::OdometryData* LegacySerializedData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  return odometry_data_;
}
inline ::cartographer::mapping::proto::OdometryData* LegacySerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  
  ::cartographer::mapping::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
inline void LegacySerializedData::set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.odometry_data)
}

// optional .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
inline bool LegacySerializedData::has_fixed_frame_pose_data() const {
  return !_is_default_instance_ && fixed_frame_pose_data_ != NULL;
}
inline void LegacySerializedData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
inline const ::cartographer::mapping::proto::FixedFramePoseData& LegacySerializedData::fixed_frame_pose_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  return fixed_frame_pose_data_ != NULL ? *fixed_frame_pose_data_ : *default_instance_->fixed_frame_pose_data_;
}
inline ::cartographer::mapping::proto::FixedFramePoseData* LegacySerializedData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
inline ::cartographer::mapping::proto::FixedFramePoseData* LegacySerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  
  ::cartographer::mapping::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
inline void LegacySerializedData::set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
}

// optional .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
inline bool LegacySerializedData::has_trajectory_data() const {
  return !_is_default_instance_ && trajectory_data_ != NULL;
}
inline void LegacySerializedData::clear_trajectory_data() {
  if (GetArenaNoVirtual() == NULL && trajectory_data_ != NULL) delete trajectory_data_;
  trajectory_data_ = NULL;
}
inline const ::cartographer::mapping::proto::TrajectoryData& LegacySerializedData::trajectory_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  return trajectory_data_ != NULL ? *trajectory_data_ : *default_instance_->trajectory_data_;
}
inline ::cartographer::mapping::proto::TrajectoryData* LegacySerializedData::mutable_trajectory_data() {
  
  if (trajectory_data_ == NULL) {
    trajectory_data_ = new ::cartographer::mapping::proto::TrajectoryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  return trajectory_data_;
}
inline ::cartographer::mapping::proto::TrajectoryData* LegacySerializedData::release_trajectory_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  
  ::cartographer::mapping::proto::TrajectoryData* temp = trajectory_data_;
  trajectory_data_ = NULL;
  return temp;
}
inline void LegacySerializedData::set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data) {
  delete trajectory_data_;
  trajectory_data_ = trajectory_data;
  if (trajectory_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
}

// optional .cartographer.mapping.proto.LandmarkData landmark_data = 7;
inline bool LegacySerializedData::has_landmark_data() const {
  return !_is_default_instance_ && landmark_data_ != NULL;
}
inline void LegacySerializedData::clear_landmark_data() {
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) delete landmark_data_;
  landmark_data_ = NULL;
}
inline const ::cartographer::mapping::proto::LandmarkData& LegacySerializedData::landmark_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  return landmark_data_ != NULL ? *landmark_data_ : *default_instance_->landmark_data_;
}
inline ::cartographer::mapping::proto::LandmarkData* LegacySerializedData::mutable_landmark_data() {
  
  if (landmark_data_ == NULL) {
    landmark_data_ = new ::cartographer::mapping::proto::LandmarkData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  return landmark_data_;
}
inline ::cartographer::mapping::proto::LandmarkData* LegacySerializedData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  
  ::cartographer::mapping::proto::LandmarkData* temp = landmark_data_;
  landmark_data_ = NULL;
  return temp;
}
inline void LegacySerializedData::set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data) {
  delete landmark_data_;
  landmark_data_ = landmark_data;
  if (landmark_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.landmark_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto__INCLUDED
