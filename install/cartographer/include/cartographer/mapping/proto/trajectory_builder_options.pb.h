// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
#include "cartographer/mapping/proto/2d/local_trajectory_builder_options_2d.pb.h"
#include "cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();

class AllTrajectoryBuilderOptions;
class InitialTrajectoryPose;
class SensorId;
class TrajectoryBuilderOptions;
class TrajectoryBuilderOptionsWithSensorIds;
class TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D;

enum SensorId_SensorType {
  SensorId_SensorType_RANGE = 0,
  SensorId_SensorType_IMU = 1,
  SensorId_SensorType_ODOMETRY = 2,
  SensorId_SensorType_FIXED_FRAME_POSE = 3,
  SensorId_SensorType_LANDMARK = 4,
  SensorId_SensorType_LOCAL_SLAM_RESULT = 5,
  SensorId_SensorType_SensorId_SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SensorId_SensorType_SensorId_SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SensorId_SensorType_IsValid(int value);
const SensorId_SensorType SensorId_SensorType_SensorType_MIN = SensorId_SensorType_RANGE;
const SensorId_SensorType SensorId_SensorType_SensorType_MAX = SensorId_SensorType_LOCAL_SLAM_RESULT;
const int SensorId_SensorType_SensorType_ARRAYSIZE = SensorId_SensorType_SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorId_SensorType_descriptor();
inline const ::std::string& SensorId_SensorType_Name(SensorId_SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorId_SensorType_descriptor(), value);
}
inline bool SensorId_SensorType_Parse(
    const ::std::string& name, SensorId_SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorId_SensorType>(
    SensorId_SensorType_descriptor(), name, value);
}
// ===================================================================

class InitialTrajectoryPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.InitialTrajectoryPose) */ {
 public:
  InitialTrajectoryPose();
  virtual ~InitialTrajectoryPose();

  InitialTrajectoryPose(const InitialTrajectoryPose& from);

  inline InitialTrajectoryPose& operator=(const InitialTrajectoryPose& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitialTrajectoryPose& default_instance();

  void Swap(InitialTrajectoryPose* other);

  // implements Message ----------------------------------------------

  inline InitialTrajectoryPose* New() const { return New(NULL); }

  InitialTrajectoryPose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitialTrajectoryPose& from);
  void MergeFrom(const InitialTrajectoryPose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitialTrajectoryPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Rigid3d relative_pose = 1;
  bool has_relative_pose() const;
  void clear_relative_pose();
  static const int kRelativePoseFieldNumber = 1;
  const ::cartographer::transform::proto::Rigid3d& relative_pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_relative_pose();
  ::cartographer::transform::proto::Rigid3d* release_relative_pose();
  void set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose);

  // optional int32 to_trajectory_id = 2;
  void clear_to_trajectory_id();
  static const int kToTrajectoryIdFieldNumber = 2;
  ::google::protobuf::int32 to_trajectory_id() const;
  void set_to_trajectory_id(::google::protobuf::int32 value);

  // optional int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.InitialTrajectoryPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::transform::proto::Rigid3d* relative_pose_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 to_trajectory_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static InitialTrajectoryPose* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D) */ {
 public:
  TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D();
  virtual ~TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D();

  TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D(const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& from);

  inline TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& operator=(const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& default_instance();

  void Swap(TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* other);

  // implements Message ----------------------------------------------

  inline TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* New() const { return New(NULL); }

  TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& from);
  void MergeFrom(const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fresh_submaps_count = 1;
  void clear_fresh_submaps_count();
  static const int kFreshSubmapsCountFieldNumber = 1;
  ::google::protobuf::int32 fresh_submaps_count() const;
  void set_fresh_submaps_count(::google::protobuf::int32 value);

  // optional double min_covered_area = 2;
  void clear_min_covered_area();
  static const int kMinCoveredAreaFieldNumber = 2;
  double min_covered_area() const;
  void set_min_covered_area(double value);

  // optional int32 min_added_submaps_count = 3;
  void clear_min_added_submaps_count();
  static const int kMinAddedSubmapsCountFieldNumber = 3;
  ::google::protobuf::int32 min_added_submaps_count() const;
  void set_min_added_submaps_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double min_covered_area_;
  ::google::protobuf::int32 fresh_submaps_count_;
  ::google::protobuf::int32 min_added_submaps_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryBuilderOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryBuilderOptions) */ {
 public:
  TrajectoryBuilderOptions();
  virtual ~TrajectoryBuilderOptions();

  TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from);

  inline TrajectoryBuilderOptions& operator=(const TrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryBuilderOptions& default_instance();

  void Swap(TrajectoryBuilderOptions* other);

  // implements Message ----------------------------------------------

  inline TrajectoryBuilderOptions* New() const { return New(NULL); }

  TrajectoryBuilderOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryBuilderOptions& from);
  void MergeFrom(const TrajectoryBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrajectoryBuilderOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D OverlappingSubmapsTrimmerOptions2D;

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  bool has_trajectory_builder_2d_options() const;
  void clear_trajectory_builder_2d_options();
  static const int kTrajectoryBuilder2DOptionsFieldNumber = 1;
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& trajectory_builder_2d_options() const;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* mutable_trajectory_builder_2d_options();
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* release_trajectory_builder_2d_options();
  void set_allocated_trajectory_builder_2d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options);

  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  bool has_trajectory_builder_3d_options() const;
  void clear_trajectory_builder_3d_options();
  static const int kTrajectoryBuilder3DOptionsFieldNumber = 2;
  const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& trajectory_builder_3d_options() const;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* mutable_trajectory_builder_3d_options();
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* release_trajectory_builder_3d_options();
  void set_allocated_trajectory_builder_3d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options);

  // optional bool pure_localization = 3;
  void clear_pure_localization();
  static const int kPureLocalizationFieldNumber = 3;
  bool pure_localization() const;
  void set_pure_localization(bool value);

  // optional .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  bool has_initial_trajectory_pose() const;
  void clear_initial_trajectory_pose();
  static const int kInitialTrajectoryPoseFieldNumber = 4;
  const ::cartographer::mapping::proto::InitialTrajectoryPose& initial_trajectory_pose() const;
  ::cartographer::mapping::proto::InitialTrajectoryPose* mutable_initial_trajectory_pose();
  ::cartographer::mapping::proto::InitialTrajectoryPose* release_initial_trajectory_pose();
  void set_allocated_initial_trajectory_pose(::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose);

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 5;
  bool has_overlapping_submaps_trimmer_2d() const;
  void clear_overlapping_submaps_trimmer_2d();
  static const int kOverlappingSubmapsTrimmer2DFieldNumber = 5;
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& overlapping_submaps_trimmer_2d() const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* mutable_overlapping_submaps_trimmer_2d();
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* release_overlapping_submaps_trimmer_2d();
  void set_allocated_overlapping_submaps_trimmer_2d(::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryBuilderOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options_;
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options_;
  ::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose_;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d_;
  bool pure_localization_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryBuilderOptions* default_instance_;
};
// -------------------------------------------------------------------

class SensorId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SensorId) */ {
 public:
  SensorId();
  virtual ~SensorId();

  SensorId(const SensorId& from);

  inline SensorId& operator=(const SensorId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorId& default_instance();

  void Swap(SensorId* other);

  // implements Message ----------------------------------------------

  inline SensorId* New() const { return New(NULL); }

  SensorId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SensorId& from);
  void MergeFrom(const SensorId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SensorId_SensorType SensorType;
  static const SensorType RANGE =
    SensorId_SensorType_RANGE;
  static const SensorType IMU =
    SensorId_SensorType_IMU;
  static const SensorType ODOMETRY =
    SensorId_SensorType_ODOMETRY;
  static const SensorType FIXED_FRAME_POSE =
    SensorId_SensorType_FIXED_FRAME_POSE;
  static const SensorType LANDMARK =
    SensorId_SensorType_LANDMARK;
  static const SensorType LOCAL_SLAM_RESULT =
    SensorId_SensorType_LOCAL_SLAM_RESULT;
  static inline bool SensorType_IsValid(int value) {
    return SensorId_SensorType_IsValid(value);
  }
  static const SensorType SensorType_MIN =
    SensorId_SensorType_SensorType_MIN;
  static const SensorType SensorType_MAX =
    SensorId_SensorType_SensorType_MAX;
  static const int SensorType_ARRAYSIZE =
    SensorId_SensorType_SensorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorType_descriptor() {
    return SensorId_SensorType_descriptor();
  }
  static inline const ::std::string& SensorType_Name(SensorType value) {
    return SensorId_SensorType_Name(value);
  }
  static inline bool SensorType_Parse(const ::std::string& name,
      SensorType* value) {
    return SensorId_SensorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.SensorId.SensorType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cartographer::mapping::proto::SensorId_SensorType type() const;
  void set_type(::cartographer::mapping::proto::SensorId_SensorType value);

  // optional string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SensorId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static SensorId* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryBuilderOptionsWithSensorIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds) */ {
 public:
  TrajectoryBuilderOptionsWithSensorIds();
  virtual ~TrajectoryBuilderOptionsWithSensorIds();

  TrajectoryBuilderOptionsWithSensorIds(const TrajectoryBuilderOptionsWithSensorIds& from);

  inline TrajectoryBuilderOptionsWithSensorIds& operator=(const TrajectoryBuilderOptionsWithSensorIds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryBuilderOptionsWithSensorIds& default_instance();

  void Swap(TrajectoryBuilderOptionsWithSensorIds* other);

  // implements Message ----------------------------------------------

  inline TrajectoryBuilderOptionsWithSensorIds* New() const { return New(NULL); }

  TrajectoryBuilderOptionsWithSensorIds* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryBuilderOptionsWithSensorIds& from);
  void MergeFrom(const TrajectoryBuilderOptionsWithSensorIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrajectoryBuilderOptionsWithSensorIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  int sensor_id_size() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::cartographer::mapping::proto::SensorId& sensor_id(int index) const;
  ::cartographer::mapping::proto::SensorId* mutable_sensor_id(int index);
  ::cartographer::mapping::proto::SensorId* add_sensor_id();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >*
      mutable_sensor_id();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >&
      sensor_id() const;

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  bool has_trajectory_builder_options() const;
  void clear_trajectory_builder_options();
  static const int kTrajectoryBuilderOptionsFieldNumber = 2;
  const ::cartographer::mapping::proto::TrajectoryBuilderOptions& trajectory_builder_options() const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* mutable_trajectory_builder_options();
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* release_trajectory_builder_options();
  void set_allocated_trajectory_builder_options(::cartographer::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SensorId > sensor_id_;
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryBuilderOptionsWithSensorIds* default_instance_;
};
// -------------------------------------------------------------------

class AllTrajectoryBuilderOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.AllTrajectoryBuilderOptions) */ {
 public:
  AllTrajectoryBuilderOptions();
  virtual ~AllTrajectoryBuilderOptions();

  AllTrajectoryBuilderOptions(const AllTrajectoryBuilderOptions& from);

  inline AllTrajectoryBuilderOptions& operator=(const AllTrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllTrajectoryBuilderOptions& default_instance();

  void Swap(AllTrajectoryBuilderOptions* other);

  // implements Message ----------------------------------------------

  inline AllTrajectoryBuilderOptions* New() const { return New(NULL); }

  AllTrajectoryBuilderOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllTrajectoryBuilderOptions& from);
  void MergeFrom(const AllTrajectoryBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllTrajectoryBuilderOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  int options_with_sensor_ids_size() const;
  void clear_options_with_sensor_ids();
  static const int kOptionsWithSensorIdsFieldNumber = 1;
  const ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& options_with_sensor_ids(int index) const;
  ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* mutable_options_with_sensor_ids(int index);
  ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* add_options_with_sensor_ids();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >*
      mutable_options_with_sensor_ids();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >&
      options_with_sensor_ids() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds > options_with_sensor_ids_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static AllTrajectoryBuilderOptions* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InitialTrajectoryPose

// optional .cartographer.transform.proto.Rigid3d relative_pose = 1;
inline bool InitialTrajectoryPose::has_relative_pose() const {
  return !_is_default_instance_ && relative_pose_ != NULL;
}
inline void InitialTrajectoryPose::clear_relative_pose() {
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) delete relative_pose_;
  relative_pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& InitialTrajectoryPose::relative_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return relative_pose_ != NULL ? *relative_pose_ : *default_instance_->relative_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::mutable_relative_pose() {
  
  if (relative_pose_ == NULL) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return relative_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = relative_pose_;
  relative_pose_ = NULL;
  return temp;
}
inline void InitialTrajectoryPose::set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose) {
  delete relative_pose_;
  relative_pose_ = relative_pose;
  if (relative_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
}

// optional int32 to_trajectory_id = 2;
inline void InitialTrajectoryPose::clear_to_trajectory_id() {
  to_trajectory_id_ = 0;
}
inline ::google::protobuf::int32 InitialTrajectoryPose::to_trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
  return to_trajectory_id_;
}
inline void InitialTrajectoryPose::set_to_trajectory_id(::google::protobuf::int32 value) {
  
  to_trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
}

// optional int64 timestamp = 3;
inline void InitialTrajectoryPose::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InitialTrajectoryPose::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
  return timestamp_;
}
inline void InitialTrajectoryPose::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
}

// -------------------------------------------------------------------

// TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D

// optional int32 fresh_submaps_count = 1;
inline void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::clear_fresh_submaps_count() {
  fresh_submaps_count_ = 0;
}
inline ::google::protobuf::int32 TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::fresh_submaps_count() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D.fresh_submaps_count)
  return fresh_submaps_count_;
}
inline void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::set_fresh_submaps_count(::google::protobuf::int32 value) {
  
  fresh_submaps_count_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D.fresh_submaps_count)
}

// optional double min_covered_area = 2;
inline void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::clear_min_covered_area() {
  min_covered_area_ = 0;
}
inline double TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::min_covered_area() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D.min_covered_area)
  return min_covered_area_;
}
inline void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::set_min_covered_area(double value) {
  
  min_covered_area_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D.min_covered_area)
}

// optional int32 min_added_submaps_count = 3;
inline void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::clear_min_added_submaps_count() {
  min_added_submaps_count_ = 0;
}
inline ::google::protobuf::int32 TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::min_added_submaps_count() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D.min_added_submaps_count)
  return min_added_submaps_count_;
}
inline void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::set_min_added_submaps_count(::google::protobuf::int32 value) {
  
  min_added_submaps_count_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D.min_added_submaps_count)
}

// -------------------------------------------------------------------

// TrajectoryBuilderOptions

// optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
inline bool TrajectoryBuilderOptions::has_trajectory_builder_2d_options() const {
  return !_is_default_instance_ && trajectory_builder_2d_options_ != NULL;
}
inline void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_2d_options_ != NULL) delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
}
inline const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& TrajectoryBuilderOptions::trajectory_builder_2d_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return trajectory_builder_2d_options_ != NULL ? *trajectory_builder_2d_options_ : *default_instance_->trajectory_builder_2d_options_;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::mutable_trajectory_builder_2d_options() {
  
  if (trajectory_builder_2d_options_ == NULL) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return trajectory_builder_2d_options_;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::release_trajectory_builder_2d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* temp = trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
  return temp;
}
inline void TrajectoryBuilderOptions::set_allocated_trajectory_builder_2d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options) {
  delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = trajectory_builder_2d_options;
  if (trajectory_builder_2d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
}

// optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
inline bool TrajectoryBuilderOptions::has_trajectory_builder_3d_options() const {
  return !_is_default_instance_ && trajectory_builder_3d_options_ != NULL;
}
inline void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_3d_options_ != NULL) delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
}
inline const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& TrajectoryBuilderOptions::trajectory_builder_3d_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return trajectory_builder_3d_options_ != NULL ? *trajectory_builder_3d_options_ : *default_instance_->trajectory_builder_3d_options_;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::mutable_trajectory_builder_3d_options() {
  
  if (trajectory_builder_3d_options_ == NULL) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return trajectory_builder_3d_options_;
}
inline ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::release_trajectory_builder_3d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* temp = trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
  return temp;
}
inline void TrajectoryBuilderOptions::set_allocated_trajectory_builder_3d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options) {
  delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = trajectory_builder_3d_options;
  if (trajectory_builder_3d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
}

// optional bool pure_localization = 3;
inline void TrajectoryBuilderOptions::clear_pure_localization() {
  pure_localization_ = false;
}
inline bool TrajectoryBuilderOptions::pure_localization() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
  return pure_localization_;
}
inline void TrajectoryBuilderOptions::set_pure_localization(bool value) {
  
  pure_localization_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
}

// optional .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
inline bool TrajectoryBuilderOptions::has_initial_trajectory_pose() const {
  return !_is_default_instance_ && initial_trajectory_pose_ != NULL;
}
inline void TrajectoryBuilderOptions::clear_initial_trajectory_pose() {
  if (GetArenaNoVirtual() == NULL && initial_trajectory_pose_ != NULL) delete initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
}
inline const ::cartographer::mapping::proto::InitialTrajectoryPose& TrajectoryBuilderOptions::initial_trajectory_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return initial_trajectory_pose_ != NULL ? *initial_trajectory_pose_ : *default_instance_->initial_trajectory_pose_;
}
inline ::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::mutable_initial_trajectory_pose() {
  
  if (initial_trajectory_pose_ == NULL) {
    initial_trajectory_pose_ = new ::cartographer::mapping::proto::InitialTrajectoryPose;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return initial_trajectory_pose_;
}
inline ::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::release_initial_trajectory_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  
  ::cartographer::mapping::proto::InitialTrajectoryPose* temp = initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
  return temp;
}
inline void TrajectoryBuilderOptions::set_allocated_initial_trajectory_pose(::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose) {
  delete initial_trajectory_pose_;
  initial_trajectory_pose_ = initial_trajectory_pose;
  if (initial_trajectory_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
}

// optional .cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 5;
inline bool TrajectoryBuilderOptions::has_overlapping_submaps_trimmer_2d() const {
  return !_is_default_instance_ && overlapping_submaps_trimmer_2d_ != NULL;
}
inline void TrajectoryBuilderOptions::clear_overlapping_submaps_trimmer_2d() {
  if (GetArenaNoVirtual() == NULL && overlapping_submaps_trimmer_2d_ != NULL) delete overlapping_submaps_trimmer_2d_;
  overlapping_submaps_trimmer_2d_ = NULL;
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& TrajectoryBuilderOptions::overlapping_submaps_trimmer_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.overlapping_submaps_trimmer_2d)
  return overlapping_submaps_trimmer_2d_ != NULL ? *overlapping_submaps_trimmer_2d_ : *default_instance_->overlapping_submaps_trimmer_2d_;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* TrajectoryBuilderOptions::mutable_overlapping_submaps_trimmer_2d() {
  
  if (overlapping_submaps_trimmer_2d_ == NULL) {
    overlapping_submaps_trimmer_2d_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.overlapping_submaps_trimmer_2d)
  return overlapping_submaps_trimmer_2d_;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* TrajectoryBuilderOptions::release_overlapping_submaps_trimmer_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.overlapping_submaps_trimmer_2d)
  
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* temp = overlapping_submaps_trimmer_2d_;
  overlapping_submaps_trimmer_2d_ = NULL;
  return temp;
}
inline void TrajectoryBuilderOptions::set_allocated_overlapping_submaps_trimmer_2d(::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* overlapping_submaps_trimmer_2d) {
  delete overlapping_submaps_trimmer_2d_;
  overlapping_submaps_trimmer_2d_ = overlapping_submaps_trimmer_2d;
  if (overlapping_submaps_trimmer_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.overlapping_submaps_trimmer_2d)
}

// -------------------------------------------------------------------

// SensorId

// optional .cartographer.mapping.proto.SensorId.SensorType type = 1;
inline void SensorId::clear_type() {
  type_ = 0;
}
inline ::cartographer::mapping::proto::SensorId_SensorType SensorId::type() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.type)
  return static_cast< ::cartographer::mapping::proto::SensorId_SensorType >(type_);
}
inline void SensorId::set_type(::cartographer::mapping::proto::SensorId_SensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.type)
}

// optional string id = 2;
inline void SensorId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorId::id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.id)
}
inline void SensorId::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SensorId.id)
}
inline void SensorId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SensorId.id)
}
inline ::std::string* SensorId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SensorId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorId::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SensorId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SensorId.id)
}

// -------------------------------------------------------------------

// TrajectoryBuilderOptionsWithSensorIds

// repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
inline int TrajectoryBuilderOptionsWithSensorIds::sensor_id_size() const {
  return sensor_id_.size();
}
inline void TrajectoryBuilderOptionsWithSensorIds::clear_sensor_id() {
  sensor_id_.Clear();
}
inline const ::cartographer::mapping::proto::SensorId& TrajectoryBuilderOptionsWithSensorIds::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Get(index);
}
inline ::cartographer::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Mutable(index);
}
inline ::cartographer::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::add_sensor_id() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >*
TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return &sensor_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >&
TrajectoryBuilderOptionsWithSensorIds::sensor_id() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_;
}

// optional .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
inline bool TrajectoryBuilderOptionsWithSensorIds::has_trajectory_builder_options() const {
  return !_is_default_instance_ && trajectory_builder_options_ != NULL;
}
inline void TrajectoryBuilderOptionsWithSensorIds::clear_trajectory_builder_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_options_ != NULL) delete trajectory_builder_options_;
  trajectory_builder_options_ = NULL;
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptions& TrajectoryBuilderOptionsWithSensorIds::trajectory_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return trajectory_builder_options_ != NULL ? *trajectory_builder_options_ : *default_instance_->trajectory_builder_options_;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::mutable_trajectory_builder_options() {
  
  if (trajectory_builder_options_ == NULL) {
    trajectory_builder_options_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return trajectory_builder_options_;
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::release_trajectory_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* temp = trajectory_builder_options_;
  trajectory_builder_options_ = NULL;
  return temp;
}
inline void TrajectoryBuilderOptionsWithSensorIds::set_allocated_trajectory_builder_options(::cartographer::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options) {
  delete trajectory_builder_options_;
  trajectory_builder_options_ = trajectory_builder_options;
  if (trajectory_builder_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
}

// -------------------------------------------------------------------

// AllTrajectoryBuilderOptions

// repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
inline int AllTrajectoryBuilderOptions::options_with_sensor_ids_size() const {
  return options_with_sensor_ids_.size();
}
inline void AllTrajectoryBuilderOptions::clear_options_with_sensor_ids() {
  options_with_sensor_ids_.Clear();
}
inline const ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& AllTrajectoryBuilderOptions::options_with_sensor_ids(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Get(index);
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Mutable(index);
}
inline ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::add_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >*
AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return &options_with_sensor_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >&
AllTrajectoryBuilderOptions::options_with_sensor_ids() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cartographer::mapping::proto::SensorId_SensorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cartographer::mapping::proto::SensorId_SensorType>() {
  return ::cartographer::mapping::proto::SensorId_SensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
