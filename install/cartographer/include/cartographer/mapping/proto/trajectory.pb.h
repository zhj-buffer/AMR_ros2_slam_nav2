// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();

class Trajectory;
class Trajectory_Node;
class Trajectory_Submap;

// ===================================================================

class Trajectory_Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory.Node) */ {
 public:
  Trajectory_Node();
  virtual ~Trajectory_Node();

  Trajectory_Node(const Trajectory_Node& from);

  inline Trajectory_Node& operator=(const Trajectory_Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory_Node& default_instance();

  void Swap(Trajectory_Node* other);

  // implements Message ----------------------------------------------

  inline Trajectory_Node* New() const { return New(NULL); }

  Trajectory_Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trajectory_Node& from);
  void MergeFrom(const Trajectory_Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trajectory_Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_index = 7;
  void clear_node_index();
  static const int kNodeIndexFieldNumber = 7;
  ::google::protobuf::int32 node_index() const;
  void set_node_index(::google::protobuf::int32 value);

  // optional int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 5;
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  ::cartographer::transform::proto::Rigid3d* release_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::google::protobuf::int32 node_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static Trajectory_Node* default_instance_;
};
// -------------------------------------------------------------------

class Trajectory_Submap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory.Submap) */ {
 public:
  Trajectory_Submap();
  virtual ~Trajectory_Submap();

  Trajectory_Submap(const Trajectory_Submap& from);

  inline Trajectory_Submap& operator=(const Trajectory_Submap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory_Submap& default_instance();

  void Swap(Trajectory_Submap* other);

  // implements Message ----------------------------------------------

  inline Trajectory_Submap* New() const { return New(NULL); }

  Trajectory_Submap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trajectory_Submap& from);
  void MergeFrom(const Trajectory_Submap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trajectory_Submap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 submap_index = 2;
  void clear_submap_index();
  static const int kSubmapIndexFieldNumber = 2;
  ::google::protobuf::int32 submap_index() const;
  void set_submap_index(::google::protobuf::int32 value);

  // optional .cartographer.transform.proto.Rigid3d pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  ::cartographer::transform::proto::Rigid3d* release_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory.Submap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::google::protobuf::int32 submap_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static Trajectory_Submap* default_instance_;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  void Swap(Trajectory* other);

  // implements Message ----------------------------------------------

  inline Trajectory* New() const { return New(NULL); }

  Trajectory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Trajectory_Node Node;
  typedef Trajectory_Submap Submap;

  // accessors -------------------------------------------------------

  // optional int32 trajectory_id = 3;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 3;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::cartographer::mapping::proto::Trajectory_Node& node(int index) const;
  ::cartographer::mapping::proto::Trajectory_Node* mutable_node(int index);
  ::cartographer::mapping::proto::Trajectory_Node* add_node();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >&
      node() const;

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  int submap_size() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 2;
  const ::cartographer::mapping::proto::Trajectory_Submap& submap(int index) const;
  ::cartographer::mapping::proto::Trajectory_Submap* mutable_submap(int index);
  ::cartographer::mapping::proto::Trajectory_Submap* add_submap();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >*
      mutable_submap();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >&
      submap() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node > node_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap > submap_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static Trajectory* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory_Node

// optional int32 node_index = 7;
inline void Trajectory_Node::clear_node_index() {
  node_index_ = 0;
}
inline ::google::protobuf::int32 Trajectory_Node::node_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.node_index)
  return node_index_;
}
inline void Trajectory_Node::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.node_index)
}

// optional int64 timestamp = 1;
inline void Trajectory_Node::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Trajectory_Node::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.timestamp)
  return timestamp_;
}
inline void Trajectory_Node::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.timestamp)
}

// optional .cartographer.transform.proto.Rigid3d pose = 5;
inline bool Trajectory_Node::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
inline void Trajectory_Node::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Node::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Node::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Node.pose)
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Node::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Node.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Trajectory_Node::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Node.pose)
}

// -------------------------------------------------------------------

// Trajectory_Submap

// optional int32 submap_index = 2;
inline void Trajectory_Submap::clear_submap_index() {
  submap_index_ = 0;
}
inline ::google::protobuf::int32 Trajectory_Submap::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.submap_index)
  return submap_index_;
}
inline void Trajectory_Submap::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Submap.submap_index)
}

// optional .cartographer.transform.proto.Rigid3d pose = 1;
inline bool Trajectory_Submap::has_pose() const {
  return !_is_default_instance_ && pose_ != NULL;
}
inline void Trajectory_Submap::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Submap::pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Submap::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Submap.pose)
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Submap::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Submap.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Trajectory_Submap::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Submap.pose)
}

// -------------------------------------------------------------------

// Trajectory

// optional int32 trajectory_id = 3;
inline void Trajectory::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 Trajectory::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.trajectory_id)
  return trajectory_id_;
}
inline void Trajectory::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.trajectory_id)
}

// repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
inline int Trajectory::node_size() const {
  return node_.size();
}
inline void Trajectory::clear_node() {
  node_.Clear();
}
inline const ::cartographer::mapping::proto::Trajectory_Node& Trajectory::node(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.node)
  return node_.Get(index);
}
inline ::cartographer::mapping::proto::Trajectory_Node* Trajectory::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.node)
  return node_.Mutable(index);
}
inline ::cartographer::mapping::proto::Trajectory_Node* Trajectory::add_node() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >*
Trajectory::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >&
Trajectory::node() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.node)
  return node_;
}

// repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
inline int Trajectory::submap_size() const {
  return submap_.size();
}
inline void Trajectory::clear_submap() {
  submap_.Clear();
}
inline const ::cartographer::mapping::proto::Trajectory_Submap& Trajectory::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Get(index);
}
inline ::cartographer::mapping::proto::Trajectory_Submap* Trajectory::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Mutable(index);
}
inline ::cartographer::mapping::proto::Trajectory_Submap* Trajectory::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >*
Trajectory::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.submap)
  return &submap_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >&
Trajectory::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.submap)
  return submap_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_2eproto__INCLUDED
