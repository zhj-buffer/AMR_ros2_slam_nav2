// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/2d/grid_2d.pb.h"
#include "cartographer/mapping/proto/3d/hybrid_grid.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto();

class Submap2D;
class Submap3D;

// ===================================================================

class Submap2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Submap2D) */ {
 public:
  Submap2D();
  virtual ~Submap2D();

  Submap2D(const Submap2D& from);

  inline Submap2D& operator=(const Submap2D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Submap2D& default_instance();

  void Swap(Submap2D* other);

  // implements Message ----------------------------------------------

  inline Submap2D* New() const { return New(NULL); }

  Submap2D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Submap2D& from);
  void MergeFrom(const Submap2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Submap2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  bool has_local_pose() const;
  void clear_local_pose();
  static const int kLocalPoseFieldNumber = 1;
  const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  ::cartographer::transform::proto::Rigid3d* release_local_pose();
  void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);

  // optional int32 num_range_data = 2;
  void clear_num_range_data();
  static const int kNumRangeDataFieldNumber = 2;
  ::google::protobuf::int32 num_range_data() const;
  void set_num_range_data(::google::protobuf::int32 value);

  // optional bool finished = 3;
  void clear_finished();
  static const int kFinishedFieldNumber = 3;
  bool finished() const;
  void set_finished(bool value);

  // optional .cartographer.mapping.proto.Grid2D grid = 4;
  bool has_grid() const;
  void clear_grid();
  static const int kGridFieldNumber = 4;
  const ::cartographer::mapping::proto::Grid2D& grid() const;
  ::cartographer::mapping::proto::Grid2D* mutable_grid();
  ::cartographer::mapping::proto::Grid2D* release_grid();
  void set_allocated_grid(::cartographer::mapping::proto::Grid2D* grid);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::google::protobuf::int32 num_range_data_;
  bool finished_;
  ::cartographer::mapping::proto::Grid2D* grid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto();

  void InitAsDefaultInstance();
  static Submap2D* default_instance_;
};
// -------------------------------------------------------------------

class Submap3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Submap3D) */ {
 public:
  Submap3D();
  virtual ~Submap3D();

  Submap3D(const Submap3D& from);

  inline Submap3D& operator=(const Submap3D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Submap3D& default_instance();

  void Swap(Submap3D* other);

  // implements Message ----------------------------------------------

  inline Submap3D* New() const { return New(NULL); }

  Submap3D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Submap3D& from);
  void MergeFrom(const Submap3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Submap3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Rigid3d local_pose = 1;
  bool has_local_pose() const;
  void clear_local_pose();
  static const int kLocalPoseFieldNumber = 1;
  const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  ::cartographer::transform::proto::Rigid3d* release_local_pose();
  void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);

  // optional int32 num_range_data = 2;
  void clear_num_range_data();
  static const int kNumRangeDataFieldNumber = 2;
  ::google::protobuf::int32 num_range_data() const;
  void set_num_range_data(::google::protobuf::int32 value);

  // optional bool finished = 3;
  void clear_finished();
  static const int kFinishedFieldNumber = 3;
  bool finished() const;
  void set_finished(bool value);

  // optional .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  bool has_high_resolution_hybrid_grid() const;
  void clear_high_resolution_hybrid_grid();
  static const int kHighResolutionHybridGridFieldNumber = 4;
  const ::cartographer::mapping::proto::HybridGrid& high_resolution_hybrid_grid() const;
  ::cartographer::mapping::proto::HybridGrid* mutable_high_resolution_hybrid_grid();
  ::cartographer::mapping::proto::HybridGrid* release_high_resolution_hybrid_grid();
  void set_allocated_high_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* high_resolution_hybrid_grid);

  // optional .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  bool has_low_resolution_hybrid_grid() const;
  void clear_low_resolution_hybrid_grid();
  static const int kLowResolutionHybridGridFieldNumber = 5;
  const ::cartographer::mapping::proto::HybridGrid& low_resolution_hybrid_grid() const;
  ::cartographer::mapping::proto::HybridGrid* mutable_low_resolution_hybrid_grid();
  ::cartographer::mapping::proto::HybridGrid* release_low_resolution_hybrid_grid();
  void set_allocated_low_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* low_resolution_hybrid_grid);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::google::protobuf::int32 num_range_data_;
  bool finished_;
  ::cartographer::mapping::proto::HybridGrid* high_resolution_hybrid_grid_;
  ::cartographer::mapping::proto::HybridGrid* low_resolution_hybrid_grid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fsubmap_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fsubmap_2eproto();

  void InitAsDefaultInstance();
  static Submap3D* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Submap2D

// optional .cartographer.transform.proto.Rigid3d local_pose = 1;
inline bool Submap2D::has_local_pose() const {
  return !_is_default_instance_ && local_pose_ != NULL;
}
inline void Submap2D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& Submap2D::local_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap2D.local_pose)
  return local_pose_ != NULL ? *local_pose_ : *default_instance_->local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap2D::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap2D.local_pose)
  return local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap2D::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap2D.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
inline void Submap2D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap2D.local_pose)
}

// optional int32 num_range_data = 2;
inline void Submap2D::clear_num_range_data() {
  num_range_data_ = 0;
}
inline ::google::protobuf::int32 Submap2D::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap2D.num_range_data)
  return num_range_data_;
}
inline void Submap2D::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Submap2D.num_range_data)
}

// optional bool finished = 3;
inline void Submap2D::clear_finished() {
  finished_ = false;
}
inline bool Submap2D::finished() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap2D.finished)
  return finished_;
}
inline void Submap2D::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Submap2D.finished)
}

// optional .cartographer.mapping.proto.Grid2D grid = 4;
inline bool Submap2D::has_grid() const {
  return !_is_default_instance_ && grid_ != NULL;
}
inline void Submap2D::clear_grid() {
  if (GetArenaNoVirtual() == NULL && grid_ != NULL) delete grid_;
  grid_ = NULL;
}
inline const ::cartographer::mapping::proto::Grid2D& Submap2D::grid() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap2D.grid)
  return grid_ != NULL ? *grid_ : *default_instance_->grid_;
}
inline ::cartographer::mapping::proto::Grid2D* Submap2D::mutable_grid() {
  
  if (grid_ == NULL) {
    grid_ = new ::cartographer::mapping::proto::Grid2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap2D.grid)
  return grid_;
}
inline ::cartographer::mapping::proto::Grid2D* Submap2D::release_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap2D.grid)
  
  ::cartographer::mapping::proto::Grid2D* temp = grid_;
  grid_ = NULL;
  return temp;
}
inline void Submap2D::set_allocated_grid(::cartographer::mapping::proto::Grid2D* grid) {
  delete grid_;
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap2D.grid)
}

// -------------------------------------------------------------------

// Submap3D

// optional .cartographer.transform.proto.Rigid3d local_pose = 1;
inline bool Submap3D::has_local_pose() const {
  return !_is_default_instance_ && local_pose_ != NULL;
}
inline void Submap3D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) delete local_pose_;
  local_pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& Submap3D::local_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap3D.local_pose)
  return local_pose_ != NULL ? *local_pose_ : *default_instance_->local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap3D::mutable_local_pose() {
  
  if (local_pose_ == NULL) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap3D.local_pose)
  return local_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Submap3D::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap3D.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = NULL;
  return temp;
}
inline void Submap3D::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  delete local_pose_;
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap3D.local_pose)
}

// optional int32 num_range_data = 2;
inline void Submap3D::clear_num_range_data() {
  num_range_data_ = 0;
}
inline ::google::protobuf::int32 Submap3D::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap3D.num_range_data)
  return num_range_data_;
}
inline void Submap3D::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Submap3D.num_range_data)
}

// optional bool finished = 3;
inline void Submap3D::clear_finished() {
  finished_ = false;
}
inline bool Submap3D::finished() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap3D.finished)
  return finished_;
}
inline void Submap3D::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Submap3D.finished)
}

// optional .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
inline bool Submap3D::has_high_resolution_hybrid_grid() const {
  return !_is_default_instance_ && high_resolution_hybrid_grid_ != NULL;
}
inline void Submap3D::clear_high_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && high_resolution_hybrid_grid_ != NULL) delete high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = NULL;
}
inline const ::cartographer::mapping::proto::HybridGrid& Submap3D::high_resolution_hybrid_grid() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap3D.high_resolution_hybrid_grid)
  return high_resolution_hybrid_grid_ != NULL ? *high_resolution_hybrid_grid_ : *default_instance_->high_resolution_hybrid_grid_;
}
inline ::cartographer::mapping::proto::HybridGrid* Submap3D::mutable_high_resolution_hybrid_grid() {
  
  if (high_resolution_hybrid_grid_ == NULL) {
    high_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap3D.high_resolution_hybrid_grid)
  return high_resolution_hybrid_grid_;
}
inline ::cartographer::mapping::proto::HybridGrid* Submap3D::release_high_resolution_hybrid_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap3D.high_resolution_hybrid_grid)
  
  ::cartographer::mapping::proto::HybridGrid* temp = high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = NULL;
  return temp;
}
inline void Submap3D::set_allocated_high_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* high_resolution_hybrid_grid) {
  delete high_resolution_hybrid_grid_;
  high_resolution_hybrid_grid_ = high_resolution_hybrid_grid;
  if (high_resolution_hybrid_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap3D.high_resolution_hybrid_grid)
}

// optional .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
inline bool Submap3D::has_low_resolution_hybrid_grid() const {
  return !_is_default_instance_ && low_resolution_hybrid_grid_ != NULL;
}
inline void Submap3D::clear_low_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && low_resolution_hybrid_grid_ != NULL) delete low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = NULL;
}
inline const ::cartographer::mapping::proto::HybridGrid& Submap3D::low_resolution_hybrid_grid() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap3D.low_resolution_hybrid_grid)
  return low_resolution_hybrid_grid_ != NULL ? *low_resolution_hybrid_grid_ : *default_instance_->low_resolution_hybrid_grid_;
}
inline ::cartographer::mapping::proto::HybridGrid* Submap3D::mutable_low_resolution_hybrid_grid() {
  
  if (low_resolution_hybrid_grid_ == NULL) {
    low_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap3D.low_resolution_hybrid_grid)
  return low_resolution_hybrid_grid_;
}
inline ::cartographer::mapping::proto::HybridGrid* Submap3D::release_low_resolution_hybrid_grid() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap3D.low_resolution_hybrid_grid)
  
  ::cartographer::mapping::proto::HybridGrid* temp = low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = NULL;
  return temp;
}
inline void Submap3D::set_allocated_low_resolution_hybrid_grid(::cartographer::mapping::proto::HybridGrid* low_resolution_hybrid_grid) {
  delete low_resolution_hybrid_grid_;
  low_resolution_hybrid_grid_ = low_resolution_hybrid_grid;
  if (low_resolution_hybrid_grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap3D.low_resolution_hybrid_grid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fsubmap_2eproto__INCLUDED
