// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/constraint_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_2d.pb.h"
#include "cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.pb.h"
#include "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_2d.pb.h"
#include "cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace constraints {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto();

class ConstraintBuilderOptions;

// ===================================================================

class ConstraintBuilderOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.constraints.proto.ConstraintBuilderOptions) */ {
 public:
  ConstraintBuilderOptions();
  virtual ~ConstraintBuilderOptions();

  ConstraintBuilderOptions(const ConstraintBuilderOptions& from);

  inline ConstraintBuilderOptions& operator=(const ConstraintBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintBuilderOptions& default_instance();

  void Swap(ConstraintBuilderOptions* other);

  // implements Message ----------------------------------------------

  inline ConstraintBuilderOptions* New() const { return New(NULL); }

  ConstraintBuilderOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstraintBuilderOptions& from);
  void MergeFrom(const ConstraintBuilderOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConstraintBuilderOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double sampling_ratio = 1;
  void clear_sampling_ratio();
  static const int kSamplingRatioFieldNumber = 1;
  double sampling_ratio() const;
  void set_sampling_ratio(double value);

  // optional double max_constraint_distance = 2;
  void clear_max_constraint_distance();
  static const int kMaxConstraintDistanceFieldNumber = 2;
  double max_constraint_distance() const;
  void set_max_constraint_distance(double value);

  // optional double min_score = 4;
  void clear_min_score();
  static const int kMinScoreFieldNumber = 4;
  double min_score() const;
  void set_min_score(double value);

  // optional double global_localization_min_score = 5;
  void clear_global_localization_min_score();
  static const int kGlobalLocalizationMinScoreFieldNumber = 5;
  double global_localization_min_score() const;
  void set_global_localization_min_score(double value);

  // optional double loop_closure_translation_weight = 13;
  void clear_loop_closure_translation_weight();
  static const int kLoopClosureTranslationWeightFieldNumber = 13;
  double loop_closure_translation_weight() const;
  void set_loop_closure_translation_weight(double value);

  // optional double loop_closure_rotation_weight = 14;
  void clear_loop_closure_rotation_weight();
  static const int kLoopClosureRotationWeightFieldNumber = 14;
  double loop_closure_rotation_weight() const;
  void set_loop_closure_rotation_weight(double value);

  // optional bool log_matches = 8;
  void clear_log_matches();
  static const int kLogMatchesFieldNumber = 8;
  bool log_matches() const;
  void set_log_matches(bool value);

  // optional .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
  bool has_fast_correlative_scan_matcher_options() const;
  void clear_fast_correlative_scan_matcher_options();
  static const int kFastCorrelativeScanMatcherOptionsFieldNumber = 9;
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D& fast_correlative_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* mutable_fast_correlative_scan_matcher_options();
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* release_fast_correlative_scan_matcher_options();
  void set_allocated_fast_correlative_scan_matcher_options(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* fast_correlative_scan_matcher_options);

  // optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
  bool has_ceres_scan_matcher_options() const;
  void clear_ceres_scan_matcher_options();
  static const int kCeresScanMatcherOptionsFieldNumber = 11;
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ceres_scan_matcher_options() const;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* mutable_ceres_scan_matcher_options();
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* release_ceres_scan_matcher_options();
  void set_allocated_ceres_scan_matcher_options(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options);

  // optional .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
  bool has_fast_correlative_scan_matcher_options_3d() const;
  void clear_fast_correlative_scan_matcher_options_3d();
  static const int kFastCorrelativeScanMatcherOptions3DFieldNumber = 10;
  const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D& fast_correlative_scan_matcher_options_3d() const;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* mutable_fast_correlative_scan_matcher_options_3d();
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* release_fast_correlative_scan_matcher_options_3d();
  void set_allocated_fast_correlative_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* fast_correlative_scan_matcher_options_3d);

  // optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
  bool has_ceres_scan_matcher_options_3d() const;
  void clear_ceres_scan_matcher_options_3d();
  static const int kCeresScanMatcherOptions3DFieldNumber = 12;
  const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& ceres_scan_matcher_options_3d() const;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* mutable_ceres_scan_matcher_options_3d();
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* release_ceres_scan_matcher_options_3d();
  void set_allocated_ceres_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ceres_scan_matcher_options_3d);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double sampling_ratio_;
  double max_constraint_distance_;
  double min_score_;
  double global_localization_min_score_;
  double loop_closure_translation_weight_;
  double loop_closure_rotation_weight_;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* fast_correlative_scan_matcher_options_;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options_;
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* fast_correlative_scan_matcher_options_3d_;
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ceres_scan_matcher_options_3d_;
  bool log_matches_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto();

  void InitAsDefaultInstance();
  static ConstraintBuilderOptions* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstraintBuilderOptions

// optional double sampling_ratio = 1;
inline void ConstraintBuilderOptions::clear_sampling_ratio() {
  sampling_ratio_ = 0;
}
inline double ConstraintBuilderOptions::sampling_ratio() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.sampling_ratio)
  return sampling_ratio_;
}
inline void ConstraintBuilderOptions::set_sampling_ratio(double value) {
  
  sampling_ratio_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.sampling_ratio)
}

// optional double max_constraint_distance = 2;
inline void ConstraintBuilderOptions::clear_max_constraint_distance() {
  max_constraint_distance_ = 0;
}
inline double ConstraintBuilderOptions::max_constraint_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.max_constraint_distance)
  return max_constraint_distance_;
}
inline void ConstraintBuilderOptions::set_max_constraint_distance(double value) {
  
  max_constraint_distance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.max_constraint_distance)
}

// optional double min_score = 4;
inline void ConstraintBuilderOptions::clear_min_score() {
  min_score_ = 0;
}
inline double ConstraintBuilderOptions::min_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.min_score)
  return min_score_;
}
inline void ConstraintBuilderOptions::set_min_score(double value) {
  
  min_score_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.min_score)
}

// optional double global_localization_min_score = 5;
inline void ConstraintBuilderOptions::clear_global_localization_min_score() {
  global_localization_min_score_ = 0;
}
inline double ConstraintBuilderOptions::global_localization_min_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.global_localization_min_score)
  return global_localization_min_score_;
}
inline void ConstraintBuilderOptions::set_global_localization_min_score(double value) {
  
  global_localization_min_score_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.global_localization_min_score)
}

// optional double loop_closure_translation_weight = 13;
inline void ConstraintBuilderOptions::clear_loop_closure_translation_weight() {
  loop_closure_translation_weight_ = 0;
}
inline double ConstraintBuilderOptions::loop_closure_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_translation_weight)
  return loop_closure_translation_weight_;
}
inline void ConstraintBuilderOptions::set_loop_closure_translation_weight(double value) {
  
  loop_closure_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_translation_weight)
}

// optional double loop_closure_rotation_weight = 14;
inline void ConstraintBuilderOptions::clear_loop_closure_rotation_weight() {
  loop_closure_rotation_weight_ = 0;
}
inline double ConstraintBuilderOptions::loop_closure_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_rotation_weight)
  return loop_closure_rotation_weight_;
}
inline void ConstraintBuilderOptions::set_loop_closure_rotation_weight(double value) {
  
  loop_closure_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.loop_closure_rotation_weight)
}

// optional bool log_matches = 8;
inline void ConstraintBuilderOptions::clear_log_matches() {
  log_matches_ = false;
}
inline bool ConstraintBuilderOptions::log_matches() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.log_matches)
  return log_matches_;
}
inline void ConstraintBuilderOptions::set_log_matches(bool value) {
  
  log_matches_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.log_matches)
}

// optional .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
inline bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options() const {
  return !_is_default_instance_ && fast_correlative_scan_matcher_options_ != NULL;
}
inline void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && fast_correlative_scan_matcher_options_ != NULL) delete fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = NULL;
}
inline const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D& ConstraintBuilderOptions::fast_correlative_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  return fast_correlative_scan_matcher_options_ != NULL ? *fast_correlative_scan_matcher_options_ : *default_instance_->fast_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options() {
  
  if (fast_correlative_scan_matcher_options_ == NULL) {
    fast_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  return fast_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* temp = fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D* fast_correlative_scan_matcher_options) {
  delete fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = fast_correlative_scan_matcher_options;
  if (fast_correlative_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
}

// optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
inline bool ConstraintBuilderOptions::has_ceres_scan_matcher_options() const {
  return !_is_default_instance_ && ceres_scan_matcher_options_ != NULL;
}
inline void ConstraintBuilderOptions::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D& ConstraintBuilderOptions::ceres_scan_matcher_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_ != NULL ? *ceres_scan_matcher_options_ : *default_instance_->ceres_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options() {
  
  if (ceres_scan_matcher_options_ == NULL) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ConstraintBuilderOptions::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
}

// optional .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
inline bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options_3d() const {
  return !_is_default_instance_ && fast_correlative_scan_matcher_options_3d_ != NULL;
}
inline void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options_3d() {
  if (GetArenaNoVirtual() == NULL && fast_correlative_scan_matcher_options_3d_ != NULL) delete fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = NULL;
}
inline const ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D& ConstraintBuilderOptions::fast_correlative_scan_matcher_options_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  return fast_correlative_scan_matcher_options_3d_ != NULL ? *fast_correlative_scan_matcher_options_3d_ : *default_instance_->fast_correlative_scan_matcher_options_3d_;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options_3d() {
  
  if (fast_correlative_scan_matcher_options_3d_ == NULL) {
    fast_correlative_scan_matcher_options_3d_ = new ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  return fast_correlative_scan_matcher_options_3d_;
}
inline ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  
  ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* temp = fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D* fast_correlative_scan_matcher_options_3d) {
  delete fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = fast_correlative_scan_matcher_options_3d;
  if (fast_correlative_scan_matcher_options_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
}

// optional .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
inline bool ConstraintBuilderOptions::has_ceres_scan_matcher_options_3d() const {
  return !_is_default_instance_ && ceres_scan_matcher_options_3d_ != NULL;
}
inline void ConstraintBuilderOptions::clear_ceres_scan_matcher_options_3d() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_3d_ != NULL) delete ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = NULL;
}
inline const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& ConstraintBuilderOptions::ceres_scan_matcher_options_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  return ceres_scan_matcher_options_3d_ != NULL ? *ceres_scan_matcher_options_3d_ : *default_instance_->ceres_scan_matcher_options_3d_;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options_3d() {
  
  if (ceres_scan_matcher_options_3d_ == NULL) {
    ceres_scan_matcher_options_3d_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  return ceres_scan_matcher_options_3d_;
}
inline ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ConstraintBuilderOptions::release_ceres_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  
  ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* temp = ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = NULL;
  return temp;
}
inline void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options_3d(::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* ceres_scan_matcher_options_3d) {
  delete ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = ceres_scan_matcher_options_3d;
  if (ceres_scan_matcher_options_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.constraints.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace constraints
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto__INCLUDED
