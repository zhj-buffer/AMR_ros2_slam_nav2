// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/trajectory.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();

class NodeId;
class PoseGraph;
class PoseGraph_Constraint;
class PoseGraph_LandmarkPose;
class SubmapId;

enum PoseGraph_Constraint_Tag {
  PoseGraph_Constraint_Tag_INTRA_SUBMAP = 0,
  PoseGraph_Constraint_Tag_INTER_SUBMAP = 1,
  PoseGraph_Constraint_Tag_PoseGraph_Constraint_Tag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PoseGraph_Constraint_Tag_PoseGraph_Constraint_Tag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PoseGraph_Constraint_Tag_IsValid(int value);
const PoseGraph_Constraint_Tag PoseGraph_Constraint_Tag_Tag_MIN = PoseGraph_Constraint_Tag_INTRA_SUBMAP;
const PoseGraph_Constraint_Tag PoseGraph_Constraint_Tag_Tag_MAX = PoseGraph_Constraint_Tag_INTER_SUBMAP;
const int PoseGraph_Constraint_Tag_Tag_ARRAYSIZE = PoseGraph_Constraint_Tag_Tag_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoseGraph_Constraint_Tag_descriptor();
inline const ::std::string& PoseGraph_Constraint_Tag_Name(PoseGraph_Constraint_Tag value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoseGraph_Constraint_Tag_descriptor(), value);
}
inline bool PoseGraph_Constraint_Tag_Parse(
    const ::std::string& name, PoseGraph_Constraint_Tag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoseGraph_Constraint_Tag>(
    PoseGraph_Constraint_Tag_descriptor(), name, value);
}
// ===================================================================

class SubmapId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapId) */ {
 public:
  SubmapId();
  virtual ~SubmapId();

  SubmapId(const SubmapId& from);

  inline SubmapId& operator=(const SubmapId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapId& default_instance();

  void Swap(SubmapId* other);

  // implements Message ----------------------------------------------

  inline SubmapId* New() const { return New(NULL); }

  SubmapId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmapId& from);
  void MergeFrom(const SubmapId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubmapId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // optional int32 submap_index = 2;
  void clear_submap_index();
  static const int kSubmapIndexFieldNumber = 2;
  ::google::protobuf::int32 submap_index() const;
  void set_submap_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 trajectory_id_;
  ::google::protobuf::int32 submap_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static SubmapId* default_instance_;
};
// -------------------------------------------------------------------

class NodeId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.NodeId) */ {
 public:
  NodeId();
  virtual ~NodeId();

  NodeId(const NodeId& from);

  inline NodeId& operator=(const NodeId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeId& default_instance();

  void Swap(NodeId* other);

  // implements Message ----------------------------------------------

  inline NodeId* New() const { return New(NULL); }

  NodeId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeId& from);
  void MergeFrom(const NodeId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // optional int32 node_index = 2;
  void clear_node_index();
  static const int kNodeIndexFieldNumber = 2;
  ::google::protobuf::int32 node_index() const;
  void set_node_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.NodeId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 trajectory_id_;
  ::google::protobuf::int32 node_index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static NodeId* default_instance_;
};
// -------------------------------------------------------------------

class PoseGraph_Constraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraph.Constraint) */ {
 public:
  PoseGraph_Constraint();
  virtual ~PoseGraph_Constraint();

  PoseGraph_Constraint(const PoseGraph_Constraint& from);

  inline PoseGraph_Constraint& operator=(const PoseGraph_Constraint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseGraph_Constraint& default_instance();

  void Swap(PoseGraph_Constraint* other);

  // implements Message ----------------------------------------------

  inline PoseGraph_Constraint* New() const { return New(NULL); }

  PoseGraph_Constraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseGraph_Constraint& from);
  void MergeFrom(const PoseGraph_Constraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseGraph_Constraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoseGraph_Constraint_Tag Tag;
  static const Tag INTRA_SUBMAP =
    PoseGraph_Constraint_Tag_INTRA_SUBMAP;
  static const Tag INTER_SUBMAP =
    PoseGraph_Constraint_Tag_INTER_SUBMAP;
  static inline bool Tag_IsValid(int value) {
    return PoseGraph_Constraint_Tag_IsValid(value);
  }
  static const Tag Tag_MIN =
    PoseGraph_Constraint_Tag_Tag_MIN;
  static const Tag Tag_MAX =
    PoseGraph_Constraint_Tag_Tag_MAX;
  static const int Tag_ARRAYSIZE =
    PoseGraph_Constraint_Tag_Tag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tag_descriptor() {
    return PoseGraph_Constraint_Tag_descriptor();
  }
  static inline const ::std::string& Tag_Name(Tag value) {
    return PoseGraph_Constraint_Tag_Name(value);
  }
  static inline bool Tag_Parse(const ::std::string& name,
      Tag* value) {
    return PoseGraph_Constraint_Tag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
  bool has_submap_id() const;
  void clear_submap_id();
  static const int kSubmapIdFieldNumber = 1;
  const ::cartographer::mapping::proto::SubmapId& submap_id() const;
  ::cartographer::mapping::proto::SubmapId* mutable_submap_id();
  ::cartographer::mapping::proto::SubmapId* release_submap_id();
  void set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id);

  // optional .cartographer.mapping.proto.NodeId node_id = 2;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  const ::cartographer::mapping::proto::NodeId& node_id() const;
  ::cartographer::mapping::proto::NodeId* mutable_node_id();
  ::cartographer::mapping::proto::NodeId* release_node_id();
  void set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id);

  // optional .cartographer.transform.proto.Rigid3d relative_pose = 3;
  bool has_relative_pose() const;
  void clear_relative_pose();
  static const int kRelativePoseFieldNumber = 3;
  const ::cartographer::transform::proto::Rigid3d& relative_pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_relative_pose();
  ::cartographer::transform::proto::Rigid3d* release_relative_pose();
  void set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose);

  // optional double translation_weight = 6;
  void clear_translation_weight();
  static const int kTranslationWeightFieldNumber = 6;
  double translation_weight() const;
  void set_translation_weight(double value);

  // optional double rotation_weight = 7;
  void clear_rotation_weight();
  static const int kRotationWeightFieldNumber = 7;
  double rotation_weight() const;
  void set_rotation_weight(double value);

  // optional .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  void clear_tag();
  static const int kTagFieldNumber = 5;
  ::cartographer::mapping::proto::PoseGraph_Constraint_Tag tag() const;
  void set_tag(::cartographer::mapping::proto::PoseGraph_Constraint_Tag value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraph.Constraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::mapping::proto::SubmapId* submap_id_;
  ::cartographer::mapping::proto::NodeId* node_id_;
  ::cartographer::transform::proto::Rigid3d* relative_pose_;
  double translation_weight_;
  double rotation_weight_;
  int tag_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static PoseGraph_Constraint* default_instance_;
};
// -------------------------------------------------------------------

class PoseGraph_LandmarkPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraph.LandmarkPose) */ {
 public:
  PoseGraph_LandmarkPose();
  virtual ~PoseGraph_LandmarkPose();

  PoseGraph_LandmarkPose(const PoseGraph_LandmarkPose& from);

  inline PoseGraph_LandmarkPose& operator=(const PoseGraph_LandmarkPose& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseGraph_LandmarkPose& default_instance();

  void Swap(PoseGraph_LandmarkPose* other);

  // implements Message ----------------------------------------------

  inline PoseGraph_LandmarkPose* New() const { return New(NULL); }

  PoseGraph_LandmarkPose* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseGraph_LandmarkPose& from);
  void MergeFrom(const PoseGraph_LandmarkPose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseGraph_LandmarkPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string landmark_id = 1;
  void clear_landmark_id();
  static const int kLandmarkIdFieldNumber = 1;
  const ::std::string& landmark_id() const;
  void set_landmark_id(const ::std::string& value);
  void set_landmark_id(const char* value);
  void set_landmark_id(const char* value, size_t size);
  ::std::string* mutable_landmark_id();
  ::std::string* release_landmark_id();
  void set_allocated_landmark_id(::std::string* landmark_id);

  // optional .cartographer.transform.proto.Rigid3d global_pose = 2;
  bool has_global_pose() const;
  void clear_global_pose();
  static const int kGlobalPoseFieldNumber = 2;
  const ::cartographer::transform::proto::Rigid3d& global_pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_global_pose();
  ::cartographer::transform::proto::Rigid3d* release_global_pose();
  void set_allocated_global_pose(::cartographer::transform::proto::Rigid3d* global_pose);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraph.LandmarkPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr landmark_id_;
  ::cartographer::transform::proto::Rigid3d* global_pose_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static PoseGraph_LandmarkPose* default_instance_;
};
// -------------------------------------------------------------------

class PoseGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraph) */ {
 public:
  PoseGraph();
  virtual ~PoseGraph();

  PoseGraph(const PoseGraph& from);

  inline PoseGraph& operator=(const PoseGraph& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseGraph& default_instance();

  void Swap(PoseGraph* other);

  // implements Message ----------------------------------------------

  inline PoseGraph* New() const { return New(NULL); }

  PoseGraph* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseGraph& from);
  void MergeFrom(const PoseGraph& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoseGraph_Constraint Constraint;
  typedef PoseGraph_LandmarkPose LandmarkPose;

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  int constraint_size() const;
  void clear_constraint();
  static const int kConstraintFieldNumber = 2;
  const ::cartographer::mapping::proto::PoseGraph_Constraint& constraint(int index) const;
  ::cartographer::mapping::proto::PoseGraph_Constraint* mutable_constraint(int index);
  ::cartographer::mapping::proto::PoseGraph_Constraint* add_constraint();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >*
      mutable_constraint();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >&
      constraint() const;

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 4;
  const ::cartographer::mapping::proto::Trajectory& trajectory(int index) const;
  ::cartographer::mapping::proto::Trajectory* mutable_trajectory(int index);
  ::cartographer::mapping::proto::Trajectory* add_trajectory();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >*
      mutable_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >&
      trajectory() const;

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  int landmark_poses_size() const;
  void clear_landmark_poses();
  static const int kLandmarkPosesFieldNumber = 5;
  const ::cartographer::mapping::proto::PoseGraph_LandmarkPose& landmark_poses(int index) const;
  ::cartographer::mapping::proto::PoseGraph_LandmarkPose* mutable_landmark_poses(int index);
  ::cartographer::mapping::proto::PoseGraph_LandmarkPose* add_landmark_poses();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >*
      mutable_landmark_poses();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >&
      landmark_poses() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint > constraint_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory > trajectory_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose > landmark_poses_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static PoseGraph* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapId

// optional int32 trajectory_id = 1;
inline void SubmapId::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 SubmapId::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapId.trajectory_id)
  return trajectory_id_;
}
inline void SubmapId::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapId.trajectory_id)
}

// optional int32 submap_index = 2;
inline void SubmapId::clear_submap_index() {
  submap_index_ = 0;
}
inline ::google::protobuf::int32 SubmapId::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapId.submap_index)
  return submap_index_;
}
inline void SubmapId::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapId.submap_index)
}

// -------------------------------------------------------------------

// NodeId

// optional int32 trajectory_id = 1;
inline void NodeId::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 NodeId::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NodeId.trajectory_id)
  return trajectory_id_;
}
inline void NodeId::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NodeId.trajectory_id)
}

// optional int32 node_index = 2;
inline void NodeId::clear_node_index() {
  node_index_ = 0;
}
inline ::google::protobuf::int32 NodeId::node_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NodeId.node_index)
  return node_index_;
}
inline void NodeId::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NodeId.node_index)
}

// -------------------------------------------------------------------

// PoseGraph_Constraint

// optional .cartographer.mapping.proto.SubmapId submap_id = 1;
inline bool PoseGraph_Constraint::has_submap_id() const {
  return !_is_default_instance_ && submap_id_ != NULL;
}
inline void PoseGraph_Constraint::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
inline const ::cartographer::mapping::proto::SubmapId& PoseGraph_Constraint::submap_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  return submap_id_ != NULL ? *submap_id_ : *default_instance_->submap_id_;
}
inline ::cartographer::mapping::proto::SubmapId* PoseGraph_Constraint::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  return submap_id_;
}
inline ::cartographer::mapping::proto::SubmapId* PoseGraph_Constraint::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
inline void PoseGraph_Constraint::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
}

// optional .cartographer.mapping.proto.NodeId node_id = 2;
inline bool PoseGraph_Constraint::has_node_id() const {
  return !_is_default_instance_ && node_id_ != NULL;
}
inline void PoseGraph_Constraint::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) delete node_id_;
  node_id_ = NULL;
}
inline const ::cartographer::mapping::proto::NodeId& PoseGraph_Constraint::node_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  return node_id_ != NULL ? *node_id_ : *default_instance_->node_id_;
}
inline ::cartographer::mapping::proto::NodeId* PoseGraph_Constraint::mutable_node_id() {
  
  if (node_id_ == NULL) {
    node_id_ = new ::cartographer::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  return node_id_;
}
inline ::cartographer::mapping::proto::NodeId* PoseGraph_Constraint::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  
  ::cartographer::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
inline void PoseGraph_Constraint::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
}

// optional .cartographer.transform.proto.Rigid3d relative_pose = 3;
inline bool PoseGraph_Constraint::has_relative_pose() const {
  return !_is_default_instance_ && relative_pose_ != NULL;
}
inline void PoseGraph_Constraint::clear_relative_pose() {
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) delete relative_pose_;
  relative_pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& PoseGraph_Constraint::relative_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  return relative_pose_ != NULL ? *relative_pose_ : *default_instance_->relative_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_Constraint::mutable_relative_pose() {
  
  if (relative_pose_ == NULL) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  return relative_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_Constraint::release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = relative_pose_;
  relative_pose_ = NULL;
  return temp;
}
inline void PoseGraph_Constraint::set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose) {
  delete relative_pose_;
  relative_pose_ = relative_pose;
  if (relative_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
}

// optional double translation_weight = 6;
inline void PoseGraph_Constraint::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double PoseGraph_Constraint::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.translation_weight)
  return translation_weight_;
}
inline void PoseGraph_Constraint::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.translation_weight)
}

// optional double rotation_weight = 7;
inline void PoseGraph_Constraint::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double PoseGraph_Constraint::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.rotation_weight)
  return rotation_weight_;
}
inline void PoseGraph_Constraint::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.rotation_weight)
}

// optional .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
inline void PoseGraph_Constraint::clear_tag() {
  tag_ = 0;
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint_Tag PoseGraph_Constraint::tag() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.tag)
  return static_cast< ::cartographer::mapping::proto::PoseGraph_Constraint_Tag >(tag_);
}
inline void PoseGraph_Constraint::set_tag(::cartographer::mapping::proto::PoseGraph_Constraint_Tag value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.tag)
}

// -------------------------------------------------------------------

// PoseGraph_LandmarkPose

// optional string landmark_id = 1;
inline void PoseGraph_LandmarkPose::clear_landmark_id() {
  landmark_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PoseGraph_LandmarkPose::landmark_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  return landmark_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseGraph_LandmarkPose::set_landmark_id(const ::std::string& value) {
  
  landmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
inline void PoseGraph_LandmarkPose::set_landmark_id(const char* value) {
  
  landmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
inline void PoseGraph_LandmarkPose::set_landmark_id(const char* value, size_t size) {
  
  landmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
inline ::std::string* PoseGraph_LandmarkPose::mutable_landmark_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  return landmark_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseGraph_LandmarkPose::release_landmark_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  
  return landmark_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseGraph_LandmarkPose::set_allocated_landmark_id(::std::string* landmark_id) {
  if (landmark_id != NULL) {
    
  } else {
    
  }
  landmark_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), landmark_id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}

// optional .cartographer.transform.proto.Rigid3d global_pose = 2;
inline bool PoseGraph_LandmarkPose::has_global_pose() const {
  return !_is_default_instance_ && global_pose_ != NULL;
}
inline void PoseGraph_LandmarkPose::clear_global_pose() {
  if (GetArenaNoVirtual() == NULL && global_pose_ != NULL) delete global_pose_;
  global_pose_ = NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& PoseGraph_LandmarkPose::global_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  return global_pose_ != NULL ? *global_pose_ : *default_instance_->global_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_LandmarkPose::mutable_global_pose() {
  
  if (global_pose_ == NULL) {
    global_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  return global_pose_;
}
inline ::cartographer::transform::proto::Rigid3d* PoseGraph_LandmarkPose::release_global_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = global_pose_;
  global_pose_ = NULL;
  return temp;
}
inline void PoseGraph_LandmarkPose::set_allocated_global_pose(::cartographer::transform::proto::Rigid3d* global_pose) {
  delete global_pose_;
  global_pose_ = global_pose;
  if (global_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
}

// -------------------------------------------------------------------

// PoseGraph

// repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
inline int PoseGraph::constraint_size() const {
  return constraint_.size();
}
inline void PoseGraph::clear_constraint() {
  constraint_.Clear();
}
inline const ::cartographer::mapping::proto::PoseGraph_Constraint& PoseGraph::constraint(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_.Get(index);
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint* PoseGraph::mutable_constraint(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_.Mutable(index);
}
inline ::cartographer::mapping::proto::PoseGraph_Constraint* PoseGraph::add_constraint() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >*
PoseGraph::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.constraint)
  return &constraint_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_Constraint >&
PoseGraph::constraint() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_;
}

// repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
inline int PoseGraph::trajectory_size() const {
  return trajectory_.size();
}
inline void PoseGraph::clear_trajectory() {
  trajectory_.Clear();
}
inline const ::cartographer::mapping::proto::Trajectory& PoseGraph::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_.Get(index);
}
inline ::cartographer::mapping::proto::Trajectory* PoseGraph::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_.Mutable(index);
}
inline ::cartographer::mapping::proto::Trajectory* PoseGraph::add_trajectory() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >*
PoseGraph::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.trajectory)
  return &trajectory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory >&
PoseGraph::trajectory() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_;
}

// repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
inline int PoseGraph::landmark_poses_size() const {
  return landmark_poses_.size();
}
inline void PoseGraph::clear_landmark_poses() {
  landmark_poses_.Clear();
}
inline const ::cartographer::mapping::proto::PoseGraph_LandmarkPose& PoseGraph::landmark_poses(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_.Get(index);
}
inline ::cartographer::mapping::proto::PoseGraph_LandmarkPose* PoseGraph::mutable_landmark_poses(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_.Mutable(index);
}
inline ::cartographer::mapping::proto::PoseGraph_LandmarkPose* PoseGraph::add_landmark_poses() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >*
PoseGraph::mutable_landmark_poses() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return &landmark_poses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >&
PoseGraph::landmark_poses() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cartographer::mapping::proto::PoseGraph_Constraint_Tag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cartographer::mapping::proto::PoseGraph_Constraint_Tag>() {
  return ::cartographer::mapping::proto::PoseGraph_Constraint_Tag_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto__INCLUDED
